<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SpiceSharp</name>
    </assembly>
    <members>
        <member name="T:SpiceSharp.Algebra.SparseMatrix`1">
            <summary>
            A square matrix that uses a sparse storage method.
            </summary>
            <remarks>
            The elements in row and column with index 0 are considered trashcan elements. They
            should all map on the same element.
            </remarks>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="T:SpiceSharp.Algebra.SparseMatrix`1.Column">
            <summary>
            A class that keeps track of a linked list of matrix elements for a column.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseMatrix`1.Column.FirstInColumn">
            <summary>
            Gets the first element in the column.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseMatrix`1.Column.LastInColumn">
            <summary>
            Gets the last element in the column.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.Column.Insert(SpiceSharp.Algebra.SparseMatrix{`0}.SparseMatrixElement)">
            <summary>
            Insert an element in the column. This method assumes an element does not exist at its indices!
            </summary>
            <param name="newElement">The new element to insert.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.Column.CreateGetElement(System.Int32,System.Int32,SpiceSharp.Algebra.SparseMatrix{`0}.SparseMatrixElement@)">
            <summary>
            Create or get an element in the column.
            </summary>
            <param name="row">The row index used for creating a new element</param>
            <param name="column">The column index.</param>
            <param name="result">The found or created element.</param>
            <returns>True if the element was found, false if it was created.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.Column.Find(System.Int32)">
            <summary>
            Find an element in the row without creating it.
            </summary>
            <param name="row">The row index.</param>
            <returns>The element at the specified row, or null if it doesn't exist.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.Column.Remove(SpiceSharp.Algebra.SparseMatrix{`0}.SparseMatrixElement)">
            <summary>
            Remove an element from the column.
            </summary>
            <param name="element">The element to be removed.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.Column.Swap(SpiceSharp.Algebra.SparseMatrix{`0}.SparseMatrixElement,SpiceSharp.Algebra.SparseMatrix{`0}.SparseMatrixElement,System.Int32,System.Int32)">
            <summary>
            Swap two elements in the row, <paramref name="first"/> and <paramref name="rowFirst"/> 
            are supposed to come first in the row. Does not update row pointers!
            </summary>
            <param name="first">The first matrix element.</param>
            <param name="second">The second matrix element.</param>
            <param name="rowFirst">The first row.</param>
            <param name="rowSecond">The second row.</param>
        </member>
        <member name="T:SpiceSharp.Algebra.SparseMatrix`1.Row">
            <summary>
            A class that keeps track of a linked list of matrix elements for a row.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseMatrix`1.Row.FirstInRow">
            <summary>
            Gets the first element in the row.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseMatrix`1.Row.LastInRow">
            <summary>
            Gets the last element in the row.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.Row.Insert(SpiceSharp.Algebra.SparseMatrix{`0}.SparseMatrixElement)">
            <summary>
            Insert an element in the row. This method assumes an element does not exist at its indices!
            </summary>
            <param name="newElement">The new element to insert.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.Row.CreateGetElement(System.Int32,System.Int32,SpiceSharp.Algebra.SparseMatrix{`0}.SparseMatrixElement@)">
            <summary>
            Create or get an element in the row.
            </summary>
            <param name="row">The row index used for creating a new element</param>
            <param name="column">The column index.</param>
            <param name="result">The found or created element.</param>
            <returns>True if the element was found, false if it was created.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.Row.Find(System.Int32)">
            <summary>
            Find an element in the row without creating it.
            </summary>
            <param name="column">The column index.</param>
            <returns>The element at the specified column, or null if it doesn't exist.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.Row.Remove(SpiceSharp.Algebra.SparseMatrix{`0}.SparseMatrixElement)">
            <summary>
            Remove an element from the row.
            </summary>
            <param name="element">The element to be removed.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.Row.Swap(SpiceSharp.Algebra.SparseMatrix{`0}.SparseMatrixElement,SpiceSharp.Algebra.SparseMatrix{`0}.SparseMatrixElement,System.Int32,System.Int32)">
            <summary>
            Swap two elements in the row, <paramref name="first"/> and <paramref name="columnFirst"/> 
            are supposed to come first in the row. Does not update column pointers!
            </summary>
            <param name="first">The first matrix element.</param>
            <param name="second">The second matrix element.</param>
            <param name="columnFirst">The first column.</param>
            <param name="columnSecond">The second column.</param>
        </member>
        <member name="F:SpiceSharp.Algebra.SparseMatrix`1.InitialSize">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:SpiceSharp.Algebra.SparseMatrix`1._rows">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SparseMatrix`1"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SparseMatrix`1"/> class.
            </summary>
            <param name="size">The matrix size.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.GetValue(System.Int32,System.Int32)">
            <summary>
            Gets a value in the matrix at a specific row and column.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <returns>
            The value at the specified row and column.
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.SetValue(System.Int32,System.Int32,`0)">
            <summary>
            Sets the value in the matrix at a specific row and column.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.GetElement(System.Int32,System.Int32)">
            <summary>
            Get an element in the matrix. This method creates a new element if it doesn't exist.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <returns>The matrix element at the specified row and column.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.GetDiagonalElement(System.Int32)">
            <summary>
            Get a diagonal element.
            </summary>
            <param name="index">The row/column index.</param>
            <returns>The matrix element at the specified diagonal index.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.FindElement(System.Int32,System.Int32)">
            <summary>
            Find an element. This method will not create a new element if it doesn't exist.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <returns>The element at the specified row and column, or null if it doesn't exist.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.GetFirstInRow(System.Int32)">
            <summary>
            Gets the first element in a row.
            </summary>
            <param name="row">The row index.</param>
            <returns>The first element in the row or null if there are none.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.GetLastInRow(System.Int32)">
            <summary>
            Gets the last element in a row.
            </summary>
            <param name="row">The row index.</param>
            <returns>The last element in the row of null if there are none.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.GetFirstInColumn(System.Int32)">
            <summary>
            Gets the first element in a column.
            </summary>
            <param name="column">The column index.</param>
            <returns>The first element in the column or null if there are none.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.GetLastInColumn(System.Int32)">
            <summary>
            Gets the last element in a column.
            </summary>
            <param name="column">The column index.</param>
            <returns>The last element in the column or null if there are none.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.SwapRows(System.Int32,System.Int32)">
            <summary>
            Swap two rows in the matrix.
            </summary>
            <param name="row1">The first row index.</param>
            <param name="row2">The second row index.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.SwapColumns(System.Int32,System.Int32)">
            <summary>
            Swap two columns in the matrix.
            </summary>
            <param name="column1">The first column index.</param>
            <param name="column2">The second column index.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.ExpandMatrix(System.Int32)">
            <summary>
            Expand the matrix.
            </summary>
            <param name="newSize">The new matrix size.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:SpiceSharp.Algebra.SparseMatrix`1.SparseMatrixElement">
            <summary>
            An element for a sparse matrix.
            </summary>
            <seealso cref="T:SpiceSharp.Algebra.Matrix`1" />
        </member>
        <member name="P:SpiceSharp.Algebra.SparseMatrix`1.SparseMatrixElement.Row">
            <summary>
            Gets or sets the row index.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseMatrix`1.SparseMatrixElement.Column">
            <summary>
            Gets or sets the column index.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseMatrix`1.SparseMatrixElement.NextInRow">
            <summary>
            Gets or sets the next element in the row.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseMatrix`1.SparseMatrixElement.NextInColumn">
            <summary>
            Gets or sets the next element in the column.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseMatrix`1.SparseMatrixElement.PreviousInRow">
            <summary>
            Gets or sets the previous element in the row.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseMatrix`1.SparseMatrixElement.PreviousInColumn">
            <summary>
            Gets or sets the previous element in the column.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseMatrix`1.SparseMatrixElement.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SparseMatrix`1.SparseMatrixElement"/> class.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseMatrix`1.SparseMatrixElement.Above">
            <summary>
            Gets the element above (same column).
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseMatrix`1.SparseMatrixElement.Below">
            <summary>
            Gets the element below (same column).
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseMatrix`1.SparseMatrixElement.Right">
            <summary>
            Gets the element on the right (same row).
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseMatrix`1.SparseMatrixElement.Left">
            <summary>
            Gets the element on the left (same row).
            </summary>
        </member>
        <member name="T:SpiceSharp.Algebra.DenseMatrix`1">
            <summary>
            A square matrix using a dense representation. As a small optimization, the row and column with
            index 0 are not considered trash can elements.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="F:SpiceSharp.Algebra.DenseMatrix`1._array">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.DenseMatrix`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets a value at the specified row and column.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseMatrix`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.DenseMatrix`1"/> class.
            </summary>
            <param name="size">The matrix size.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseMatrix`1.GetValue(System.Int32,System.Int32)">
            <summary>
            Gets a value in the matrix at a specific row and column.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <returns>
            The value at the specified row and column.
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseMatrix`1.SetValue(System.Int32,System.Int32,`0)">
            <summary>
            Sets the value in the matrix at a specific row and column.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseMatrix`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseMatrix`1.ToString(System.String,System.IFormatProvider)">
            <summary>
            Convert to a string
            </summary>
            <param name="format">Format</param>
            <param name="formatProvider">Format provider</param>
            <returns></returns>
        </member>
        <member name="T:SpiceSharp.Algebra.Matrix`1">
            <summary>
            Base class for square matrices.
            </summary>
            <remarks>
            The elements in row and column with index 0 are considered trashcan elements. They
            should all map on the same element.
            </remarks>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="P:SpiceSharp.Algebra.Matrix`1.Size">
            <summary>
            Gets the size of the matrix.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.Matrix`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.Matrix`1"/> class.
            </summary>
            <param name="size">The matrix size.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.Matrix`1.GetValue(System.Int32,System.Int32)">
            <summary>
            Gets a value in the matrix at a specific row and column.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <returns>The value at the specified row and column.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.Matrix`1.SetValue(System.Int32,System.Int32,`0)">
            <summary>
            Sets the value in the matrix at a specific row and column.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:SpiceSharp.Algebra.MatrixElement`1">
            <summary>
            Base class for matrix elements.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="P:SpiceSharp.Algebra.MatrixElement`1.Value">
            <summary>
            Gets or sets the value of the element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.MatrixElement`1.Row">
            <summary>
            Gets the row of the element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.MatrixElement`1.Column">
            <summary>
            Gets the column of the element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.MatrixElement`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.MatrixElement`1"/> class.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.MatrixElement`1.Below">
            <summary>
            Gets the element below (same column).
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.MatrixElement`1.Above">
            <summary>
            Gets the element above (same column).
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.MatrixElement`1.Right">
            <summary>
            Gets the element on the right (same row).
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.MatrixElement`1.Left">
            <summary>
            Gets the element on the left (same row).
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.MatrixElement`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:SpiceSharp.Algebra.SingularException">
            <summary>
            Exception thrown when a matrix is singular.
            </summary>
            <seealso cref="T:SpiceSharp.Algebra.SparseException" />
        </member>
        <member name="P:SpiceSharp.Algebra.SingularException.Index">
            <summary>
            Gets the index where the first zero-diagonal element was found.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.SingularException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SingularException"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.SingularException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SingularException"/> class.
            </summary>
            <param name="index">The index where the exception occurred.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SingularException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SingularException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SingularException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SingularException"/> class.
            </summary>
            <param name="index">The index where the exception occurred.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SingularException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SingularException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SingularException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SingularException"/> class.
            </summary>
            <param name="index">The index where the exception occurred.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:SpiceSharp.Algebra.ComplexSolver">
            <summary>
            Class for solving real matrices
            </summary>
        </member>
        <member name="F:SpiceSharp.Algebra.ComplexSolver._intermediate">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.ComplexSolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.ComplexSolver"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.ComplexSolver.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.ComplexSolver"/> class.
            </summary>
            <param name="size">The number of equations and variables.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.ComplexSolver.#ctor(System.Int32,SpiceSharp.Algebra.Solve.PivotStrategy{System.Numerics.Complex})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.ComplexSolver"/> class.
            </summary>
            <param name="size">The number of equations and variables.</param>
            <param name="strategy">The pivot strategy.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.ComplexSolver.FixEquations">
            <summary>
            Fix the number of equations and variables.
            </summary>
            <remarks>
            This method can be used to make sure that the matrix is fixed during
            solving. When fixed, it is impossible to add more elements to the sparse
            matrix or vector.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Algebra.ComplexSolver.UnfixEquations">
            <summary>
            Unfix the number of equations and variables.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.ComplexSolver.Factor">
            <summary>
            Factor the matrix.
            </summary>
            <returns>
            True if factoring was successful.
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.ComplexSolver.Solve(SpiceSharp.Algebra.Vector{System.Numerics.Complex})">
            <summary>
            Solve the system of equations.
            </summary>
            <param name="solution">The solution vector that will hold the solution to the set of equations.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.ComplexSolver.SolveTransposed(SpiceSharp.Algebra.Vector{System.Numerics.Complex})">
            <summary>
            Solve the transposed problem.
            </summary>
            <param name="solution">The solution vector that will hold the solution to the transposed set of equations.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.ComplexSolver.OrderAndFactor">
            <summary>
            Order and factor the matrix.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.ComplexSolver.Elimination(SpiceSharp.Algebra.MatrixElement{System.Numerics.Complex})">
            <summary>
            Eliminate a row.
            </summary>
            <param name="pivot">The current pivot.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.ComplexSolver.Magnitude(System.Numerics.Complex)">
            <summary>
            Method for finding the magnitude of a complex value.
            </summary>
            <param name="value">The complex value.</param>
            <returns>A scalar indicating the magnitude of the complex value.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.ComplexSolver.Inverse(System.Numerics.Complex)">
            <summary>
            Calculates the inverse of a complex number.
            </summary>
            <param name="value">The complex value.</param>
            <returns>The inverse value.</returns>
        </member>
        <member name="T:SpiceSharp.Algebra.LinearSystemIndices">
            <summary>
            Indices of an element in a linear system.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.LinearSystemIndices.Row">
            <summary>
            Gets or sets the row in the matrix.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.LinearSystemIndices.Column">
            <summary>
            Gets or sets the column in the matrix.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.LinearSystemIndices.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Algebra.LinearSystemIndices"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.LinearSystemIndices.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Algebra.LinearSystemIndices"/> class.
            </summary>
            <param name="diagonal">The diagonal index.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.LinearSystemIndices.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Algebra.LinearSystemIndices"/> class.
            </summary>
            <param name="row">The row.</param>
            <param name="column">The column.</param>
        </member>
        <member name="T:SpiceSharp.Algebra.Solve.Markowitz`1">
            <summary>
            A search strategy based on methods outlined by Markowitz.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <seealso cref="T:SpiceSharp.Algebra.Solve.PivotStrategy`1" />
        </member>
        <member name="F:SpiceSharp.Algebra.Solve.Markowitz`1._markowitzRow">
            <summary>
            Markowitz numbers
            </summary>
        </member>
        <member name="F:SpiceSharp.Algebra.Solve.Markowitz`1.MaxMarkowitzCount">
            <summary>
            The maximum Markowitz count that will not result in Int32 overflow when squared
            Markowitz counts are capped at this quantity.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Markowitz`1.RowCount(System.Int32)">
            <summary>
            Gets the Markowitz row counts.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Markowitz`1.ColumnCount(System.Int32)">
            <summary>
            Gets the Markowitz column counts.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Markowitz`1.Product(System.Int32)">
            <summary>
            Gets the Markowitz products.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.Markowitz`1.Singletons">
            <summary>
            Gets the number of singletons.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.Markowitz`1.Magnitude">
            <summary>
            Gets the magnitude method.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.Markowitz`1.Strategies">
            <summary>
            Gets the strategies used for finding a pivot.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Markowitz`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.Solve.Markowitz`1"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Markowitz`1.IsValidPivot(SpiceSharp.Algebra.MatrixElement{`0})">
            <summary>
            This method will check whether or not a pivot element is valid or not.
            It checks for the submatrix right/below of the pivot.
            </summary>
            <param name="pivot">The pivot candidate.</param>
            <returns>
            True if the pivot can be used.
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Markowitz`1.Initialize(SpiceSharp.Algebra.Matrix{`0})">
            <summary>
            Initializes the pivot searching algorithm.
            </summary>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Markowitz`1.Count(SpiceSharp.Algebra.SparseMatrix{`0},SpiceSharp.Algebra.SparseVector{`0},System.Int32)">
            <summary>
            Count the Markowitz numbers.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="rhs">The right-hand side vector.</param>
            <param name="step">The elimination step.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Markowitz`1.Products(SpiceSharp.Algebra.SparseMatrix{`0},System.Int32)">
            <summary>
            Calculate the Markowitz products.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="step">The elimination step.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Markowitz`1.Setup(SpiceSharp.Algebra.SparseMatrix{`0},SpiceSharp.Algebra.SparseVector{`0},System.Int32,System.Func{`0,System.Double})">
            <summary>
            Setup the pivot strategy.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="rhs">The right-hand side vector.</param>
            <param name="eliminationStep">The current elimination step.</param>
            <param name="magnitude">The method used to determine the magnitude of an element.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Markowitz`1.MovePivot(SpiceSharp.Algebra.SparseMatrix{`0},SpiceSharp.Algebra.SparseVector{`0},SpiceSharp.Algebra.MatrixElement{`0},System.Int32)">
            <summary>
            Move the pivot to the diagonal for this elimination step.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="rhs">The right-hand side vector.</param>
            <param name="pivot">The pivot element.</param>
            <param name="eliminationStep">The elimination step.</param>
            <remarks>
            This is done by swapping the rows and columns of the diagonal and that of the pivot.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Markowitz`1.Update(SpiceSharp.Algebra.SparseMatrix{`0},SpiceSharp.Algebra.MatrixElement{`0},System.Int32)">
            <summary>
            Update the strategy after the pivot was moved.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="pivot">The pivot element.</param>
            <param name="eliminationStep">The elimination step.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Markowitz`1.CreateFillin(SpiceSharp.Algebra.SparseMatrix{`0},SpiceSharp.Algebra.MatrixElement{`0})">
            <summary>
            Notifies the strategy that a fill-in has been created
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="fillin">The fill-in.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Markowitz`1.FindPivot(SpiceSharp.Algebra.SparseMatrix{`0},System.Int32)">
            <summary>
            Find a pivot in the matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="eliminationStep">The current elimination step.</param>
            <returns></returns>
            <remarks>
            The pivot should be searched for in the submatrix towards the right and down of the
            current diagonal at row/column <paramref name="eliminationStep" />. This pivot element
            will be moved to the diagonal for this elimination step.
            </remarks>
        </member>
        <member name="T:SpiceSharp.Algebra.Solve.MarkowitzDiagonal`1">
            <summary>
            Markowitz-count based strategy for finding a pivot. Searches the whole diagonal of the submatrix.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="F:SpiceSharp.Algebra.Solve.MarkowitzDiagonal`1.TiesMultiplier">
            <summary>
            Constants
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.MarkowitzDiagonal`1.FindPivot(SpiceSharp.Algebra.Solve.Markowitz{`0},SpiceSharp.Algebra.SparseMatrix{`0},System.Int32)">
            <summary>
            Find a pivot in a matrix.
            </summary>
            <param name="markowitz">The Markowitz pivot strategy.</param>
            <param name="matrix">The matrix</param>
            <param name="eliminationStep">The current elimination step.</param>
            <returns>
            The pivot element, or null if no pivot was found.
            </returns>
        </member>
        <member name="T:SpiceSharp.Algebra.Solve.MarkowitzEntireMatrix`1">
            <summary>
            Markowitz-count based strategy for finding a pivot. Search the complete submatrix.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="F:SpiceSharp.Algebra.Solve.MarkowitzEntireMatrix`1.TiesMultiplier">
            <summary>
            Constants
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.MarkowitzEntireMatrix`1.FindPivot(SpiceSharp.Algebra.Solve.Markowitz{`0},SpiceSharp.Algebra.SparseMatrix{`0},System.Int32)">
            <summary>
            Find a pivot in a matrix.
            </summary>
            <param name="markowitz">The Markowitz pivot strategy.</param>
            <param name="matrix">The matrix</param>
            <param name="eliminationStep">The current elimination step.</param>
            <returns>
            The pivot element, or null if no pivot was found.
            </returns>
        </member>
        <member name="T:SpiceSharp.Algebra.Solve.MarkowitzQuickDiagonal`1">
            <summary>
            Markowitz-based pivot search. Quickly search the diagonal for valid pivots.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.MarkowitzQuickDiagonal`1.FindPivot(SpiceSharp.Algebra.Solve.Markowitz{`0},SpiceSharp.Algebra.SparseMatrix{`0},System.Int32)">
            <summary>
            Find a pivot in a matrix.
            </summary>
            <param name="markowitz">The Markowitz pivot strategy.</param>
            <param name="matrix">The matrix</param>
            <param name="eliminationStep">The current elimination step.</param>
            <returns>
            The pivot element, or null if no pivot was found.
            </returns>
        </member>
        <member name="T:SpiceSharp.Algebra.Solve.MarkowitzSearchStrategy`1">
            <summary>
            A template for a search strategy for finding pivots. It is
            used for implementing the strategy outlined by Markowitz.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.MarkowitzSearchStrategy`1.FindPivot(SpiceSharp.Algebra.Solve.Markowitz{`0},SpiceSharp.Algebra.SparseMatrix{`0},System.Int32)">
            <summary>
            Find a pivot in a matrix.
            </summary>
            <param name="markowitz">The Markowitz pivot strategy.</param>
            <param name="matrix">The matrix</param>
            <param name="eliminationStep">The current elimination step.</param>
            <returns>The pivot element, or null if no pivot was found.</returns>
        </member>
        <member name="T:SpiceSharp.Algebra.Solve.MarkowitzSingleton`1">
            <summary>
            Markowitz-count based strategy for finding a pivot. This strategy will search for 
            singletons (rows or columns with only one element), these can be found rather cheaply.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.MarkowitzSingleton`1.FindPivot(SpiceSharp.Algebra.Solve.Markowitz{`0},SpiceSharp.Algebra.SparseMatrix{`0},System.Int32)">
            <summary>
            Find a pivot in a matrix.
            </summary>
            <param name="markowitz">The Markowitz pivot strategy.</param>
            <param name="matrix">The matrix</param>
            <param name="eliminationStep">The current elimination step.</param>
            <returns>
            The pivot element, or null if no pivot was found.
            </returns>
        </member>
        <member name="T:SpiceSharp.Algebra.Solve.PivotStrategy`1">
            <summary>
            A pivot strategy used by a <see cref="T:SpiceSharp.Algebra.Solver`1" />
            </summary>
            <typeparam name="T">The base value type</typeparam>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.PivotStrategy`1.RelativePivotThreshold">
            <summary>
            Gets or sets the relative threshold for choosing a pivot.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.PivotStrategy`1.AbsolutePivotThreshold">
            <summary>
            Gets or sets the absolute threshold for choosing a pivot.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.PivotStrategy`1.IsValidPivot(SpiceSharp.Algebra.MatrixElement{`0})">
            <summary>
            This method will check whether or not a pivot element is valid or not.
            It checks for the submatrix right/below of the pivot.
            </summary>
            <param name="pivot">The pivot candidate.</param>
            <returns>True if the pivot can be used.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.PivotStrategy`1.Setup(SpiceSharp.Algebra.SparseMatrix{`0},SpiceSharp.Algebra.SparseVector{`0},System.Int32,System.Func{`0,System.Double})">
            <summary>
            Setup the pivot strategy.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="rhs">The right-hand side vector.</param>
            <param name="eliminationStep">The current elimination step.</param>
            <param name="magnitude">The method used to determine the magnitude of an element.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.PivotStrategy`1.MovePivot(SpiceSharp.Algebra.SparseMatrix{`0},SpiceSharp.Algebra.SparseVector{`0},SpiceSharp.Algebra.MatrixElement{`0},System.Int32)">
            <summary>
            Move the pivot to the diagonal for this elimination step.
            </summary>
            <remarks>
            This is done by swapping the rows and columns of the diagonal and that of the pivot.
            </remarks>
            <param name="matrix">The matrix.</param>
            <param name="rhs">The right-hand side vector.</param>
            <param name="pivot">The pivot element.</param>
            <param name="eliminationStep">The elimination step.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.PivotStrategy`1.Update(SpiceSharp.Algebra.SparseMatrix{`0},SpiceSharp.Algebra.MatrixElement{`0},System.Int32)">
            <summary>
            Update the strategy after the pivot was moved.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="pivot">The pivot element.</param>
            <param name="eliminationStep">The elimination step.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.PivotStrategy`1.CreateFillin(SpiceSharp.Algebra.SparseMatrix{`0},SpiceSharp.Algebra.MatrixElement{`0})">
            <summary>
            Notifies the strategy that a fill-in has been created
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="fillin">The fill-in.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.PivotStrategy`1.FindPivot(SpiceSharp.Algebra.SparseMatrix{`0},System.Int32)">
            <summary>
            Find a pivot in the matrix.
            </summary>
            <remarks>
            The pivot should be searched for in the submatrix towards the right and down of the
            current diagonal at row/column <paramref name="eliminationStep"/>. This pivot element
            will be moved to the diagonal for this elimination step.
            </remarks>
            <param name="matrix">The matrix.</param>
            <param name="eliminationStep">The current elimination step.</param>
            <returns></returns>
        </member>
        <member name="T:SpiceSharp.Algebra.Solve.Translation">
            <summary>
            This class can map external to internal indices and vice-versa.
            </summary>
        </member>
        <member name="F:SpiceSharp.Algebra.Solve.Translation.ExpansionFactor">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:SpiceSharp.Algebra.Solve.Translation._extToInt">
            <summary>
            Private variable
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.Translation.Length">
            <summary>
            Gets the current length of the translation vector.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Translation.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.Solve.Translation"/> class.
            </summary>
            <param name="size">The number of translations to be allocated.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Translation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.Solve.Translation"/> class.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.Solve.Translation.Item(System.Int32)">
            <summary>
            Gets the internal index.
            </summary>
            <param name="index">The external index.</param>
            <returns>The internal index.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Translation.Reverse(System.Int32)">
            <summary>
            Gets the external index.
            </summary>
            <param name="index">The internal index</param>
            <returns>The external index.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Translation.Swap(System.Int32,System.Int32)">
            <summary>
            Swap two (internal) indices.
            </summary>
            <param name="index1">First index.</param>
            <param name="index2">Second index.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Translation.Scramble``1(SpiceSharp.Algebra.Vector{``0},SpiceSharp.Algebra.Vector{``0})">
            <summary>
            Scramble a vector according to the map.
            </summary>
            <typeparam name="T">The value type of the vector.</typeparam>
            <param name="source">The source vector.</param>
            <param name="target">The target vector.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Translation.Unscramble``1(``0[],SpiceSharp.Algebra.Vector{``0})">
            <summary>
            Unscramble a vector. The first index of the array is ignored.
            </summary>
            <typeparam name="T">The value type of the vector.</typeparam>
            <param name="source">The source vector.</param>
            <param name="target">The target vector.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.Solve.Translation.ExpandTranslation(System.Int32)">
            <summary>
            Expand the translation map.
            </summary>
            <param name="newLength">The new length.</param>
        </member>
        <member name="T:SpiceSharp.Algebra.RealSolver">
            <summary>
            Class for solving sets of equations with real numbers.
            </summary>
            <seealso cref="T:SpiceSharp.Algebra.Solver`1" />
        </member>
        <member name="F:SpiceSharp.Algebra.RealSolver._intermediate">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.RealSolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.RealSolver"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.RealSolver.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.RealSolver"/> class.
            </summary>
            <param name="size">The number of equations and variables.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.RealSolver.#ctor(System.Int32,SpiceSharp.Algebra.Solve.PivotStrategy{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.RealSolver"/> class.
            </summary>
            <param name="size">The number of equations and variables.</param>
            <param name="strategy">The pivot strategy.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.RealSolver.FixEquations">
            <summary>
            Fix the number of equations and variables.
            </summary>
            <remarks>
            This method can be used to make sure that the matrix is fixed during
            solving. When fixed, it is impossible to add more elements to the sparse
            matrix or vector.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Algebra.RealSolver.UnfixEquations">
            <summary>
            Unfix the number of equations and variables.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.RealSolver.Factor">
            <summary>
            Factor the matrix.
            </summary>
            <returns>
            True if factoring was successful.
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.RealSolver.Solve(SpiceSharp.Algebra.Vector{System.Double})">
            <summary>
            Solve the system of equations.
            </summary>
            <param name="solution">The solution vector that will hold the solution to the set of equations.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.RealSolver.SolveTransposed(SpiceSharp.Algebra.Vector{System.Double})">
            <summary>
            Solve the transposed problem.
            </summary>
            <param name="solution">The solution vector that will hold the solution to the transposed set of equations.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.RealSolver.OrderAndFactor">
            <summary>
            Factor while reordering the matrix
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.RealSolver.Elimination(SpiceSharp.Algebra.MatrixElement{System.Double})">
            <summary>
            Eliminate a row.
            </summary>
            <param name="pivot">The current pivot element.</param>
        </member>
        <member name="T:SpiceSharp.Algebra.Solver`1">
            <summary>
            A base class for linear systems that can be solved.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="P:SpiceSharp.Algebra.Solver`1.Fillins">
            <summary>
            Number of fill-ins in the matrix generated by the solver.
            </summary>
            <remarks>
            Fill-ins are elements that were auto-generated as a consequence
            of the solver trying to solve the matrix. To save memory, this
            number should remain small.
            </remarks>
        </member>
        <member name="P:SpiceSharp.Algebra.Solver`1.NeedsReordering">
            <summary>
            Gets or sets a flag that reordering is required.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.Solver`1.IsFactored">
            <summary>
            Gets whether or not the solver is factored.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.Solver`1.Strategy">
            <summary>
            Gets the pivot strategy used.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.Solver`1.#ctor(SpiceSharp.Algebra.Solve.PivotStrategy{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.Solver`1"/> class.
            </summary>
            <param name="strategy">The pivot strategy that needs to be used.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.Solver`1.#ctor(SpiceSharp.Algebra.Solve.PivotStrategy{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.Solver`1"/> class.
            </summary>
            <param name="strategy">The pivot strategy that needs to be used.</param>
            <param name="size">The number of equations/variables.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.Solver`1.Solve(SpiceSharp.Algebra.Vector{`0})">
            <summary>
            Solve the system of equations.
            </summary>
            <param name="solution">The solution vector that will hold the solution to the set of equations.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.Solver`1.SolveTransposed(SpiceSharp.Algebra.Vector{`0})">
            <summary>
            Solve the transposed problem.
            </summary>
            <param name="solution">The solution vector that will hold the solution to the transposed set of equations.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.Solver`1.Factor">
            <summary>
            Factor the matrix.
            </summary>
            <returns>True if factoring was successful.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.Solver`1.OrderAndFactor">
            <summary>
            Order and factor the matrix.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.Solver`1.MovePivot(SpiceSharp.Algebra.MatrixElement{`0},System.Int32)">
            <summary>
            Move a chosen pivot to the diagonal.
            </summary>
            <param name="pivot">The pivot element.</param>
            <param name="step">The current step of factoring.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.Solver`1.CreateFillin(System.Int32,System.Int32)">
            <summary>
            Create a fill-in element.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.Solver`1.Clear">
            <summary>
            Clear the system of linear equations.
            </summary>
        </member>
        <member name="T:SpiceSharp.Algebra.SparseLinearSystem`1">
            <summary>
            A class that represents a system of linear equations.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <seealso cref="T:System.IFormattable" />
        </member>
        <member name="P:SpiceSharp.Algebra.SparseLinearSystem`1.Order">
            <summary>
            Gets the order of the matrix (matrix size).
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseLinearSystem`1.IsFixed">
            <summary>
            Gets whether or not the number of equations and variables is fixed.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseLinearSystem`1.Row">
            <summary>
            Gets the row translation.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseLinearSystem`1.Column">
            <summary>
            Gets the column translation.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseLinearSystem`1.Matrix">
            <summary>
            Gets the matrix to work on.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseLinearSystem`1.Rhs">
            <summary>
            Gets the right-hand side vector.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseLinearSystem`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SparseLinearSystem`1"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseLinearSystem`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SparseLinearSystem`1"/> class.
            </summary>
            <param name="size">The number of equations and variables.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseLinearSystem`1.FixEquations">
            <summary>
            Fix the number of equations and variables.
            </summary>
            <remarks>
            This method can be used to make sure that the matrix is fixed during
            solving. When fixed, it is impossible to add more elements to the sparse
            matrix or vector.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseLinearSystem`1.UnfixEquations">
            <summary>
            Unfix the number of equations and variables.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseLinearSystem`1.GetMatrixElement(System.Int32,System.Int32)">
            <summary>
            Get a matrix element.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <returns>The matrix element.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseLinearSystem`1.FindMatrixElement(System.Int32,System.Int32)">
            <summary>
            Find a matrix element.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <returns>The matrix element or null if there is none.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseLinearSystem`1.GetRhsElement(System.Int32)">
            <summary>
            Get the right-hand side vector element.
            </summary>
            <param name="index">The index of the element.</param>
            <returns>The vector element.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseLinearSystem`1.FindRhsElement(System.Int32)">
            <summary>
            Finds a right-hand side vector element.
            </summary>
            <param name="index">The index of the element.</param>
            <returns>The vector element or null if there is none.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseLinearSystem`1.FirstInReorderedRow(System.Int32)">
            <summary>
            Gets the first row element in the reordered matrix.
            </summary>
            <param name="row">The row index.</param>
            <returns>The first element in the row or null if there are none.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseLinearSystem`1.FirstInReorderedColumn(System.Int32)">
            <summary>
            Gets the first column element in the reordered matrix.
            </summary>
            <param name="column">The column index.</param>
            <returns>The first element in the column or null if there are none.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseLinearSystem`1.ReorderedDiagonal(System.Int32)">
            <summary>
            Gets the diagonal element in the reordered matrix.
            </summary>
            <param name="index">The row/column of the diagonal element.</param>
            <returns>The first diagonal or null if there are none.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseLinearSystem`1.FirstInReorderedRhs">
            <summary>
            Gets the first element in the reordered Right-Hand Side vector.
            </summary>
            <returns>The first element in the vector or null if there are none.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseLinearSystem`1.ExternalToInternal(SpiceSharp.Algebra.LinearSystemIndices)">
            <summary>
            Transforms the indices from external to internal indices.
            </summary>
            <remarks>
            Opposite of <see cref="M:SpiceSharp.Algebra.SparseLinearSystem`1.InternalToExternal(SpiceSharp.Algebra.LinearSystemIndices)"/>.
            </remarks>
            <param name="indices">The row/column indices.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseLinearSystem`1.InternalToExternal(SpiceSharp.Algebra.LinearSystemIndices)">
            <summary>
            Transforms the indices from internal to external indices.
            </summary>
            <remarks>
            Opposite of <see cref="M:SpiceSharp.Algebra.SparseLinearSystem`1.ExternalToInternal(SpiceSharp.Algebra.LinearSystemIndices)"/>.
            </remarks>
            <param name="indices">The row/column indices.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseLinearSystem`1.SwapRows(System.Int32,System.Int32)">
            <summary>
            Swap two (internal) rows in the linear system.
            </summary>
            <param name="row1">The first row index.</param>
            <param name="row2">The second row index.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseLinearSystem`1.SwapColumns(System.Int32,System.Int32)">
            <summary>
            Swap two (internal) columns in the system.
            </summary>
            <param name="column1">The first column index.</param>
            <param name="column2">The second column index.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseLinearSystem`1.Clear">
            <summary>
            Clear the matrix and right-hand side vector.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseLinearSystem`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseLinearSystem`1.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:SpiceSharp.Algebra.SparseException">
            <summary>
            Sparse matrix exception
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:SpiceSharp.Algebra.SparseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SparseException"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SparseException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SparseException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:SpiceSharp.Algebra.DenseVector`1">
            <summary>
            A vector with real values
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <seealso cref="T:SpiceSharp.Algebra.Vector`1" />
            <seealso cref="T:System.IFormattable" />
            <remarks>
            <para>The element at index 0 is considered a "trashcan" element under the hood, consistent to <see cref="T:SpiceSharp.Algebra.SparseMatrix`1" />.
            This doesn't really make a difference for indexing the vector, but it does give different meanings to the length of
            the vector.</para>
            <para>This vector does not automatically expand size if necessary. Under the hood it is basically just an array.</para>
            </remarks>
        </member>
        <member name="P:SpiceSharp.Algebra.DenseVector`1.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <remarks>
            The element at index 0 is considered a trash can element. Use indices ranging 1 to the vector length.
            </remarks>
            <param name="index">The index in the vector.</param>
            <returns>The value at the specified index.</returns>
        </member>
        <member name="F:SpiceSharp.Algebra.DenseVector`1._values">
            <summary>
            Values
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseVector`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.DenseVector`1"/> class.
            </summary>
            <param name="length">The length of the vector.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseVector`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.DenseVector`1"/> class.
            </summary>
            <param name="values">Values of the vector.</param>
            <remarks>
            The value at index 0 is considered the trashcan element. The length of the vector
            is therefore considered to be the array length - 1.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseVector`1.CopyTo(SpiceSharp.Algebra.DenseVector{`0})">
            <summary>
            Copies contents to another vector.
            </summary>
            <param name="vector">The target vector.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseVector`1.CopyFrom(SpiceSharp.Algebra.DenseVector{`0})">
            <summary>
            Copy contents from another vector.
            </summary>
            <param name="vector">Source vector.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseVector`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.DenseVector`1.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format for each element of the vector.</param>
            <param name="formatProvider">The format provider for each element of the vector.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:SpiceSharp.Algebra.SparseVector`1">
            <summary>
            Sparse vector
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <seealso cref="T:SpiceSharp.Algebra.Vector`1" />
            <seealso cref="T:System.IFormattable" />
            <remarks>
            <para>The element at index 0 is considered a "trashcan" element under the hood, consistent to <see cref="T:SpiceSharp.Algebra.SparseMatrix`1" />.
            This doesn't really make a difference for indexing the vector, but it does give different meanings to the length of
            the vector.</para>
            <para>This vector automatically expands size if necessary.</para>
            </remarks>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseVector`1.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <remarks>
            The element at index 0 is considered a trash can element. Use indices ranging 1 to the vector length.
            </remarks>
            <param name="index">The index in the vector.</param>
            <returns>The value at the specified index.</returns>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseVector`1.First">
            <summary>
            Gets the first element in the vector.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseVector`1.Last">
            <summary>
            Gets the last element in the vector.
            </summary>
        </member>
        <member name="F:SpiceSharp.Algebra.SparseVector`1._firstInVector">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="F:SpiceSharp.Algebra.SparseVector`1._lastInVector">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseVector`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SparseVector`1"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseVector`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SparseVector`1"/> class.
            </summary>
            <param name="length">The length of the vector.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseVector`1.GetElement(System.Int32)">
            <summary>
            Create or get an element in the vector.
            </summary>
            <param name="index">Index in the vector</param>
            <returns>The vector element at the specified index</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseVector`1.FindElement(System.Int32)">
            <summary>
            Find an element in the vector without creating it.
            </summary>
            <param name="index">The index in the vector.</param>
            <returns>The element at the specified index, or null if the element does not exist.</returns>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseVector`1.Remove(SpiceSharp.Algebra.SparseVector{`0}.SparseVectorElement)">
            <summary>
            Remove an element.
            </summary>
            <param name="element">Element to be removed.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseVector`1.Swap(System.Int32,System.Int32)">
            <summary>
            Swap two elements.
            </summary>
            <param name="index1">The index of the first element.</param>
            <param name="index2">The index of the second element.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseVector`1.Swap(SpiceSharp.Algebra.SparseVector{`0}.SparseVectorElement,SpiceSharp.Algebra.SparseVector{`0}.SparseVectorElement,System.Int32,System.Int32)">
            <summary>
            Swaps the specified elements.
            </summary>
            <param name="first">The first element.</param>
            <param name="second">The second element.</param>
            <param name="index1">The index of the first element.</param>
            <param name="index2">The index of the second element.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseVector`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseVector`1.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:SpiceSharp.Algebra.SparseVector`1.SparseVectorElement">
            <summary>
            A vector element for <see cref="T:SpiceSharp.Algebra.SparseVector`1"/>
            </summary>
            <seealso cref="T:SpiceSharp.Algebra.Vector`1" />
            <seealso cref="T:System.IFormattable" />
        </member>
        <member name="P:SpiceSharp.Algebra.SparseVector`1.SparseVectorElement.Index">
            <summary>
            Gets or sets the index.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseVector`1.SparseVectorElement.NextInVector">
            <summary>
            Gets or sets the next element in the vector.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseVector`1.SparseVectorElement.PreviousInVector">
            <summary>
            Gets or sets the previous element in the vector.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseVector`1.SparseVectorElement.Below">
            <summary>
            Gets the next element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.SparseVector`1.SparseVectorElement.Above">
            <summary>
            Gets the previous element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.SparseVector`1.SparseVectorElement.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.SparseVector`1.SparseVectorElement"/> class.
            </summary>
            <param name="index">The index of the element.</param>
        </member>
        <member name="T:SpiceSharp.Algebra.Vector`1">
            <summary>
            A base class for vectors.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="P:SpiceSharp.Algebra.Vector`1.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <remarks>
            The element at index 0 is considered a trash can element. Use indices ranging 1 to the vector length.
            </remarks>
            <param name="index">The index in the vector.</param>
            <returns>The value at the specified index.</returns>
        </member>
        <member name="P:SpiceSharp.Algebra.Vector`1.Length">
            <summary>
            Gets the length of the vector.
            </summary>
            <remarks>
            Since the element at index 0 is considered a trash can element, the length also indicates the maximum index.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Algebra.Vector`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.Vector`1"/> class.
            </summary>
            <param name="length">The length of the vector.</param>
        </member>
        <member name="M:SpiceSharp.Algebra.Vector`1.CopyTo(SpiceSharp.Algebra.Vector{`0})">
            <summary>
            Copy the vector contents to another vector.
            </summary>
            <param name="target">The target vector.</param>
        </member>
        <member name="T:SpiceSharp.Algebra.VectorElement`1">
            <summary>
            A base class for vector elements.
            </summary>
            <typeparam name="T">The base type.</typeparam>
        </member>
        <member name="P:SpiceSharp.Algebra.VectorElement`1.Value">
            <summary>
            Gets or sets the value of the element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.VectorElement`1.Index">
            <summary>
            Gets the index of the element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Algebra.VectorElement`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Algebra.VectorElement`1"/> class.
            </summary>
            <param name="index">The index of the element.</param>
        </member>
        <member name="P:SpiceSharp.Algebra.VectorElement`1.Below">
            <summary>
            Gets the next element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Algebra.VectorElement`1.Above">
            <summary>
            Gets the previous element.
            </summary>
        </member>
        <member name="T:SpiceSharp.Attributes.ConnectedAttribute">
            <summary>
            Indicates that two pins are connected by a finite impedance at DC. This attribute can be
            applied to a <see cref="T:SpiceSharp.Components.Component" /> to check for floating nodes using a <see cref="T:SpiceSharp.Circuits.Validator" />.
            If this attribute is not applied, then all pins are assumed to be connected.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:SpiceSharp.Attributes.ConnectedAttribute.Pin1">
            <summary>
            Gets the first connected pin index.
            </summary>
        </member>
        <member name="P:SpiceSharp.Attributes.ConnectedAttribute.Pin2">
            <summary>
            Gets the second connected pin index.
            </summary>
        </member>
        <member name="M:SpiceSharp.Attributes.ConnectedAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Attributes.ConnectedAttribute"/> class.
            </summary>
            <param name="pin1">The first pin index.</param>
            <param name="pin2">The second pin index.</param>
        </member>
        <member name="M:SpiceSharp.Attributes.ConnectedAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Attributes.ConnectedAttribute"/> class.
            </summary>
        </member>
        <member name="T:SpiceSharp.Attributes.DerivedPropertyAttribute">
            <summary>
            Indicates that a property is derived from other properties.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:SpiceSharp.Attributes.IndependentSourceAttribute">
            <summary>
            Indicates that the circuit component is an independent source. This attribute can
            be applied to a <see cref="T:SpiceSharp.Components.Component" /> to check for the existence of at
            least one independent source.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:SpiceSharp.Attributes.ParameterInfoAttribute">
            <summary>
            This attribute specifies a description and other metadata of a parameter. It can be applied to a field, property or method
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:SpiceSharp.Attributes.ParameterInfoAttribute.Description">
            <summary>
            Gets the parameter description.
            </summary>
        </member>
        <member name="P:SpiceSharp.Attributes.ParameterInfoAttribute.Interesting">
            <summary>
            Gets or sets whether or not this parameter is interesting. Defaults to true.
            </summary>
        </member>
        <member name="P:SpiceSharp.Attributes.ParameterInfoAttribute.IsPrincipal">
            <summary>
            Gets or sets whether or not this parameter is a principal design parameter. Defaults to false.
            </summary>
        </member>
        <member name="M:SpiceSharp.Attributes.ParameterInfoAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Attributes.ParameterInfoAttribute"/> class.
            </summary>
            <param name="description">The description of the parameter.</param>
        </member>
        <member name="T:SpiceSharp.Attributes.ParameterNameAttribute">
            <summary>
            Specifies the name for a member. It can be applied to properties or method. Multiple names are allowed.
            This attribute is used to find members using reflection.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:SpiceSharp.Attributes.ParameterNameAttribute.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="M:SpiceSharp.Attributes.ParameterNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Attributes.ParameterNameAttribute"/> class.
            </summary>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="T:SpiceSharp.Attributes.PinAttribute">
            <summary>
            Specifies the pins for a circuit component that extends <see cref="T:SpiceSharp.Components.Component" />.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:SpiceSharp.Attributes.PinAttribute.Index">
            <summary>
            The index of the pin.
            </summary>
        </member>
        <member name="P:SpiceSharp.Attributes.PinAttribute.Name">
            <summary>
            The name of the pin.
            </summary>
        </member>
        <member name="M:SpiceSharp.Attributes.PinAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Attributes.PinAttribute"/> class.
            </summary>
            <param name="index">The index of the pin.</param>
            <param name="name">The name of the pin.</param>
        </member>
        <member name="T:SpiceSharp.Attributes.VoltageDriverAttribute">
            <summary>
            Indicates that two nodes are driven by a voltage source. This attribute can
            be applied to a <see cref="T:SpiceSharp.Components.Component" /> to check for voltage loops.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:SpiceSharp.Attributes.VoltageDriverAttribute.Positive">
            <summary>
            The pin connected to the positive side of the voltage source.
            </summary>
        </member>
        <member name="P:SpiceSharp.Attributes.VoltageDriverAttribute.Negative">
            <summary>
            The pin connected to the negative side of the voltage source.
            </summary>
        </member>
        <member name="M:SpiceSharp.Attributes.VoltageDriverAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Attributes.VoltageDriverAttribute"/> class.
            </summary>
            <param name="positive">The positive pin of the source.</param>
            <param name="negative">The negative pin of the source.</param>
        </member>
        <member name="T:SpiceSharp.Behaviors.BindingContext">
            <summary>
            Class that can be used for binding a <see cref="T:SpiceSharp.Behaviors.Behavior" /> to a simulation.
            </summary>
        </member>
        <member name="F:SpiceSharp.Behaviors.BindingContext._parameterSets">
            <summary>
            Available behaviors and parameters
            </summary>
        </member>
        <member name="P:SpiceSharp.Behaviors.BindingContext.ParametersCount">
            <summary>
            Gets the parameter set dictionary count.
            </summary>
        </member>
        <member name="P:SpiceSharp.Behaviors.BindingContext.BehaviorsCount">
            <summary>
            Gets the behavior dictionary count.
            </summary>
        </member>
        <member name="M:SpiceSharp.Behaviors.BindingContext.Add(System.String,SpiceSharp.ParameterSetDictionary)">
            <summary>
            Adds a parameter set dictionary.
            </summary>
            <param name="name">The parameter set identifier.</param>
            <param name="pc">The parameter set dictionary.</param>
            <remarks>
            The <paramref name="name"/> parameter can be used by entities to give more information. For example, the entity parameter sets
            its own parameter sets and behaviors using the name "entity". In the same way, models can be added
            under "model", or other entities can be invoked where needed.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Behaviors.BindingContext.Add(System.String,SpiceSharp.Behaviors.EntityBehaviorDictionary)">
            <summary>
            Adds an entity behavior dictionary.
            </summary>
            <param name="name">The behavior dictionary identifier.</param>
            <param name="behaviors">The behavior dictionary.</param>
            <remarks>
            The <paramref name="name"/> parameter can be used by entities to give more information. For example, the entity parameter sets
            its own parameter sets and behaviors using the name "entity". In the same way, models can be added
            under "model", or other entities can be invoked where needed.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Behaviors.BindingContext.GetParameterSet``1(System.String)">
            <summary>
            Gets a parameter set for a specified identifier.
            </summary>
            <typeparam name="T">The base type of the parameter set.</typeparam>
            <param name="name">The identifier of the parameter set.</param>
            <returns>
            The requested object.
            </returns>
        </member>
        <member name="M:SpiceSharp.Behaviors.BindingContext.TryGetParameterSet``1(System.String,``0@)">
            <summary>
            Tries getting a parameter set for a specified identifier.
            </summary>
            <typeparam name="T">The base type of the parameter set.</typeparam>
            <param name="name">The identifier of the parameter set.</param>
            <param name="value">The requested object.</param>
            <returns>
              <c>true</c> if the object was found; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Behaviors.BindingContext.GetBehavior``1(System.String)">
            <summary>
            Gets the behavior for a specified identifier.
            </summary>
            <typeparam name="T">The base behavior type.</typeparam>
            <param name="name">The identifier of the behavior.</param>
            <returns>
            The requested object.
            </returns>
        </member>
        <member name="M:SpiceSharp.Behaviors.BindingContext.TryGetBehavior``1(System.String,``0@)">
            <summary>
            Tries getting the behavior for a specified identifier.
            </summary>
            <typeparam name="T">The base behavior type.</typeparam>
            <param name="name">The identifier of the behavior.</param>
            <param name="value">The requested object.</param>
            <returns>
              <c>true</c> if the object was found; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SpiceSharp.Behaviors.IFrequencyBehavior">
            <summary>
            Interface that describes frequency-dependent behaviors.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.IBehavior" />
        </member>
        <member name="M:SpiceSharp.Behaviors.IFrequencyBehavior.InitializeParameters">
            <summary>
            Initializes the parameters.
            </summary>
        </member>
        <member name="M:SpiceSharp.Behaviors.IFrequencyBehavior.Load">
            <summary>
            Load the Y-matrix and right-hand side vector for frequency domain analysis.
            </summary>
        </member>
        <member name="T:SpiceSharp.Behaviors.IBiasingBehavior">
            <summary>
            An interface that describes behaviors for biasing in a <see cref="T:SpiceSharp.Simulations.BaseSimulation" />.
            This behavior is responsible for calculating the DC equivalent behavior of an entity, ie. for biasing the circuit.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.IBehavior" />
        </member>
        <member name="M:SpiceSharp.Behaviors.IBiasingBehavior.Load">
            <summary>
            Loads the Y-matrix and Rhs-vector.
            </summary>
        </member>
        <member name="M:SpiceSharp.Behaviors.IBiasingBehavior.IsConvergent">
            <summary>
            Tests convergence at the device-level.
            </summary>
            <returns>
              <c>true</c> if the device determines the solution converges; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SpiceSharp.Behaviors.IInitialConditionBehavior">
            <summary>
            This interface describes behavior for initial conditions.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.IBehavior" />
        </member>
        <member name="M:SpiceSharp.Behaviors.IInitialConditionBehavior.SetInitialCondition">
            <summary>
            Sets the initial conditions for the behavior.
            </summary>
        </member>
        <member name="T:SpiceSharp.Behaviors.ITemperatureBehavior">
            <summary>
            An interface that describes temperature-dependent behaviors.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.IBehavior" />
        </member>
        <member name="M:SpiceSharp.Behaviors.ITemperatureBehavior.Temperature">
            <summary>
            Perform temperature-dependent calculations.
            </summary>
        </member>
        <member name="T:SpiceSharp.Behaviors.IAcceptBehavior">
            <summary>
            Behavior that can accept a time point.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.IBehavior" />
        </member>
        <member name="M:SpiceSharp.Behaviors.IAcceptBehavior.Probe">
            <summary>
            Called when a new timepoint is being tested.
            </summary>
        </member>
        <member name="M:SpiceSharp.Behaviors.IAcceptBehavior.Accept">
            <summary>
            Accepts the current timepoint.
            </summary>
        </member>
        <member name="T:SpiceSharp.Behaviors.ITimeBehavior">
            <summary>
            An interface for time-dependent behaviors.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.IBehavior" />
        </member>
        <member name="M:SpiceSharp.Behaviors.ITimeBehavior.InitializeStates">
            <summary>
            Initialize the state values from the current DC solution.
            </summary>
            <remarks>
            In this method, the initial value is calculated based on the operating point solution,
            and the result is stored in each respective <see cref="T:SpiceSharp.IntegrationMethods.StateDerivative" /> or <see cref="T:SpiceSharp.IntegrationMethods.StateHistory" />.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Behaviors.ITimeBehavior.Load">
            <summary>
            Load the Y-matrix and Rhs-vector.
            </summary>
        </member>
        <member name="T:SpiceSharp.Behaviors.Behavior">
            <summary>
            Template for a behavior.
            </summary>
        </member>
        <member name="P:SpiceSharp.Behaviors.Behavior.Name">
            <summary>
            Gets the identifier of the behavior.
            </summary>
            <remarks>
            This should be the same identifier as the entity that created it.
            </remarks>
        </member>
        <member name="P:SpiceSharp.Behaviors.Behavior.Simulation">
            <summary>
            Gets the simulation this behavior is bound to.
            </summary>
        </member>
        <member name="M:SpiceSharp.Behaviors.Behavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Behaviors.Behavior"/> class.
            </summary>
            <param name="name">The identifier of the behavior.</param>
            <remarks>
            The identifier of the behavior should be the same as that of the entity creating it.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Behaviors.Behavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior to a simulation.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The binding context.</param>
        </member>
        <member name="M:SpiceSharp.Behaviors.Behavior.Unbind">
            <summary>
            Destroy the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Behaviors.Behavior.CreateGetter``1(SpiceSharp.Simulations.Simulation,System.String,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Create a getter for a behavior parameter (possibly requiring a simulation or simulation state).
            </summary>
            <typeparam name="T">The parameter type.</typeparam>
            <param name="simulation">The simulation.</param>
            <param name="name">The parameter name.</param>
            <param name="comparer">The comparer used to compare property names.</param>
            <returns></returns>
        </member>
        <member name="T:SpiceSharp.Behaviors.BehaviorFactoryDictionary">
            <summary>
            Factory for behaviors
            </summary>
            <seealso cref="T:SpiceSharp.TypeDictionary`1" />
        </member>
        <member name="T:SpiceSharp.Behaviors.BehaviorFactoryMethod">
            <summary>
            Create a behavior for an entity
            </summary>
            <param name="entity">The entity creating the behavior.</param>
            <returns></returns>
        </member>
        <member name="T:SpiceSharp.Behaviors.BehaviorList`1">
            <summary>
            Class representing an ordered list of behaviors.
            </summary>
            <typeparam name="T">The base behavior type.</typeparam>
        </member>
        <member name="F:SpiceSharp.Behaviors.BehaviorList`1._behaviors">
            <summary>
            Behaviors
            </summary>
        </member>
        <member name="P:SpiceSharp.Behaviors.BehaviorList`1.Item(System.Int32)">
            <summary>
            Gets the behavior at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:SpiceSharp.Behaviors.BehaviorList`1.Count">
            <summary>
            Gets the number of behaviors in the list.
            </summary>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Behaviors.BehaviorList`1"/> class.
            </summary>
            <param name="behaviors">An enumeration of all behaviors that need to be added.</param>
        </member>
        <member name="T:SpiceSharp.Behaviors.BehaviorPool">
            <summary>
            A pool of all behaviors. This class will keep track which behavior belongs to which entity. Only behaviors can be requested from the collection.
            </summary>
        </member>
        <member name="F:SpiceSharp.Behaviors.BehaviorPool._entityBehaviors">
            <summary>
            Behaviors indexed by the entity that created them.
            </summary>
        </member>
        <member name="F:SpiceSharp.Behaviors.BehaviorPool._behaviorLists">
            <summary>
            Lists of behaviors indexed by type of behavior.
            </summary>
        </member>
        <member name="P:SpiceSharp.Behaviors.BehaviorPool.Count">
            <summary>
            Gets the number of behaviors in the pool.
            </summary>
        </member>
        <member name="P:SpiceSharp.Behaviors.BehaviorPool.Keys">
            <summary>
            Gets the behavior keys.
            </summary>
        </member>
        <member name="P:SpiceSharp.Behaviors.BehaviorPool.Item(System.String)">
            <summary>
            Gets the associated <see cref="T:SpiceSharp.Behaviors.Behavior"/> of an entity.
            </summary>
            <param name="name">The entity identifier.</param>
            <returns>The behavior associated to the specified entity identifier.</returns>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorPool.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Behaviors.BehaviorPool"/> class.
            </summary>
            <param name="types">The types for which a list will be kept which can be retrieved later.</param>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorPool.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Behaviors.BehaviorPool"/> class.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing entity names, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.</param>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorPool.#ctor(System.Collections.Generic.IEqualityComparer{System.String},System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Behaviors.BehaviorPool"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
            <param name="types">The types.</param>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorPool.Add(SpiceSharp.Behaviors.IBehavior)">
            <summary>
            Adds the specified behavior.
            </summary>
            <param name="behavior">The behavior.</param>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorPool.GetBehaviorList``1">
            <summary>
            Gets a list of behaviors of a specific type.
            </summary>
            <typeparam name="T">The base behavior type.</typeparam>
            <returns>
            A <see cref="T:SpiceSharp.Behaviors.BehaviorList`1" /> with all behaviors of the specified type.
            </returns>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorPool.TryGetBehaviors(System.String,SpiceSharp.Behaviors.EntityBehaviorDictionary@)">
            <summary>
            Tries to the get the entity behaviors by a specified identifier.
            </summary>
            <param name="name">The identifier.</param>
            <param name="ebd">The dictionary of entity behaviors.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorPool.ContainsKey(System.String)">
            <summary>
            Checks if behaviors exist for a specified entity identifier.
            </summary>
            <param name="name">The entity identifier.</param>
            <returns>
              <c>true</c> if behaviors exist; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Behaviors.BehaviorPool.Clear">
            <summary>
            Clears all behaviors in the pool.
            </summary>
        </member>
        <member name="T:SpiceSharp.Behaviors.EntityBehaviorDictionary">
            <summary>
            A dictionary of <see cref="T:SpiceSharp.Behaviors.Behavior" />. Only on instance of each type is allowed.
            </summary>
            <seealso cref="T:SpiceSharp.TypeDictionary`1" />
        </member>
        <member name="P:SpiceSharp.Behaviors.EntityBehaviorDictionary.Source">
            <summary>
            Gets the source identifier.
            </summary>
        </member>
        <member name="M:SpiceSharp.Behaviors.EntityBehaviorDictionary.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Behaviors.EntityBehaviorDictionary"/> class.
            </summary>
            <param name="source">The entity identifier that will provide the behaviors.</param>
        </member>
        <member name="T:SpiceSharp.Behaviors.IBehavior">
            <summary>
            Contract for a behavior.
            </summary>
        </member>
        <member name="P:SpiceSharp.Behaviors.IBehavior.Name">
            <summary>
            Gets the name of the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Behaviors.IBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior to the specified simulation.
            </summary>
            <param name="simulation">The simulation to be bound to.</param>
            <param name="context">The binding context.</param>
        </member>
        <member name="M:SpiceSharp.Behaviors.IBehavior.Unbind">
            <summary>
            Unbind the behavior from any allocated resources.
            </summary>
        </member>
        <member name="T:SpiceSharp.Behaviors.INoiseBehavior">
            <summary>
            A behavior that is used by <see cref="M:SpiceSharp.Behaviors.INoiseBehavior.Noise" />.
            </summary>
            <seealso cref="T:SpiceSharp.Behaviors.IBehavior" />
        </member>
        <member name="M:SpiceSharp.Behaviors.INoiseBehavior.ConnectNoise">
            <summary>
            Connects the noise generators in the circuit.
            </summary>
        </member>
        <member name="M:SpiceSharp.Behaviors.INoiseBehavior.Noise">
            <summary>
            Calculate the noise contributions.
            </summary>
        </member>
        <member name="T:SpiceSharp.Circuit">
            <summary>
            Represents an electronic circuit.
            </summary>
        </member>
        <member name="M:SpiceSharp.Circuit.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Circuit"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Circuit.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Circuit"/> class.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing entity names, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" />.</param>
        </member>
        <member name="M:SpiceSharp.Circuit.#ctor(System.Collections.Generic.IEnumerable{SpiceSharp.Circuits.Entity})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Circuit"/> class.
            </summary>
            <param name="entities">The entities describing the circuit.</param>
        </member>
        <member name="M:SpiceSharp.Circuit.#ctor(SpiceSharp.Circuits.Entity[])">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Circuit"/> class.
            </summary>
            <param name="entities">The entities describing the circuit.</param>
        </member>
        <member name="M:SpiceSharp.Circuit.Validate">
            <summary>
            Validates the circuit. Checks for voltage loops, floating nodes, etc.
            </summary>
            <seealso cref="T:SpiceSharp.Circuits.Validator"/>
        </member>
        <member name="M:SpiceSharp.Circuit.Merge(SpiceSharp.Circuit)">
            <summary>
            Merge a circuit with this one. Entities are merged by reference!
            </summary>
            <param name="ckt">The circuit to merge with.</param>
        </member>
        <member name="M:SpiceSharp.Circuit.Instantiate(SpiceSharp.Circuits.InstanceData)">
            <summary>
            Instantiate another circuit as a subcircuit.
            </summary>
            <param name="data">The instance data.</param>
        </member>
        <member name="T:SpiceSharp.Circuits.Entity">
            <summary>
            Base class for any circuit object that can take part in simulations.
            </summary>
            <remarks>
            Entities should not contain references to other entities, but only their name identifiers. In the method
            <see cref="M:SpiceSharp.Circuits.Entity.BindBehavior(SpiceSharp.Behaviors.IBehavior,SpiceSharp.Simulations.Simulation)"/>  the entity should try to find the necessary behaviors and parameters 
            generated by other entities and pass them via a <see cref="T:SpiceSharp.Behaviors.BindingContext"/>.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Circuits.Entity.RegisterBehaviorFactory(System.Type,SpiceSharp.Behaviors.BehaviorFactoryDictionary)">
            <summary>
            Registers a behavior factory for an entity type.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="P:SpiceSharp.Circuits.Entity.ParameterSets">
            <summary>
            Gets a collection of parameters.
            </summary>
        </member>
        <member name="P:SpiceSharp.Circuits.Entity.Name">
            <summary>
            Gets the name of the entity.
            </summary>
        </member>
        <member name="M:SpiceSharp.Circuits.Entity.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Circuits.Entity"/> class.
            </summary>
            <param name="name">The name of the entity.</param>
        </member>
        <member name="M:SpiceSharp.Circuits.Entity.SetPrincipalParameter``1(``0)">
            <summary>
            Sets the principal parameter.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if a principal parameter was set; otherwise <c>false</c>.
            </returns>
            <remarks>
            Only the first encountered principal parameter will be set.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Circuits.Entity.SetParameter(System.String,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Runs a method with a specific parameter name.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing parameter names, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.</param>
        </member>
        <member name="M:SpiceSharp.Circuits.Entity.SetParameter``1(System.String,``0,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Sets a parameter with a specific name.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing parameter names, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.</param>
            <returns>False if the parameter could not be found.</returns>
        </member>
        <member name="M:SpiceSharp.Circuits.Entity.GetPrincipalParameter``1">
            <summary>
            Gets the principal parameter.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <returns>
            The principal parameter of the specified type.
            </returns>
        </member>
        <member name="M:SpiceSharp.Circuits.Entity.GetParameter``1(System.String,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Gets a parameter with a specified name.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <param name="name">The parameter name.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing parameter names, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.</param>
        </member>
        <member name="M:SpiceSharp.Circuits.Entity.CreateBehaviors(System.Type[],SpiceSharp.Simulations.Simulation,SpiceSharp.Circuits.EntityCollection)">
            <summary>
            Creates behaviors of the specified types. The type order is important.
            </summary>
            <remarks>
            The order typically indicates hierarchy. The entity will create the behaviors in reverse order, allowing
            the most specific child class to be used that is necessary. For example, the <see cref="T:SpiceSharp.Simulations.OP"/> simulation needs
            <see cref="T:SpiceSharp.Behaviors.ITemperatureBehavior"/> and an <see cref="T:SpiceSharp.Behaviors.IBiasingBehavior"/>. The entity will first look for behaviors
            of type <see cref="T:SpiceSharp.Behaviors.IBiasingBehavior"/>, and then for the behaviors of type <see cref="T:SpiceSharp.Behaviors.ITemperatureBehavior"/>. However,
            if the behavior that was created for <see cref="T:SpiceSharp.Behaviors.IBiasingBehavior"/> also implements <see cref="T:SpiceSharp.Behaviors.ITemperatureBehavior"/>,
            then then entity will not create a new instance of the behavior.
            </remarks>
            <param name="types">The types of behaviors that the simulation wants, in the order that they will be called.</param>
            <param name="simulation">The simulation requesting the behaviors.</param>
            <param name="entities">The entities being processed, used by the entity to find linked entities.</param>
        </member>
        <member name="M:SpiceSharp.Circuits.Entity.BindBehavior(SpiceSharp.Behaviors.IBehavior,SpiceSharp.Simulations.Simulation)">
            <summary>
            Binds the behavior to the simulation.
            </summary>
            <param name="behavior">The behavior that needs to be bound to the simulation.</param>
            <param name="simulation">The simulation to be bound to.</param>
        </member>
        <member name="M:SpiceSharp.Circuits.Entity.Clone">
            <summary>
            Clone the entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Circuits.Entity.Clone(SpiceSharp.Circuits.InstanceData)">
            <summary>
            Clone the entity for instancing a circuit as a subcircuit.
            </summary>
            <param name="data">The instancing data.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Circuits.Entity.SpiceSharp#ICloneable#Clone">
            <summary>
            Clone this object.
            </summary>
        </member>
        <member name="M:SpiceSharp.Circuits.Entity.CopyFrom(SpiceSharp.Circuits.Entity)">
            <summary>
            Copy properties from another entity.
            </summary>
            <param name="source">The source entity.</param>
        </member>
        <member name="M:SpiceSharp.Circuits.Entity.SpiceSharp#ICloneable#CopyFrom(SpiceSharp.ICloneable)">
            <summary>
            Copy properties from another object.
            </summary>
            <param name="source">The source object.</param>
        </member>
        <member name="T:SpiceSharp.Circuits.EntityCollection">
            <summary>
            A class that manages a collection of entities.
            </summary>
        </member>
        <member name="F:SpiceSharp.Circuits.EntityCollection._entities">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="E:SpiceSharp.Circuits.EntityCollection.EntityAdded">
            <summary>
            Occurs when an entity is about to be added to the collection.
            </summary>
        </member>
        <member name="E:SpiceSharp.Circuits.EntityCollection.EntityRemoved">
            <summary>
            Occurs when an entity has been removed from the collection.
            </summary>
        </member>
        <member name="P:SpiceSharp.Circuits.EntityCollection.Item(System.String)">
            <summary>
            Search for an entity by its string.
            </summary>
            <param name="name">The string.</param>
            <returns>The entity with the specified string.</returns>
        </member>
        <member name="P:SpiceSharp.Circuits.EntityCollection.Comparer">
            <summary>
            Gets the comparer for entity identifiers.
            </summary>
        </member>
        <member name="P:SpiceSharp.Circuits.EntityCollection.Count">
            <summary>
            The number of entities.
            </summary>
        </member>
        <member name="P:SpiceSharp.Circuits.EntityCollection.Keys">
            <summary>
            Enumerates the names of all entities in the collection.
            </summary>
        </member>
        <member name="P:SpiceSharp.Circuits.EntityCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.Generic.ICollection`1" /> is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:SpiceSharp.Circuits.EntityCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="P:SpiceSharp.Circuits.EntityCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
        </member>
        <member name="M:SpiceSharp.Circuits.EntityCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Circuits.EntityCollection"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Circuits.EntityCollection.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Circuits.EntityCollection"/> class.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing entity names, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.</param>
        </member>
        <member name="M:SpiceSharp.Circuits.EntityCollection.Clear">
            <summary>
            Clear all entities in the collection.
            </summary>
        </member>
        <member name="M:SpiceSharp.Circuits.EntityCollection.Add(SpiceSharp.Circuits.Entity)">
            <summary>
            Add an entity.
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:SpiceSharp.Circuits.EntityCollection.Add(SpiceSharp.Circuits.Entity[])">
            <summary>
            Add one or more entities.
            </summary>
            <param name="entities">The entities that need to be added.</param>
        </member>
        <member name="M:SpiceSharp.Circuits.EntityCollection.OnEntityAdded(SpiceSharp.Circuits.EntityEventArgs)">
            <summary>
            Raises the <seealso cref="E:SpiceSharp.Circuits.EntityCollection.EntityAdded"/> event.
            </summary>
        </member>
        <member name="M:SpiceSharp.Circuits.EntityCollection.Remove(SpiceSharp.Circuits.Entity)">
            <summary>
            Removes the specified entity from the collection.
            </summary>
            <param name="item">The item to be deleted.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Circuits.EntityCollection.Remove(System.String)">
            <summary>
            Removes the specified entity from the collection.
            </summary>
            <param name="name">The name of the entity to be deleted.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Circuits.EntityCollection.Remove(System.String[])">
            <summary>
            Removes the specified entities from the collection.
            </summary>
            <param name="names">strings of the entities that need to be deleted.</param>
        </member>
        <member name="M:SpiceSharp.Circuits.EntityCollection.Remove(SpiceSharp.Circuits.Entity[])">
            <summary>
            Removes the specified entities from the collection.
            </summary>
            <param name="entities">The entities.</param>
        </member>
        <member name="M:SpiceSharp.Circuits.EntityCollection.OnEntityRemoved(SpiceSharp.Circuits.EntityEventArgs)">
            <summary>
            Raises the <seealso cref="E:SpiceSharp.Circuits.EntityCollection.EntityRemoved"/> event.
            </summary>
        </member>
        <member name="M:SpiceSharp.Circuits.EntityCollection.Contains(System.String)">
            <summary>
            This method checks if a component exists with a specified string.
            </summary>
            <param name="name">The string.</param>
            <returns>True if the collection contains an entity with a certain string.</returns>
        </member>
        <member name="M:SpiceSharp.Circuits.EntityCollection.TryGetEntity(System.String,SpiceSharp.Circuits.Entity@)">
            <summary>
            Try to find an entity in the collection.
            </summary>
            <param name="name">The name to be searched for.</param>
            <param name="entity">The found entity.</param>
            <returns>True if the entity was found.</returns>
        </member>
        <member name="M:SpiceSharp.Circuits.EntityCollection.ByType(System.Type)">
            <summary>
            Gets all entities of a specific type.
            </summary>
            <param name="type">The type of entities to be listed.</param>
            <returns>An array with entities of the specified type.</returns>
        </member>
        <member name="M:SpiceSharp.Circuits.EntityCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SpiceSharp.Circuits.EntityCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SpiceSharp.Circuits.EntityCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copy the elements to an array.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The starting index.</param>
        </member>
        <member name="M:SpiceSharp.Circuits.EntityCollection.Contains(SpiceSharp.Circuits.Entity)">
            <summary>
            Find out if an entity is contained in this collection.
            </summary>
            <param name="item">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Circuits.EntityCollection.CopyTo(SpiceSharp.Circuits.Entity[],System.Int32)">
            <summary>
            Copy the elements to an array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">The starting index.</param>
        </member>
        <member name="T:SpiceSharp.Circuits.EntityEventArgs">
            <summary>
            Event arguments for passing an entity.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:SpiceSharp.Circuits.EntityEventArgs.Entity">
            <summary>
            Gets the entity.
            </summary>
        </member>
        <member name="M:SpiceSharp.Circuits.EntityEventArgs.#ctor(SpiceSharp.Circuits.Entity)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Circuits.EntityEventArgs"/> class.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:SpiceSharp.Circuits.InstanceData">
            <summary>
            Class for describing how a circuit can be instanced.
            </summary>
        </member>
        <member name="P:SpiceSharp.Circuits.InstanceData.Name">
            <summary>
            Gets the instance name.
            </summary>
        </member>
        <member name="P:SpiceSharp.Circuits.InstanceData.Subcircuit">
            <summary>
            Gets the subcircuit.
            </summary>
        </member>
        <member name="M:SpiceSharp.Circuits.InstanceData.#ctor(SpiceSharp.Circuit)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Circuits.InstanceData"/> class.
            </summary>
            <param name="subcircuit">The circuit that describes the contents of the subcircuit.</param>
        </member>
        <member name="M:SpiceSharp.Circuits.InstanceData.#ctor(SpiceSharp.Circuit,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Circuits.InstanceData"/> class.
            </summary>
            <param name="subcircuit">The circuit that describes the contents of the subcircuit.</param>
            <param name="name">The instance name.</param>
        </member>
        <member name="M:SpiceSharp.Circuits.InstanceData.GenerateIdentifier(System.String)">
            <summary>
            Combine a name with the instance name to provide a unique identifier.
            </summary>
            <param name="name">The local name.</param>
            <returns></returns>
        </member>
        <member name="T:SpiceSharp.Circuits.OrderedCircuit">
            <summary>
            A circuit for which the iteration of entities can be ordered.
            </summary>
            <seealso cref="T:SpiceSharp.Circuit" />
            <remarks>
            Entity behaviors will be created and initially executed in the same order.
            This type of circuit can be used to speed up allocation, or to optimize
            numerical accuracy. 
            </remarks>
        </member>
        <member name="P:SpiceSharp.Circuits.OrderedCircuit.EntityComparer">
            <summary>
            Gets or sets the entity comparer for ordering entities before iteration.
            </summary>
        </member>
        <member name="M:SpiceSharp.Circuits.OrderedCircuit.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:SpiceSharp.Circuits.Validator">
            <summary>
            A class that describes methods for validating a circuit.
            </summary>
        </member>
        <member name="T:SpiceSharp.Circuits.Validator.VoltageDriver">
            <summary>
            Defines a voltage driver.
            </summary>
        </member>
        <member name="F:SpiceSharp.Circuits.Validator._hasSource">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="M:SpiceSharp.Circuits.Validator.Validate(SpiceSharp.Circuits.EntityCollection)">
            <summary>
            Validate a circuit.
            </summary>
            <param name="entities">The circuit to be validated.</param>
        </member>
        <member name="M:SpiceSharp.Circuits.Validator.CheckEntity(SpiceSharp.Circuits.Entity)">
            <summary>
            Perform checks on an entity.
            </summary>
            <param name="c">The entity to be checked.</param>
        </member>
        <member name="M:SpiceSharp.Circuits.Validator.IsShortCircuited(SpiceSharp.Components.Component)">
            <summary>
            Determines if all pins of the component are short-circuited together.
            </summary>
            <param name="component">The component.</param>
            <returns>
              <c>true</c> if all component pins are short-circuited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Circuits.Validator.FindVoltageDriveLoop">
            <summary>
            Find a voltage driver that closes a voltage drive loop.
            </summary>
            <returns>
            The component that closes the loop.
            </returns>
        </member>
        <member name="M:SpiceSharp.Circuits.Validator.AddConnections(System.Int32[])">
            <summary>
            Add connected nodes that will be used to find floating nodes.
            </summary>
            <param name="nodes">The nodes that are connected together.</param>
        </member>
        <member name="M:SpiceSharp.Circuits.Validator.AddConnection(System.Int32,System.Int32)">
            <summary>
            Add a connection for checking for floating nodes.
            </summary>
            <param name="a">The first node index.</param>
            <param name="b">The second node index.</param>
        </member>
        <member name="M:SpiceSharp.Circuits.Validator.FindFloatingNodes">
            <summary>
            Find a node that has no path to ground anywhere (open-circuited).
            </summary>
            <returns>A set of node indices that has no DC path to ground.</returns>
        </member>
        <member name="T:SpiceSharp.Components.CommonBehaviors.IndependentSourceFrequencyParameters">
            <summary>
            AC parameters for an independent source.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CommonBehaviors.IndependentSourceFrequencyParameters.AcMagnitude">
            <summary>
            Small-signal magnitude.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CommonBehaviors.IndependentSourceFrequencyParameters.AcPhase">
            <summary>
            Small-signal phase.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.IndependentSourceFrequencyParameters.SetAc(System.Double[])">
            <summary>
            Sets the small-signal parameters of the source.
            </summary>
            <param name="ac">Parameters.</param>
        </member>
        <member name="P:SpiceSharp.Components.CommonBehaviors.IndependentSourceFrequencyParameters.Phasor">
            <summary>
            Gets the phasor represented by the amplitude and phase.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.IndependentSourceFrequencyParameters.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CommonBehaviors.IndependentSourceFrequencyParameters"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.IndependentSourceFrequencyParameters.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CommonBehaviors.IndependentSourceFrequencyParameters"/> class.
            </summary>
            <param name="magnitude">Magnitude</param>
            <param name="phase">Phase</param>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.IndependentSourceFrequencyParameters.Clone">
            <summary>
            Creates a deep clone of the parameter set.
            </summary>
            <returns>
            A deep clone of the parameter set.
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.IndependentSourceFrequencyParameters.CopyFrom(SpiceSharp.ParameterSet)">
            <summary>
            Copy parameters.
            </summary>
            <param name="source">The source object.</param>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.IndependentSourceFrequencyParameters.CalculateDefaults">
            <summary>
            Method for calculating the default values of derived parameters.
            </summary>
            <remarks>
            These calculations should be run whenever a parameter has been changed.
            </remarks>
        </member>
        <member name="T:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters">
            <summary>
            Base parameters for an independent source.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters.Waveform">
            <summary>
            The time-dependent waveform of the source.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters.DcValue">
            <summary>
            The DC value of the source.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters.#ctor(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters"/> class.
            </summary>
            <param name="dc">DC value</param>
        </member>
        <member name="M:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters.#ctor(SpiceSharp.Components.Waveform)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CommonBehaviors.IndependentSourceParameters"/> class.
            </summary>
            <param name="waveform">Waveform</param>
        </member>
        <member name="T:SpiceSharp.Components.Component">
            <summary>
            A class that represents a (Spice) component/device.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Component._connections">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Component.PinCount">
            <summary>
            Gets the number of nodes.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Component.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Component" /> class.
            </summary>
            <param name="name">The string of the entity.</param>
            <param name="nodeCount">The node count.</param>
        </member>
        <member name="P:SpiceSharp.Components.Component.Model">
            <summary>
            Gets the model of the circuit component (if any).
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Component.Connect(System.String[])">
            <summary>
            Connects the component in the circuit.
            </summary>
            <param name="nodes">The node indices.</param>
        </member>
        <member name="M:SpiceSharp.Components.Component.CreateBehaviors(System.Type[],SpiceSharp.Simulations.Simulation,SpiceSharp.Circuits.EntityCollection)">
            <summary>
            Creates behaviors of the specified type.
            </summary>
            <param name="types"></param>
            <param name="simulation">The simulation requesting the behaviors.</param>
            <param name="entities">The entities being processed.</param>
        </member>
        <member name="M:SpiceSharp.Components.Component.BindBehavior(SpiceSharp.Behaviors.IBehavior,SpiceSharp.Simulations.Simulation)">
            <summary>
            Bind a behavior to a simulation.
            </summary>
            <param name="behavior">The behavior.</param>
            <param name="simulation">The simulation.</param>
        </member>
        <member name="M:SpiceSharp.Components.Component.BuildBindingContext(SpiceSharp.Simulations.Simulation)">
            <summary>
            Build a binding context for a behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Components.Component.GetNode(System.Int32)">
            <summary>
            Gets the node index of a pin.
            </summary>
            <remarks>
            This method will only return valid results after the component is set up using <see cref="M:SpiceSharp.Components.Component.ApplyConnections(SpiceSharp.Simulations.VariableSet)"/>.
            </remarks>
            <param name="index">The pin index.</param>
            <returns>The node index.</returns>
        </member>
        <member name="M:SpiceSharp.Components.Component.ApplyConnections(SpiceSharp.Simulations.VariableSet)">
            <summary>
            Update the indices for the component.
            </summary>
            <param name="nodes">The variable set.</param>
            <returns>The node indices.</returns>
        </member>
        <member name="M:SpiceSharp.Components.Component.GetNodeIndexes(SpiceSharp.Simulations.VariableSet)">
            <summary>
            Gets the node indexes (in order).
            </summary>
            <param name="nodes">The nodes.</param>
            <returns>An enumerable for all nodes.</returns>
        </member>
        <member name="M:SpiceSharp.Components.Component.Clone(SpiceSharp.Circuits.InstanceData)">
            <summary>
            Clone the component for instantiating.
            </summary>
            <param name="data">The instance data.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Components.Component.CopyFrom(SpiceSharp.Circuits.Entity)">
            <summary>
            Copy from another component.
            </summary>
            <param name="source">The source component.</param>
        </member>
        <member name="T:SpiceSharp.Components.ComponentBindingContext">
            <summary>
            A binding context for a <see cref="T:SpiceSharp.Components.Component"/>.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ComponentBindingContext.Pins">
            <summary>
            Gets the pins the component is connected to.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.ComponentBindingContext.Connect(System.Int32[])">
            <summary>
            Apply the indices that the pins of the component are connected to.
            </summary>
            <param name="pins">The pins.</param>
        </member>
        <member name="T:SpiceSharp.Components.ComponentInstanceData">
            <summary>
            Instance data for using in combination with components.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ComponentInstanceData.NodeMap">
            <summary>
            A map for nodes when instancing.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.ComponentInstanceData.#ctor(SpiceSharp.Circuit)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.ComponentInstanceData"/> class.
            </summary>
            <param name="subcircuit">The circuit to instantiate.</param>
        </member>
        <member name="M:SpiceSharp.Components.ComponentInstanceData.#ctor(SpiceSharp.Circuit,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.ComponentInstanceData"/> class.
            </summary>
            <param name="subckt">The circuit to instantiate.</param>
            <param name="name">The instance name.</param>
        </member>
        <member name="M:SpiceSharp.Components.ComponentInstanceData.#ctor(SpiceSharp.Circuit,System.String,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.ComponentInstanceData"/> class.
            </summary>
            <param name="subckt">The circuit to instantiate.</param>
            <param name="name">The instance name.</param>
            <param name="comparer">The <seealso cref="T:System.Collections.Generic.IEqualityComparer`1"/> class to compare node names.</param>
        </member>
        <member name="M:SpiceSharp.Components.ComponentInstanceData.GenerateNodeName(System.String)">
            <summary>
            Generate a node name. If <seealso cref="P:SpiceSharp.Components.ComponentInstanceData.NodeMap"/> contains the node, it is mapped, else
            the node name is expanded.
            </summary>
            <param name="name">the local name.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Components.ComponentInstanceData.GenerateModelName(System.String)">
            <summary>
            Generate a model name. If the model name exists in the subcircuit, the name is expanded.
            </summary>
            <param name="name">The local name.</param>
            <returns></returns>
        </member>
        <member name="T:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.BaseParameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.CurrentControlledCurrentSource"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.BaseParameters.Coefficient">
            <summary>
            Parameters
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.BaseParameters.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.BaseParameters"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.BaseParameters.#ctor(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.BaseParameters"/> class.
            </summary>
            <param name="gain">Gain</param>
        </member>
        <member name="T:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.BiasingBehavior">
            <summary>
            DC biasing behavior for a <see cref="T:SpiceSharp.Components.CurrentControlledCurrentSource" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.BiasingBehavior.BaseParameters">
            <summary>
            Necessary parameters and behaviors
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.BiasingBehavior.VoltageLoad">
            <summary>
            The <see cref="T:SpiceSharp.Components.VoltageSourceBehaviors.BiasingBehavior"/> that handles the controlling voltage source current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.BiasingBehavior.ControlBranchEq">
            <summary>
            Nodes
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.BiasingBehavior.PosNode">
            <summary>
            The positive node index.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.BiasingBehavior.NegNode">
            <summary>
            The negative node index.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.BiasingBehavior.PosControlBranchPtr">
            <summary>
            The (pos, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.BiasingBehavior.NegControlBranchPtr">
            <summary>
            The (neg, branch) element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.BiasingBehavior.GetCurrent">
            <summary>
            Device methods and properties
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.BiasingBehavior.GetVoltage">
            <summary>
            Gets the volage over the source.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.BiasingBehavior.GetPower">
            <summary>
            The power dissipation by the source.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.BiasingBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.BiasingBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.BiasingBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">Data provider</param>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.BiasingBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <summary>
            Execute behavior
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.BiasingBehavior.IsConvergent">
            <summary>
            Tests convergence at the device-level.
            </summary>
            <returns>
            <c>true</c> if the device determines the solution converges; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.FrequencyBehavior">
            <summary>
            Frequency behavior for <see cref="T:SpiceSharp.Components.CurrentControlledCurrentSource"/>
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.FrequencyBehavior.GetComplexVoltage">
            <summary>
            Get the voltage. 
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.FrequencyBehavior.GetComplexCurrent">
            <summary>
            Get the current.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.FrequencyBehavior.GetComplexPower">
            <summary>
            Get the power dissipation.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.FrequencyBehavior.CPosControlBranchPtr">
            <summary>
            The (pos, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.FrequencyBehavior.CNegControlBranchPtr">
            <summary>
            the (neg, branch) element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.FrequencyBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.FrequencyBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.FrequencyBehavior.InitializeParameters">
            <summary>
            Initializes the parameters.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.FrequencyBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.FrequencyBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSourceBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <summary>
            Load the Y-matrix and Rhs-vector.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.CurrentControlledCurrentSource">
            <summary>
            A current-controlled current source.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledCurrentSource.ControllingName">
            <summary>
            Parameters
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.CurrentControlledCurrentSource.CurrentControlledCurrentSourcePinCount">
            <summary>
            Constants
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSource.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CurrentControlledCurrentSource"/> class.
            </summary>
            <param name="name">The name of the current controlled current source</param>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSource.#ctor(System.String,System.String,System.String,System.String,System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CurrentControlledCurrentSource"/> class.
            </summary>
            <param name="name">The name of the current controlled current source</param>
            <param name="pos">The positive node</param>
            <param name="neg">The negative node</param>
            <param name="voltageSource">The name of the voltage source</param>
            <param name="gain">The current gain</param>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSource.CreateBehaviors(System.Type[],SpiceSharp.Simulations.Simulation,SpiceSharp.Circuits.EntityCollection)">
            <summary>
            Creates behaviors of the specified type.
            </summary>
            <param name="types"></param>
            <param name="simulation">The simulation requesting the behaviors.</param>
            <param name="entities">The entities being processed.</param>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSource.BuildBindingContext(SpiceSharp.Simulations.Simulation)">
            <summary>
            Build the binding context.
            </summary>
            <param name="simulation">The simulation.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledCurrentSource.Clone(SpiceSharp.Circuits.InstanceData)">
            <summary>
            Clone the current controlled current source
            </summary>
            <param name="data">Instance data.</param>
            <returns></returns>
        </member>
        <member name="T:SpiceSharp.Components.CurrentSourceBehaviors.AcceptBehavior">
            <summary>
            Accept behavior for a <see cref="T:SpiceSharp.Components.CurrentSource"/>
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.CurrentSourceBehaviors.AcceptBehavior._bp">
            <summary>
            Necessary behaviors
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSourceBehaviors.AcceptBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CurrentSourceBehaviors.AcceptBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSourceBehaviors.AcceptBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">Data provider</param>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSourceBehaviors.AcceptBehavior.SpiceSharp#Behaviors#IAcceptBehavior#Probe">
            <summary>
            Called when a new timepoint is being tested.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSourceBehaviors.AcceptBehavior.SpiceSharp#Behaviors#IAcceptBehavior#Accept">
            <summary>
            Accept the current timepoint
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.CurrentSourceBehaviors.BiasingBehavior">
            <summary>
            DC biasing behavior for a <see cref="T:SpiceSharp.Components.CurrentSource" />.
            </summary>
            <remarks>
            This behavior also includes transient behavior logic. When transient analysis is
            performed, then waveforms need to be used to calculate the operating point anyway.
            </remarks>
        </member>
        <member name="P:SpiceSharp.Components.CurrentSourceBehaviors.BiasingBehavior.BaseParameters">
            <summary>
            Necessary behaviors and parameters
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSourceBehaviors.BiasingBehavior.GetVoltage">
            <summary>
            Gets the voltage.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSourceBehaviors.BiasingBehavior.GetPower">
            <summary>
            Get the power dissipation.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentSourceBehaviors.BiasingBehavior.Current">
            <summary>
            Get the current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentSourceBehaviors.BiasingBehavior.PosNode">
            <summary>
            The positive node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentSourceBehaviors.BiasingBehavior.NegNode">
            <summary>
            The negative index.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentSourceBehaviors.BiasingBehavior.PosPtr">
            <summary>
            The positive RHS element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentSourceBehaviors.BiasingBehavior.NegPtr">
            <summary>
            The negative RHS element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSourceBehaviors.BiasingBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CurrentSourceBehaviors.BiasingBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSourceBehaviors.BiasingBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">Data provider</param>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSourceBehaviors.BiasingBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSourceBehaviors.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <summary>
            Execute behavior
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSourceBehaviors.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#IsConvergent">
            <summary>
            Tests convergence at the device-level.
            </summary>
            <returns>
            <c>true</c> if the device determines the solution converges; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.CurrentSourceBehaviors.FrequencyBehavior">
            <summary>
            Behavior of a currentsource in AC analysis
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentSourceBehaviors.FrequencyBehavior.FrequencyParameters">
            <summary>
            Necessary behaviors and parameters
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentSourceBehaviors.FrequencyBehavior.CPosPtr">
            <summary>
            The positive RHS element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentSourceBehaviors.FrequencyBehavior.CNegPtr">
            <summary>
            The negative RHS element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSourceBehaviors.FrequencyBehavior.GetComplexVoltage">
            <summary>
            Get the voltage.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSourceBehaviors.FrequencyBehavior.GetComplexPower">
            <summary>
            Get the power dissipation.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentSourceBehaviors.FrequencyBehavior.ComplexCurrent">
            <summary>
            Get the current.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSourceBehaviors.FrequencyBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CurrentSourceBehaviors.FrequencyBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSourceBehaviors.FrequencyBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">Data provider</param>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSourceBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <summary>
            Initializes the small-signal parameters.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSourceBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <summary>
            Load Y-matrix and Rhs-vector.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.CurrentSource">
            <summary>
            An independent current source
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.CurrentSource.CurrentSourcePinCount">
            <summary>
            Constants
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSource.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CurrentSource"/> class.
            </summary>
            <param name="name">The name of the current source</param>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSource.#ctor(System.String,System.String,System.String,System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CurrentSource"/> class.
            </summary>
            <param name="name">The name of the current source</param>
            <param name="pos">The positive node</param>
            <param name="neg">The negative node</param>
            <param name="dc">The DC value</param>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSource.#ctor(System.String,System.String,System.String,SpiceSharp.Components.Waveform)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CurrentSource"/> class.
            </summary>
            <param name="name">The name of the current source</param>
            <param name="pos">The positive node</param>
            <param name="neg">The negative node</param>
            <param name="waveform">The Waveform-object</param>
        </member>
        <member name="T:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.BaseParameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.VoltageControlledCurrentSource"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.BaseParameters.Coefficient">
            <summary>
            Parameters
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.BaseParameters.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.BaseParameters"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.BaseParameters.#ctor(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.BaseParameters"/> class.
            </summary>
            <param name="gain">Gain</param>
        </member>
        <member name="T:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.BiasingBehavior">
            <summary>
            DC biasing behavior for a <see cref="T:SpiceSharp.Components.VoltageControlledCurrentSource" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.BiasingBehavior.BaseParameters">
            <summary>
            Necessary parameters and behaviors
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.BiasingBehavior.PosNode">
            <summary>
            The positive node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.BiasingBehavior.NegNode">
            <summary>
            The negative index.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.BiasingBehavior.ContPosNode">
            <summary>
            The controlling positive node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.BiasingBehavior.ContNegNode">
            <summary>
            The controlling negative node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.BiasingBehavior.PosControlPosPtr">
            <summary>
            The (pos, ctrlpos) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.BiasingBehavior.PosControlNegPtr">
            <summary>
            The (neg, ctrlneg) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.BiasingBehavior.NegControlPosPtr">
            <summary>
            The (neg, ctrlpos) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.BiasingBehavior.NegControlNegPtr">
            <summary>
            The (neg, ctrlneg) element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.BiasingBehavior.GetVoltage">
            <summary>
            Get the voltage.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.BiasingBehavior.GetCurrent">
            <summary>
            Get the current.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.BiasingBehavior.GetPower">
            <summary>
            Get the power dissipation.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.BiasingBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.BiasingBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.BiasingBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.BiasingBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <summary>
            Load the Y-matrix and Rhs-vector.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#IsConvergent">
            <summary>
            Tests convergence at the device-level.
            </summary>
            <returns>
            <c>true</c> if the device determines the solution converges; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.FrequencyBehavior">
            <summary>
            AC behavior for a <see cref="T:SpiceSharp.Components.VoltageControlledCurrentSource"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.FrequencyBehavior.CPosControlPosPtr">
            <summary>
            The (pos, ctrlpos) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.FrequencyBehavior.CPosControlNegPtr">
            <summary>
            The (pos, ctrlneg) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.FrequencyBehavior.CNegControlPosPtr">
            <summary>
            The (neg, ctrlpos) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.FrequencyBehavior.CNegControlNegPtr">
            <summary>
            The (neg, ctrlneg) element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.FrequencyBehavior.GetComplexVoltage">
            <summary>
            Get the voltage.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.FrequencyBehavior.GetComplexCurrent">
            <summary>
            Get the current.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.FrequencyBehavior.GetComplexPower">
            <summary>
            Get the power dissipation.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.FrequencyBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.FrequencyBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.FrequencyBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <summary>
            Initializes the parameters.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSourceBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <summary>
            Execute behavior for AC analysis
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.VoltageControlledCurrentSource">
            <summary>
            A voltage-controlled current source
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.VoltageControlledCurrentSource.VoltageControlledCurrentSourcePinCount">
            <summary>
            Private constants
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSource.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.VoltageControlledCurrentSource"/> class.
            </summary>
            <param name="name">The name of the voltage-controlled current source</param>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledCurrentSource.#ctor(System.String,System.String,System.String,System.String,System.String,System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.VoltageControlledCurrentSource"/> class.
            </summary>
            <param name="name">The name of the voltage-controlled current source</param>
            <param name="pos">The positive node</param>
            <param name="neg">The negative node</param>
            <param name="controlPos">The positive controlling node</param>
            <param name="controlNeg">The negative controlling node</param>
            <param name="gain">The transconductance gain</param>
        </member>
        <member name="T:SpiceSharp.Components.Distributed.DelayedSignal">
            <summary>
            This class will keep track of a signal and can calculate the delayed version of it.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.Distributed.DelayedSignal.Node">
            <summary>
            A node used for our linked list
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Distributed.DelayedSignal.Delay">
            <summary>
            Gets the delay.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Distributed.DelayedSignal.Size">
            <summary>
            Gets the number of values stored by the delayed signal.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Distributed.DelayedSignal.Values">
            <summary>
            Gets the values at the probed point.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Distributed.DelayedSignal.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Distributed.DelayedSignal"/> class.
            </summary>
            <param name="size">The number of elements to be stored.</param>
            <param name="delay">The amount of time to look back.</param>
        </member>
        <member name="M:SpiceSharp.Components.Distributed.DelayedSignal.Probe(System.Double,System.Boolean)">
            <summary>
            Probes the specified timepoint.
            </summary>
            <param name="time">The time.</param>
            <param name="breakpoint">If <c>true</c>, interpolation will be linear. Else cubic interpolation will be used if possible.</param>
        </member>
        <member name="M:SpiceSharp.Components.Distributed.DelayedSignal.SetProbedValues(System.Double[])">
            <summary>
            Sets the probed values.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:SpiceSharp.Components.Distributed.DelayedSignal.AcceptProbedValues">
            <summary>
            Accepts the last probed values.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Distributed.DelayedSignal.GetValue(System.Int32,System.Int32)">
            <summary>
            Get a tracked value.
            </summary>
            <param name="back">The number of points to go back in time.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Components.Distributed.DelayedSignal.GetTime(System.Int32)">
            <summary>
            Gets a tracked timepoint.
            </summary>
            <param name="back">The number of points to go back in time.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Components.Distributed.DelayedSignal.MoveReferenceCloseTo(System.Double)">
            <summary>
            Moves the reference such that it has a point left and right of the specified time.
            </summary>
            <param name="time">The time.</param>
        </member>
        <member name="M:SpiceSharp.Components.Distributed.DelayedSignal.Clear">
            <summary>
            Clears any memory in the delayed signal.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.LosslessTransmissionLineBehaviors.AcceptBehavior">
            <summary>
            Accept behavior for a <see cref="T:SpiceSharp.Components.LosslessTransmissionLine" />.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLineBehaviors.AcceptBehavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.LosslessTransmissionLineBehaviors.AcceptBehavior"/> class.
            </summary>
            <param name="name">The identifier of the behavior.</param>
            <remarks>
            The identifier of the behavior should be the same as that of the entity creating it.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLineBehaviors.AcceptBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLineBehaviors.AcceptBehavior.SpiceSharp#Behaviors#IAcceptBehavior#Probe">
            <summary>
            Called when a new timepoint is being tested.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLineBehaviors.AcceptBehavior.SpiceSharp#Behaviors#IAcceptBehavior#Accept">
            <summary>
            Accepts the current timepoint.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BaseParameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.LosslessTransmissionLine" />.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSet" />
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BaseParameters.Impedance">
            <summary>
            Gets or sets the characteristic impedance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BaseParameters.Frequency">
            <summary>
            Gets the frequency parameter of the transmission line.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BaseParameters.Delay">
            <summary>
            Gets or sets the transmission delay of the transmission line.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BaseParameters.NormalizedLength">
            <summary>
            Gets normalized length parameter at the given frequency.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BaseParameters.RelativeTolerance">
            <summary>
            Gets or sets the relative tolerance used to determine if a breakpoint (where harsh nonlinear behavior occurs) needs to be added.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BaseParameters.AbsoluteTolerance">
            <summary>
            Gets or sets the relative tolerance used to determine if a breakpoint (where harsh nonlinear behavior occurs) needs to be added.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BaseParameters.Admittance">
            <summary>
            Gets the admittance (reciprocal of the impedance).
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BaseParameters.CalculateDefaults">
            <summary>
            Method for calculating the default values of derived parameters.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior">
            <summary>
            Load behavior for a <see cref="T:SpiceSharp.Components.LosslessTransmissionLine" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.BaseParameters">
            <summary>
            Gets the base parameters.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Pos1">
            <summary>
            Gets the left-side positive node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Neg1">
            <summary>
            Gets the left-side negative node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Pos2">
            <summary>
            Gets the right-side positive node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Neg2">
            <summary>
            Gets the right-side negative node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Internal1">
            <summary>
            Gets the left-side internal node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Internal2">
            <summary>
            Gets the right-side internal node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.BranchEq1">
            <summary>
            Gets the left-side branch equation row.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.BranchEq2">
            <summary>
            Gets the right-side branch equation row.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Pos1Pos1Ptr">
            <summary>
            Gets the left (positive, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Pos1Int1Ptr">
            <summary>
            Gets the left (positive, internal) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Int1Pos1Ptr">
            <summary>
            Gets the left (internal, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Int1Int1Ptr">
            <summary>
            Gets the left (internal, internal) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Int1Ibr1Ptr">
            <summary>
            Gets the left (internal, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Ibr1Int1Ptr">
            <summary>
            Gets the left (branch, internal) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Neg1Ibr1Ptr">
            <summary>
            Gets the left (negative, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Ibr1Neg1Ptr">
            <summary>
            Gets the left (branch, negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Pos2Pos2Ptr">
            <summary>
            Gets the right (positive, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Pos2Int2Ptr">
            <summary>
            Gets the right (positive, internal) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Int2Pos2Ptr">
            <summary>
            Gets the right (internal, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Int2Int2Ptr">
            <summary>
            Gets the right (internal, internal) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Int2Ibr2Ptr">
            <summary>
            Gets the right (internal, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Ibr2Int2Ptr">
            <summary>
            Gets the right (branch, internal) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Neg2Ibr2Ptr">
            <summary>
            Gets the right (negative, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Ibr2Neg2Ptr">
            <summary>
            Gets the right (branch, negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Ibr1Pos1Ptr">
            <summary>
            Gets the left (branch, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Ibr1Pos2Ptr">
            <summary>
            Gets the (left branch, right positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Ibr1Neg2Ptr">
            <summary>
            Gets the (left branch, right negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Ibr2Ibr1Ptr">
            <summary>
            Gets the (right branch, left branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Ibr2Ibr2Ptr">
            <summary>
            Gets the right (branch, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior"/> class.
            </summary>
            <param name="name">The identifier of the behavior.</param>
            <remarks>
            The identifier of the behavior should be the same as that of the entity creating it.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Connect(System.Int32[])">
            <summary>
            Connect the behavior in the circuit
            </summary>
            <param name="pins">Pin indices in order</param>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The data provider.</param>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <summary>
            Loads the Y-matrix and Rhs-vector.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLineBehaviors.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#IsConvergent">
            <summary>
            Tests convergence at the device-level.
            </summary>
            <returns>
            <c>true</c> if the device determines the solution converges; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.LosslessTransmissionLineBehaviors.FrequencyBehavior">
            <summary>
            Frequency behavior for a <see cref="T:SpiceSharp.Components.LosslessTransmissionLine" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.FrequencyBehavior.CPos1Pos1Ptr">
            <summary>
            Gets the left (positive, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.FrequencyBehavior.CPos1Int1Ptr">
            <summary>
            Gets the left (positive, internal) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.FrequencyBehavior.CNeg1Ibr1Ptr">
            <summary>
            Gets the left (negative, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.FrequencyBehavior.CPos2Pos2Ptr">
            <summary>
            Gets the right (positive, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.FrequencyBehavior.CNeg2Ibr2Ptr">
            <summary>
            Gets the right (negative, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.FrequencyBehavior.CInt1Pos1Ptr">
            <summary>
            Gets the left (internal, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.FrequencyBehavior.CInt1Int1Ptr">
            <summary>
            Gets the left (internal, internal) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.FrequencyBehavior.CInt1Ibr1Ptr">
            <summary>
            Gets the left (internal, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.FrequencyBehavior.CInt2Int2Ptr">
            <summary>
            Gets the (left internal, right internal) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.FrequencyBehavior.CInt2Ibr2Ptr">
            <summary>
            Gets the right (internal, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.FrequencyBehavior.CIbr1Neg1Ptr">
            <summary>
            Gets the left (branch, negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.FrequencyBehavior.CIbr1Pos2Ptr">
            <summary>
            Gets the (left branch, right positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.FrequencyBehavior.CIbr1Neg2Ptr">
            <summary>
            Gets the (left branch, right negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.FrequencyBehavior.CIbr1Int1Ptr">
            <summary>
            Gets the left (branch, internal) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.FrequencyBehavior.CIbr1Ibr2Ptr">
            <summary>
            Gets the (left branch, right branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.FrequencyBehavior.CIbr2Pos1Ptr">
            <summary>
            Gets the (right branch, left positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.FrequencyBehavior.CIbr2Neg1Ptr">
            <summary>
            Gets the (right branch, left negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.FrequencyBehavior.CIbr2Neg2Ptr">
            <summary>
            Gets the right (branch, negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.FrequencyBehavior.CIbr2Int2Ptr">
            <summary>
            Gets the right (branch, internal) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.FrequencyBehavior.CIbr2Ibr1Ptr">
            <summary>
            Gets the (right branch, left internal) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.FrequencyBehavior.CPos2Int2Ptr">
            <summary>
            Gets the right (positive, internal) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.FrequencyBehavior.CInt2Pos2Ptr">
            <summary>
            Gets the right (internal, positive) element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLineBehaviors.FrequencyBehavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.LosslessTransmissionLineBehaviors.FrequencyBehavior"/> class.
            </summary>
            <param name="name">The identifier of the behavior.</param>
            <remarks>
            The identifier of the behavior should be the same as that of the entity creating it.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLineBehaviors.FrequencyBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLineBehaviors.FrequencyBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLineBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <summary>
            Initializes the parameters.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLineBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <summary>
            Load the Y-matrix and right-hand side vector for frequency domain analysis.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.LosslessTransmissionLineBehaviors.TransientBehavior">
            <summary>
            Transient behavior for a <see cref="T:SpiceSharp.Components.LosslessTransmissionLine" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.TransientBehavior.Signals">
            <summary>
            Gets the delayed signals.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.TransientBehavior.Ibr1Ptr">
            <summary>
            Gets the left branch RHS element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.LosslessTransmissionLineBehaviors.TransientBehavior.Ibr2Ptr">
            <summary>
            Gets the right branch RHS element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLineBehaviors.TransientBehavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.LosslessTransmissionLineBehaviors.TransientBehavior"/> class.
            </summary>
            <param name="name">The identifier of the behavior.</param>
            <remarks>
            The identifier of the behavior should be the same as that of the entity creating it.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLineBehaviors.TransientBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLineBehaviors.TransientBehavior.SpiceSharp#Behaviors#ITimeBehavior#InitializeStates">
            <summary>
            Initialize the states.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLineBehaviors.TransientBehavior.SpiceSharp#Behaviors#ITimeBehavior#Load">
            <summary>
            Load the Y-matrix and Rhs-vector.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.LosslessTransmissionLine">
            <summary>
            A lossless transmission line
            </summary>
            <seealso cref="T:SpiceSharp.Components.Component" />
        </member>
        <member name="F:SpiceSharp.Components.LosslessTransmissionLine.LosslessTransmissionLinePinCount">
            <summary>
            The number of pins for a lossless transmission line
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLine.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.LosslessTransmissionLine"/> class.
            </summary>
            <param name="name">The name of the entity.</param>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLine.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.LosslessTransmissionLine"/> class.
            </summary>
            <param name="name">The name of the entity.</param>
            <param name="pos1">The positive terminal on one side.</param>
            <param name="neg1">The negative terminal on one side.</param>
            <param name="pos2">The positive terminal on the other side.</param>
            <param name="neg2">The negative terminal on the other side.</param>
        </member>
        <member name="M:SpiceSharp.Components.LosslessTransmissionLine.#ctor(System.String,System.String,System.String,System.String,System.String,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.LosslessTransmissionLine"/> class.
            </summary>
            <param name="name">The name of the entity.</param>
            <param name="pos1">The positive terminal on one side.</param>
            <param name="neg1">The negative terminal on one side.</param>
            <param name="pos2">The positive terminal on the other side.</param>
            <param name="neg2">The negative terminal on the other side.</param>
            <param name="impedance">The characteristic impedance.</param>
            <param name="delay">The delay.</param>
        </member>
        <member name="T:SpiceSharp.Components.DelayBehaviors.AcceptBehavior">
            <summary>
            Behavior for accepting time-points for a <see cref="T:SpiceSharp.Components.VoltageDelay"/>.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.DelayBehaviors.AcceptBehavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.DelayBehaviors.AcceptBehavior"/> class.
            </summary>
            <param name="name">The identifier of the behavior.</param>
            <remarks>
            The identifier of the behavior should be the same as that of the entity creating it.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Components.DelayBehaviors.AcceptBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The data provider.</param>
        </member>
        <member name="M:SpiceSharp.Components.DelayBehaviors.AcceptBehavior.SpiceSharp#Behaviors#IAcceptBehavior#Probe">
            <summary>
            Called when a new timepoint is being tested.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.DelayBehaviors.AcceptBehavior.SpiceSharp#Behaviors#IAcceptBehavior#Accept">
            <summary>
            Accepts the current timepoint.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.DelayBehaviors.BaseParameters">
            <summary>
            Base parameters for a <see cref="P:SpiceSharp.Components.DelayBehaviors.BaseParameters.Delay" />.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSet" />
        </member>
        <member name="P:SpiceSharp.Components.DelayBehaviors.BaseParameters.Delay">
            <summary>
            Gets or sets the delay in seconds.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DelayBehaviors.BaseParameters.RelativeTolerance">
            <summary>
            Gets or sets the relative tolerance to determine when a breakpoint (heavy nonlinear behavior occurs) needs to be added.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DelayBehaviors.BaseParameters.AbsoluteTolerance">
            Gets or sets the absolute tolerance to determine when a breakpoint (heavy nonlinear behavior occurs) needs to be added.
        </member>
        <member name="M:SpiceSharp.Components.DelayBehaviors.BaseParameters.CalculateDefaults">
            <summary>
            Method for calculating the default values of derived parameters.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.DelayBehaviors.BiasingBehavior">
            <summary>
            Biasing behavior for a <see cref="T:SpiceSharp.Components.VoltageDelay" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DelayBehaviors.BiasingBehavior.BaseParameters">
            <summary>
            Gets the base parameters.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DelayBehaviors.BiasingBehavior.PosNode">
            <summary>
            Gets the positive node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DelayBehaviors.BiasingBehavior.NegNode">
            <summary>
            Gets the negative node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DelayBehaviors.BiasingBehavior.ContPosNode">
            <summary>
            Gets the controlling positive node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DelayBehaviors.BiasingBehavior.ContNegNode">
            <summary>
            Gets the controlling negative node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DelayBehaviors.BiasingBehavior.BranchEq">
            <summary>
            Gets the branch equation row.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DelayBehaviors.BiasingBehavior.PosBranchPtr">
            <summary>
            Gets the (positive, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DelayBehaviors.BiasingBehavior.NegBranchPtr">
            <summary>
            Gets the (negative, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DelayBehaviors.BiasingBehavior.BranchPosPtr">
            <summary>
            Gets the (branch, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DelayBehaviors.BiasingBehavior.BranchNegPtr">
            <summary>
            Gets the (branch, negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DelayBehaviors.BiasingBehavior.BranchControlPosPtr">
            <summary>
            Gets the (branch, ctrlpos) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DelayBehaviors.BiasingBehavior.BranchControlNegPtr">
            <summary>
            Gets the (branch, ctrlneg) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DelayBehaviors.BiasingBehavior.State">
            <summary>
            Gets the real state.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.DelayBehaviors.BiasingBehavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.DelayBehaviors.BiasingBehavior"/> class.
            </summary>
            <param name="name">The identifier of the behavior.</param>
            <remarks>
            The identifier of the behavior should be the same as that of the entity creating it.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Components.DelayBehaviors.BiasingBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The provider.</param>
        </member>
        <member name="M:SpiceSharp.Components.DelayBehaviors.BiasingBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.DelayBehaviors.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <summary>
            Loads the Y-matrix and Rhs-vector.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.DelayBehaviors.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#IsConvergent">
            <summary>
            Tests convergence at the device-level.
            </summary>
            <returns>
            <c>true</c> if the device determines the solution converges; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.DelayBehaviors.FrequencyBehavior">
            <summary>
            Frequency behavior for a <see cref="T:SpiceSharp.Components.VoltageDelay" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DelayBehaviors.FrequencyBehavior.CPosBranchPtr">
            <summary>
            Gets the (positive, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DelayBehaviors.FrequencyBehavior.CNegBranchPtr">
            <summary>
            Gets the (negative, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DelayBehaviors.FrequencyBehavior.CBranchPosPtr">
            <summary>
            Gets the (branch, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DelayBehaviors.FrequencyBehavior.CBranchNegPtr">
            <summary>
            Gets the (branch, negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DelayBehaviors.FrequencyBehavior.CBranchControlNegPtr">
            <summary>
            Gets the (branch, ctrlneg) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DelayBehaviors.FrequencyBehavior.CBranchControlPosPtr">
            <summary>
            Gets the (branch, ctrlpos) element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.DelayBehaviors.FrequencyBehavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.DelayBehaviors.FrequencyBehavior"/> class.
            </summary>
            <param name="name">The identifier of the behavior.</param>
            <remarks>
            The identifier of the behavior should be the same as that of the entity creating it.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Components.DelayBehaviors.FrequencyBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.DelayBehaviors.FrequencyBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.DelayBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <summary>
            Initializes the small-signal parameters.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.DelayBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <summary>
            Load the Y-matrix and right-hand side vector for frequency domain analysis.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.DelayBehaviors.TransientBehavior">
            <summary>
            Time behavior for a <see cref="T:SpiceSharp.Components.VoltageDelay"/>.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DelayBehaviors.TransientBehavior.BranchPtr">
            <summary>
            Nodes
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DelayBehaviors.TransientBehavior.Signal">
            <summary>
            Gets the delayed signal.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.DelayBehaviors.TransientBehavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.DelayBehaviors.TransientBehavior"/> class.
            </summary>
            <param name="name">The identifier of the behavior.</param>
            <remarks>
            The identifier of the behavior should be the same as that of the entity creating it.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Components.DelayBehaviors.TransientBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.DelayBehaviors.TransientBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.DelayBehaviors.TransientBehavior.SpiceSharp#Behaviors#ITimeBehavior#InitializeStates">
            <summary>
            Calculates the state values from the current DC solution.
            </summary>
            <remarks>
            In this method, the initial value is calculated based on the operating point solution,
            and the result is stored in each respective <see cref="T:SpiceSharp.IntegrationMethods.StateDerivative" /> or <see cref="T:SpiceSharp.IntegrationMethods.StateHistory" />.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Components.DelayBehaviors.TransientBehavior.SpiceSharp#Behaviors#ITimeBehavior#Load">
            <summary>
            Perform time-dependent calculations.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.VoltageDelay">
            <summary>
            A component that will drive an output to a delayed input voltage.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Component" />
        </member>
        <member name="F:SpiceSharp.Components.VoltageDelay.VoltageDelayPinCount">
            <summary>
            The voltage delay pin count
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageDelay.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.VoltageDelay"/> class.
            </summary>
            <param name="name">The name of the entity.</param>
        </member>
        <member name="M:SpiceSharp.Components.VoltageDelay.#ctor(System.String,System.String,System.String,System.String,System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.VoltageDelay"/> class.
            </summary>
            <param name="name">The name of the voltage-controlled voltage source.</param>
            <param name="pos">The positive node.</param>
            <param name="neg">The negative node.</param>
            <param name="controlPos">The positive controlling node.</param>
            <param name="controlNeg">The negative controlling node.</param>
            <param name="delay">The delay.</param>
        </member>
        <member name="T:SpiceSharp.Components.Model">
            <summary>
            This class represents a (Spice) model.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Model.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Model"/> class.
            </summary>
            <param name="name">The name of the model.</param>
        </member>
        <member name="T:SpiceSharp.Components.ComponentNoise">
            <summary>
            Noise variables
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ComponentNoise.Noise">
            <summary>
            Gets the total output-referred noise density
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ComponentNoise.LogNoise">
            <summary>
            Gets the log of the total output-referred noise density
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ComponentNoise.TotalOutNoise">
            <summary>
            Gets the total integrated output-referred noise
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ComponentNoise.TotalInNoise">
            <summary>
            Gets the total integrated input-referred noise
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ComponentNoise.Generators">
            <summary>
            Gets all generators
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.ComponentNoise.#ctor(SpiceSharp.Components.NoiseSources.NoiseGenerator[])">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.ComponentNoise"/> class.
            </summary>
            <param name="generators">Names of the generators</param>
        </member>
        <member name="M:SpiceSharp.Components.ComponentNoise.#ctor(System.Collections.Generic.IEnumerable{SpiceSharp.Components.NoiseSources.NoiseGenerator})">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.ComponentNoise"/> class.
            </summary>
            <param name="generators"></param>
        </member>
        <member name="M:SpiceSharp.Components.ComponentNoise.Setup(System.Int32[])">
            <summary>
            Setup the component noise
            </summary>
            <param name="pins">The pin indices</param>
        </member>
        <member name="M:SpiceSharp.Components.ComponentNoise.Evaluate(SpiceSharp.Simulations.Noise)">
            <summary>
            Evaluate all noise source contributions
            </summary>
            <param name="simulation">Noise simulation</param>
        </member>
        <member name="T:SpiceSharp.Components.NoiseSources.NodeCollection">
            <summary>
            Collection of nodes (used for noise generators)
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.NoiseSources.NodeCollection._nodes">
            <summary>
            Nodes in the collection
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.NoiseSources.NodeCollection.Count">
            <summary>
            Gets number of nodes
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.NoiseSources.NodeCollection.Item(System.Int32)">
            <summary>
            Gets node
            </summary>
            <param name="index">Index</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Components.NoiseSources.NodeCollection.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.NoiseSources.NodeCollection"/> class.
            </summary>
            <param name="nodes">Nodes</param>
        </member>
        <member name="M:SpiceSharp.Components.NoiseSources.NodeCollection.GetEnumerator">
            <summary>
            Gets enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Components.NoiseSources.NodeCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiceSharp.Components.NoiseSources.NoiseGain">
            <summary>
            Noise generator with fixed gain
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.NoiseSources.NoiseGain.Gain">
            <summary>
            Gets or sets the gain for the noise generator
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.NoiseSources.NoiseGain.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.NoiseSources.NoiseGain"/> class.
            </summary>
            <param name="name">Name of the noise source</param>
            <param name="node1">Node 1</param>
            <param name="node2">Node 2</param>
        </member>
        <member name="M:SpiceSharp.Components.NoiseSources.NoiseGain.SetCoefficients(System.Double[])">
            <summary>
            Set the values for the noise source
            </summary>
            <param name="coefficients">Values</param>
        </member>
        <member name="M:SpiceSharp.Components.NoiseSources.NoiseGain.CalculateNoise(SpiceSharp.Simulations.Noise)">
            <summary>
            Calculate noise coefficient
            </summary>
            <param name="simulation">Noise simulation</param>
            <returns></returns>
        </member>
        <member name="T:SpiceSharp.Components.NoiseSources.NoiseGenerator">
            <summary>
            A class that represents a noise generator
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.NoiseSources.NoiseGenerator.Name">
            <summary>
            Gets the name of the noise generator
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.NoiseSources.NoiseGenerator.Noise">
            <summary>
            Gets the calculated noise density
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.NoiseSources.NoiseGenerator.LogNoise">
            <summary>
            Gets the log of the calculated noise density
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.NoiseSources.NoiseGenerator.TotalOutputNoise">
            <summary>
            Integrated output noise
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.NoiseSources.NoiseGenerator.TotalInputNoise">
            <summary>
            Integrated input noise
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.NoiseSources.NoiseGenerator.Nodes">
            <summary>
            Gets the nodes this noise generator is connected to
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.NoiseSources.NoiseGenerator._pins">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.NoiseSources.NoiseGenerator.#ctor(System.String,System.Int32[])">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.NoiseSources.NoiseGenerator"/> class.
            </summary>
            <param name="name">Name of the noise source</param>
            <param name="pins">Pins</param>
        </member>
        <member name="M:SpiceSharp.Components.NoiseSources.NoiseGenerator.Setup(System.Int32[])">
            <summary>
            Connect the noise generator in the circuit
            </summary>
            <param name="nodes">Nodes</param>
        </member>
        <member name="M:SpiceSharp.Components.NoiseSources.NoiseGenerator.Unsetup">
            <summary>
            Unsetup the noise generator.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.NoiseSources.NoiseGenerator.SetCoefficients(System.Double[])">
            <summary>
            Set the values for evaluating the noise generator
            </summary>
            <param name="coefficients">Coefficients</param>
        </member>
        <member name="M:SpiceSharp.Components.NoiseSources.NoiseGenerator.Evaluate(SpiceSharp.Simulations.Noise)">
            <summary>
            Evaluate
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.NoiseSources.NoiseGenerator.CalculateNoise(SpiceSharp.Simulations.Noise)">
            <summary>
            Calculate noise coefficient
            </summary>
            <param name="simulation">Noise simulation</param>
            <returns></returns>
        </member>
        <member name="T:SpiceSharp.Components.NoiseSources.NoiseGeneratorCollection">
            <summary>
            Collection of noise generators
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.NoiseSources.NoiseGeneratorCollection._generators">
            <summary>
            Generators
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.NoiseSources.NoiseGeneratorCollection.Item(System.Int32)">
            <summary>
            Gets a noise generator
            </summary>
            <param name="index">Index</param>
            <returns>Noise source</returns>
        </member>
        <member name="P:SpiceSharp.Components.NoiseSources.NoiseGeneratorCollection.Count">
            <summary>
            Gets the number of noise generators
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.NoiseSources.NoiseGeneratorCollection.#ctor(System.Collections.Generic.IEnumerable{SpiceSharp.Components.NoiseSources.NoiseGenerator})">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.NoiseSources.NoiseGeneratorCollection"/> class.
            </summary>
            <param name="generators">Generators</param>
        </member>
        <member name="M:SpiceSharp.Components.NoiseSources.NoiseGeneratorCollection.GetEnumerator">
            <summary>
            Gets enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Components.NoiseSources.NoiseGeneratorCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiceSharp.Components.NoiseSources.NoiseShot">
            <summary>
            Shotnoise generator
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.NoiseSources.NoiseShot.Current">
            <summary>
            Gets or sets the gain of the shot noise
            The noise will be 2 * q * Gain
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.NoiseSources.NoiseShot.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.NoiseSources.NoiseShot"/> class.
            </summary>
            <param name="name">Name of the noise source</param>
            <param name="node1">Node 1</param>
            <param name="node2">Node 2</param>
        </member>
        <member name="M:SpiceSharp.Components.NoiseSources.NoiseShot.SetCoefficients(System.Double[])">
            <summary>
            Set the parameters of the shot noise
            </summary>
            <param name="coefficients">Values</param>
        </member>
        <member name="M:SpiceSharp.Components.NoiseSources.NoiseShot.CalculateNoise(SpiceSharp.Simulations.Noise)">
            <summary>
            Calculate the noise contribution
            </summary>
            <param name="simulation">Noise simulation</param>
            <returns></returns>
        </member>
        <member name="T:SpiceSharp.Components.NoiseSources.NoiseThermal">
            <summary>
            Thermal noise generator
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.NoiseSources.NoiseThermal.Node2">
            <summary>
            The second node of the noise source.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.NoiseSources.NoiseThermal.Conductance">
            <summary>
            Gets or sets the gain of the thermal noise
            The noise is 4 * k * T * G
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.NoiseSources.NoiseThermal.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.NoiseSources.NoiseThermal"/> class.
            </summary>
            <param name="name">Name of the noise source</param>
            <param name="node1">Node 1</param>
            <param name="node2">Node 2</param>
        </member>
        <member name="M:SpiceSharp.Components.NoiseSources.NoiseThermal.SetCoefficients(System.Double[])">
            <summary>
            Set the parameters for the thermal noise
            </summary>
            <param name="coefficients">Values</param>
        </member>
        <member name="M:SpiceSharp.Components.NoiseSources.NoiseThermal.CalculateNoise(SpiceSharp.Simulations.Noise)">
            <summary>
            Calculate the noise quantity
            </summary>
            <param name="simulation">Noise simulation</param>
            <returns></returns>
        </member>
        <member name="T:SpiceSharp.Components.CapacitorBehaviors.BaseParameters">
            <summary>
            Base parameters for a capacitor
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.BaseParameters.Capacitance">
            <summary>
            Gets the capacitance parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.BaseParameters.InitialCondition">
            <summary>
            Gets the initial voltage parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.BaseParameters.Width">
            <summary>
            Gets the width parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.BaseParameters.Length">
            <summary>
            Gets the length parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.BaseParameters.TemperatureCelsius">
            <summary>
            Gets or sets the temperature in degrees Celsius.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.BaseParameters.Temperature">
            <summary>
            Gets the temperature parameter (in degrees Kelvin).
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CapacitorBehaviors.BaseParameters.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CapacitorBehaviors.BaseParameters"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CapacitorBehaviors.BaseParameters.#ctor(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CapacitorBehaviors.BaseParameters"/> class.
            </summary>
            <param name="cap">Capacitance</param>
        </member>
        <member name="T:SpiceSharp.Components.CapacitorBehaviors.FrequencyBehavior">
            <summary>
            Frequency behavior for a <see cref="T:SpiceSharp.Components.Capacitor"/>.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.FrequencyBehavior.PosPosPtr">
            <summary>
            Gets the (positive, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.FrequencyBehavior.NegNegPtr">
            <summary>
            Gets the (negative, negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.FrequencyBehavior.PosNegPtr">
            <summary>
            Gets the (positive, negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.FrequencyBehavior.NegPosPtr">
            <summary>
            Gets the (negative, positive) element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CapacitorBehaviors.FrequencyBehavior.GetComplexVoltage">
            <summary>
            Gets the voltage.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CapacitorBehaviors.FrequencyBehavior.GetComplexCurrent">
            <summary>
            Gets the current.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CapacitorBehaviors.FrequencyBehavior.GetComplexPower">
            <summary>
            Gets the power.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CapacitorBehaviors.FrequencyBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CapacitorBehaviors.FrequencyBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.CapacitorBehaviors.FrequencyBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.CapacitorBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <summary>
            Initializes the parameters.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CapacitorBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <summary>
            Execute behavior for AC analysis
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.CapacitorBehaviors.ModelBaseParameters">
            <summary>
            Parameters for the capacitor model
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.ModelBaseParameters.JunctionCap">
            <summary>
            Gets the bottom junction capacitance parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.ModelBaseParameters.JunctionCapSidewall">
            <summary>
            Gets the junction sidewall capacitance parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.ModelBaseParameters.DefaultWidth">
            <summary>
            Gets the default width parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.ModelBaseParameters.Narrow">
            <summary>
            Gets the width correction factor parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.ModelBaseParameters.TemperatureCoefficient1">
            <summary>
            Gets the first-order temperature coefficient parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.ModelBaseParameters.TemperatureCoefficient2">
            <summary>
            Gets the second-order temperature coefficient parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.ModelBaseParameters.NominalTemperatureCelsius">
            <summary>
            Gets or sets the nominal temperature in degrees Celsius.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.ModelBaseParameters.NominalTemperature">
            <summary>
            Gets the nominal temperature parameter in degrees Kelvin.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.CapacitorBehaviors.TemperatureBehavior">
            <summary>
            Temperature behavior for a <see cref="T:SpiceSharp.Components.Capacitor" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.TemperatureBehavior.ModelParameters">
            <summary>
            Gets the model parameters.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.TemperatureBehavior.BaseParameters">
            <summary>
            Gets the base parameters.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.TemperatureBehavior.Capacitance">
            <summary>
            Gets the capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.TemperatureBehavior.PosNode">
            <summary>
            The positive node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.TemperatureBehavior.NegNode">
            <summary>
            The negative node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.TemperatureBehavior.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CapacitorBehaviors.TemperatureBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CapacitorBehaviors.TemperatureBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.CapacitorBehaviors.TemperatureBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">Data provider</param>
        </member>
        <member name="M:SpiceSharp.Components.CapacitorBehaviors.TemperatureBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CapacitorBehaviors.TemperatureBehavior.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <summary>
            Do temperature-dependent calculations
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.CapacitorBehaviors.TransientBehavior">
            <summary>
            Transient behavior for a <see cref="T:SpiceSharp.Components.Capacitor" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.CapacitorBehaviors.TemperatureBehavior" />
            <seealso cref="T:SpiceSharp.Behaviors.ITimeBehavior" />
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.TransientBehavior.Current">
            <summary>
            Gets the current through the capacitor.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CapacitorBehaviors.TransientBehavior.GetPower">
            <summary>
            Gets the instantaneous power dissipated by the capacitor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Components.CapacitorBehaviors.TransientBehavior.GetVoltage">
            <summary>
            Gets the voltage across the capacitor.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.TransientBehavior.PosPosPtr">
            <summary>
            Gets the (positive, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.TransientBehavior.NegNegPtr">
            <summary>
            Gets the (negative, negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.TransientBehavior.PosNegPtr">
            <summary>
            Gets the (positive, negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.TransientBehavior.NegPosPtr">
            <summary>
            Gets the (negative, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.TransientBehavior.PosPtr">
            <summary>
            Gets the positive RHS element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.TransientBehavior.NegPtr">
            <summary>
            Gets the negative RHS element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CapacitorBehaviors.TransientBehavior.QCap">
            <summary>
            Gets the state tracking the charge.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CapacitorBehaviors.TransientBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CapacitorBehaviors.TransientBehavior"/> class.
            </summary>
            <param name="name">Name of the behavior</param>
        </member>
        <member name="M:SpiceSharp.Components.CapacitorBehaviors.TransientBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.CapacitorBehaviors.TransientBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CapacitorBehaviors.TransientBehavior.SpiceSharp#Behaviors#ITimeBehavior#InitializeStates">
            <summary>
            Calculate the state for DC
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CapacitorBehaviors.TransientBehavior.SpiceSharp#Behaviors#ITimeBehavior#Load">
            <summary>
            Execute behavior for DC and Transient analysis
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.Capacitor">
            <summary>
            A capacitor
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Capacitor.CapacitorPinCount">
            <summary>
            Constants
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Capacitor.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.Capacitor"/> class.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:SpiceSharp.Components.Capacitor.#ctor(System.String,System.String,System.String,System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.Capacitor"/> class.
            </summary>
            <param name="name">The name of the capacitor</param>
            <param name="pos">The positive node</param>
            <param name="neg">The negative node</param>
            <param name="cap">The capacitance</param>
        </member>
        <member name="T:SpiceSharp.Components.CapacitorModel">
            <summary>
            A model for a semiconductor <see cref="T:SpiceSharp.Components.Capacitor"/>
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CapacitorModel.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CapacitorModel"/> class.
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:SpiceSharp.Components.InductorBehaviors.BaseParameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.Inductor"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.InductorBehaviors.BaseParameters.Inductance">
            <summary>
            Gets the inductance parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.InductorBehaviors.BaseParameters.InitialCondition">
            <summary>
            Gets the initial current parameter.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.InductorBehaviors.BaseParameters.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.InductorBehaviors.BaseParameters"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.InductorBehaviors.BaseParameters.#ctor(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.InductorBehaviors.BaseParameters"/> class.
            </summary>
            <param name="inductance">Inductor</param>
        </member>
        <member name="T:SpiceSharp.Components.InductorBehaviors.BiasingBehavior">
            <summary>
            DC biasing behavior for a <see cref="T:SpiceSharp.Components.Inductor"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.InductorBehaviors.BiasingBehavior.BaseParameters">
            <summary>
            Necessary behaviors and parameters
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.InductorBehaviors.BiasingBehavior.BranchEq">
            <summary>
            Gets the branch equation index.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.InductorBehaviors.BiasingBehavior.GetCurrent">
            <summary>
            Gets the current.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.InductorBehaviors.BiasingBehavior.GetVoltage">
            <summary>
            Gets the voltage.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.InductorBehaviors.BiasingBehavior.GetPower">
            <summary>
            Gets the power dissipated by the inductor.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.InductorBehaviors.BiasingBehavior.PosNode">
            <summary>
            Gets the positive node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.InductorBehaviors.BiasingBehavior.NegNode">
            <summary>
            Gets the negative node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.InductorBehaviors.BiasingBehavior.PosBranchPtr">
            <summary>
            Gets the (positive, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.InductorBehaviors.BiasingBehavior.NegBranchPtr">
            <summary>
            Gets the (negative, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.InductorBehaviors.BiasingBehavior.BranchNegPtr">
            <summary>
            Gets the (branch, negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.InductorBehaviors.BiasingBehavior.BranchPosPtr">
            <summary>
            Gets the (branch, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.InductorBehaviors.BiasingBehavior.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.InductorBehaviors.BiasingBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.InductorBehaviors.BiasingBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.InductorBehaviors.BiasingBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The provider.</param>
        </member>
        <member name="M:SpiceSharp.Components.InductorBehaviors.BiasingBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.InductorBehaviors.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <summary>
            Execute behavior
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.InductorBehaviors.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#IsConvergent">
            <summary>
            Tests convergence at the device-level.
            </summary>
            <returns>
            <c>true</c> if the device determines the solution converges; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.InductorBehaviors.FrequencyBehavior">
            <summary>
            Frequency behavior for <see cref="T:SpiceSharp.Components.Inductor"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.InductorBehaviors.FrequencyBehavior.CPosBranchPtr">
            <summary>
            Gets the (positive, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.InductorBehaviors.FrequencyBehavior.CNegBranchPtr">
            <summary>
            Gets the (negative, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.InductorBehaviors.FrequencyBehavior.CBranchNegPtr">
            <summary>
            Gets the (branch, negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.InductorBehaviors.FrequencyBehavior.CBranchPosPtr">
            <summary>
            Gets the (branch, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.InductorBehaviors.FrequencyBehavior.CBranchBranchPtr">
            <summary>
            Gets the (branch, branch) element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.InductorBehaviors.FrequencyBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.InductorBehaviors.FrequencyBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.InductorBehaviors.FrequencyBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">Data provider</param>
        </member>
        <member name="M:SpiceSharp.Components.InductorBehaviors.FrequencyBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.InductorBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <summary>
            Initialize the small-signal parameters.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.InductorBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <summary>
            Load the Y-matrix and Rhs-vector.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.InductorBehaviors.TransientBehavior">
            <summary>
            Transient behavior for an <see cref="T:SpiceSharp.Components.Inductor" />.
            </summary>
        </member>
        <member name="E:SpiceSharp.Components.InductorBehaviors.TransientBehavior.UpdateFlux">
            <summary>
            An event called when the flux can be updated
            Can be used by mutual inductances
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.InductorBehaviors.TransientBehavior.BranchBranchPtr">
            <summary>
            Gets the (branch, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.InductorBehaviors.TransientBehavior.BranchPtr">
            <summary>
            Gets the branch RHS element.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.InductorBehaviors.TransientBehavior._flux">
            <summary>
            The state tracking the flux.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.InductorBehaviors.TransientBehavior.Flux">
            <summary>
            Gets the flux of the inductor.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.InductorBehaviors.TransientBehavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.InductorBehaviors.TransientBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.InductorBehaviors.TransientBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">Data provider</param>
        </member>
        <member name="M:SpiceSharp.Components.InductorBehaviors.TransientBehavior.SpiceSharp#Behaviors#ITimeBehavior#InitializeStates">
            <summary>
            Calculate DC states
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.InductorBehaviors.TransientBehavior.SpiceSharp#Behaviors#ITimeBehavior#Load">
            <summary>
            Execute behaviour
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.InductorBehaviors.UpdateFluxEventArgs">
            <summary>
            Arguments used to modify flux through an <see cref="T:SpiceSharp.Components.Inductor"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.InductorBehaviors.UpdateFluxEventArgs.Inductance">
            <summary>
            Inductance of the inductor
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.InductorBehaviors.UpdateFluxEventArgs.OriginalFlux">
            <summary>
            Original flux through the inductor
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.InductorBehaviors.UpdateFluxEventArgs.Current">
            <summary>
            Original current through the inductor
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.InductorBehaviors.UpdateFluxEventArgs.Flux">
            <summary>
            New flux through the inductor (initially set to the original flux)
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.InductorBehaviors.UpdateFluxEventArgs.State">
            <summary>
            Gets the state currently being operated on
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.InductorBehaviors.UpdateFluxEventArgs.#ctor(System.Double,System.Double,SpiceSharp.IntegrationMethods.StateDerivative,SpiceSharp.Simulations.BaseSimulationState)">
            <summary>
            Create a new instance of the <see cref="T:SpiceSharp.Components.InductorBehaviors.UpdateFluxEventArgs"/> class.
            </summary>
            <param name="inductance">Inductor</param>
            <param name="current">Current</param>
            <param name="flux">Flux</param>
            <param name="state">State</param>
        </member>
        <member name="T:SpiceSharp.Components.Inductor">
            <summary>
            An inductor
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Inductor.InductorPinCount">
            <summary>
            Constants
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Inductor.#ctor(System.String)">
            <summary>
            Create a new instance of the <see cref="T:SpiceSharp.Components.Inductor"/> class.
            </summary>
            <param name="name">The name of the inductor</param>
        </member>
        <member name="M:SpiceSharp.Components.Inductor.#ctor(System.String,System.String,System.String,System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.Inductor"/> class.
            </summary>
            <param name="name">The name of the inductor</param>
            <param name="pos">The positive node</param>
            <param name="neg">The negative node</param>
            <param name="inductance">The inductance</param>
        </member>
        <member name="T:SpiceSharp.Components.MutualInductanceBehaviors.BaseParameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.MutualInductance"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MutualInductanceBehaviors.BaseParameters.Coupling">
            <summary>
            Parameters
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductanceBehaviors.BaseParameters.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.MutualInductanceBehaviors.BaseParameters"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductanceBehaviors.BaseParameters.#ctor(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.MutualInductanceBehaviors.BaseParameters"/> class.
            </summary>
            <param name="coupling">Mutual inductance</param>
        </member>
        <member name="T:SpiceSharp.Components.MutualInductanceBehaviors.FrequencyBehavior">
            <summary>
            AC behavior for <see cref="T:SpiceSharp.Components.MutualInductance"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MutualInductanceBehaviors.FrequencyBehavior.Bias1">
            <summary>
            Gets the <see cref="T:SpiceSharp.Components.InductorBehaviors.BiasingBehavior"/> of the primary inductor.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MutualInductanceBehaviors.FrequencyBehavior.Bias2">
            <summary>
            Gets the <see cref="T:SpiceSharp.Components.InductorBehaviors.BiasingBehavior"/> of the secondary inductor.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MutualInductanceBehaviors.FrequencyBehavior.Branch1Branch2Ptr">
            <summary>
            Gets the (primary, secondary) branch element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MutualInductanceBehaviors.FrequencyBehavior.Branch2Branch1Ptr">
            <summary>
            Gets the (secondary, primary) branch element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductanceBehaviors.FrequencyBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.MutualInductanceBehaviors.FrequencyBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductanceBehaviors.FrequencyBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">Data provider</param>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductanceBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <summary>
            Initializes the parameters.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductanceBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <summary>
            Execute behavior for AC analysis
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.MutualInductanceBehaviors.TemperatureBehavior">
            <summary>
            Temperature-dependent calculations for a <see cref="T:SpiceSharp.Components.MutualInductance"/>.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MutualInductanceBehaviors.TemperatureBehavior.Factor">
            <summary>
            Gets the coupling factor.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MutualInductanceBehaviors.TemperatureBehavior.BaseParameters">
            <summary>
            Gets the base parameters.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MutualInductanceBehaviors.TemperatureBehavior.BaseParameters1">
            <summary>
            Gets the base parameters of inductor 1.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MutualInductanceBehaviors.TemperatureBehavior.BaseParameters2">
            <summary>
            Gets the base parameters of inductor 2.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductanceBehaviors.TemperatureBehavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.MutualInductanceBehaviors.TemperatureBehavior"/> class.
            </summary>
            <param name="name">The name of the behavior.</param>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductanceBehaviors.TemperatureBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior. for the specified simulation.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The provider.</param>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductanceBehaviors.TemperatureBehavior.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <summary>
            Perform temperature-dependent calculations.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.MutualInductanceBehaviors.TransientBehavior">
            <summary>
            Transient behavior for a <see cref="T:SpiceSharp.Components.MutualInductance"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MutualInductanceBehaviors.TransientBehavior.Load1">
            <summary>
            Gets the transient behavior of the primary inductor.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MutualInductanceBehaviors.TransientBehavior.Load2">
            <summary>
            Gets the transient behavior of secondary inductor.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MutualInductanceBehaviors.TransientBehavior.Branch1Branch2">
            <summary>
            Gets the (primary, secondary) branch element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MutualInductanceBehaviors.TransientBehavior.Branch2Branch1">
            <summary>
            Gets the (secondary, primary) branch element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MutualInductanceBehaviors.TransientBehavior.Conductance">
            <summary>
            Gets the conductance.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductanceBehaviors.TransientBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.MutualInductanceBehaviors.TransientBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductanceBehaviors.TransientBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">Data provider</param>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductanceBehaviors.TransientBehavior.Unbind">
            <summary>
            Unsetup the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductanceBehaviors.TransientBehavior.UpdateFlux2(System.Object,SpiceSharp.Components.InductorBehaviors.UpdateFluxEventArgs)">
            <summary>
            Update the flux through the secondary inductor.
            </summary>
            <param name="sender">Sender</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductanceBehaviors.TransientBehavior.UpdateFlux1(System.Object,SpiceSharp.Components.InductorBehaviors.UpdateFluxEventArgs)">
            <summary>
            Update the flux through the primary inductor.
            </summary>
            <param name="sender">Sender</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductanceBehaviors.TransientBehavior.SpiceSharp#Behaviors#ITimeBehavior#InitializeStates">
            <summary>
            Initialize states.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductanceBehaviors.TransientBehavior.SpiceSharp#Behaviors#ITimeBehavior#Load">
            <summary>
            Load the Y-matrix and Rhs-vector.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.MutualInductance">
            <summary>
            A mutual inductance
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MutualInductance.InductorName1">
            <summary>
            Gets or sets the name of the primary inductor.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MutualInductance.InductorName2">
            <summary>
            Gets or sets the name of the secondary inductor.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductance.#ctor(System.String)">
            <summary>
            Create a new instance of the <see cref="T:SpiceSharp.Components.MutualInductance"/> class.
            </summary>
            <param name="name">The name of the mutual inductance</param>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductance.#ctor(System.String,System.String,System.String,System.Double)">
            <summary>
            Create a new instance of the <see cref="T:SpiceSharp.Components.MutualInductance"/> class.
            </summary>
            <param name="name">Name</param>
            <param name="inductorName1">Inductor 1</param>
            <param name="inductorName2">Inductor 2</param>
            <param name="coupling">Mutual inductance</param>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductance.CreateBehaviors(System.Type[],SpiceSharp.Simulations.Simulation,SpiceSharp.Circuits.EntityCollection)">
            <summary>
            Create the behaviors.
            </summary>
            <param name="types">The behavior types.</param>
            <param name="simulation">The simulation.</param>
            <param name="entities">The entities.</param>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductance.BuildBindingContext(SpiceSharp.Simulations.Simulation)">
            <summary>
            Build the binding context.
            </summary>
            <param name="simulation">The simulation.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Components.MutualInductance.Clone(SpiceSharp.Circuits.InstanceData)">
            <summary>
            Clone the mutual inductance
            </summary>
            <param name="data">Instance data.</param>
            <returns></returns>
        </member>
        <member name="T:SpiceSharp.Components.ResistorBehaviors.BaseParameters">
            <summary>
            Base set of parameters for a <see cref="T:SpiceSharp.Components.Resistor"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ResistorBehaviors.BaseParameters.Resistance">
            <summary>
            Gets the resistance parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ResistorBehaviors.BaseParameters.TemperatureCelsius">
            <summary>
            Gets or sets the temperature in degrees Celsius.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ResistorBehaviors.BaseParameters.Temperature">
            <summary>
            Gets the temperature parameter in degrees Kelvin.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ResistorBehaviors.BaseParameters.Width">
            <summary>
            Gets the width parameter of the resistor.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ResistorBehaviors.BaseParameters.Length">
            <summary>
            Gets the length parameter of the resistor.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.ResistorBehaviors.BaseParameters.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.ResistorBehaviors.BaseParameters"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.ResistorBehaviors.BaseParameters.#ctor(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.ResistorBehaviors.BaseParameters"/> class.
            </summary>
            <param name="res">Resistor</param>
        </member>
        <member name="T:SpiceSharp.Components.ResistorBehaviors.BiasingBehavior">
            <summary>
            General behavior for <see cref="T:SpiceSharp.Components.Resistor"/>
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.ResistorBehaviors.BiasingBehavior.GetVoltage">
            <summary>
            Gets the voltage across the resistor.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.ResistorBehaviors.BiasingBehavior.GetCurrent">
            <summary>
            Gets the current through the resistor.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.ResistorBehaviors.BiasingBehavior.GetPower">
            <summary>
            Gets the power dissipated by the resistor.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ResistorBehaviors.BiasingBehavior.PosNode">
            <summary>
            Gets the positive node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ResistorBehaviors.BiasingBehavior.NegNode">
            <summary>
            Gets the negative node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ResistorBehaviors.BiasingBehavior.PosPosPtr">
            <summary>
            Gets the (positive, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ResistorBehaviors.BiasingBehavior.NegNegPtr">
            <summary>
            Gets the (negative, negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ResistorBehaviors.BiasingBehavior.PosNegPtr">
            <summary>
            Gets the (positive, negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ResistorBehaviors.BiasingBehavior.NegPosPtr">
            <summary>
            Gets the (negative, positive) element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.ResistorBehaviors.BiasingBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.ResistorBehaviors.BiasingBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.ResistorBehaviors.BiasingBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.ResistorBehaviors.BiasingBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.ResistorBehaviors.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <summary>
            Load the Y-matrix and Rhs-vector.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.ResistorBehaviors.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#IsConvergent">
            <summary>
            Tests convergence at the device-level.
            </summary>
            <returns>
            <c>true</c> if the device determines the solution converges; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.ResistorBehaviors.FrequencyBehavior">
            <summary>
            AC behavior for <see cref="T:SpiceSharp.Components.Resistor"/>
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.ResistorBehaviors.FrequencyBehavior.GetComplexVoltage">
            <summary>
            Gets the (complex) voltage across the resistor.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.ResistorBehaviors.FrequencyBehavior.GetComplexCurrent">
            <summary>
            Gets the (complex) current through the resistor.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.ResistorBehaviors.FrequencyBehavior.GetComplexPower">
            <summary>
            Gets the (complex) power dissipated by the resistor.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ResistorBehaviors.FrequencyBehavior.CPosPosPtr">
            <summary>
            Gets the (positive, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ResistorBehaviors.FrequencyBehavior.CNegNegPtr">
            <summary>
            Gets the (negative, negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ResistorBehaviors.FrequencyBehavior.CPosNegPtr">
            <summary>
            Gets the (positive, negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ResistorBehaviors.FrequencyBehavior.CNegPosPtr">
            <summary>
            Gets the (negative, positive) element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.ResistorBehaviors.FrequencyBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.ResistorBehaviors.FrequencyBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.ResistorBehaviors.FrequencyBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.ResistorBehaviors.FrequencyBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.ResistorBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <summary>
            Initialize the small-signal parameters.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.ResistorBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <summary>
            Load the Y-matrix and Rhs-vector.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.ResistorBehaviors.ModelBaseParameters">
            <summary>
            Parameters for a <see cref="T:SpiceSharp.Components.ResistorModel"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ResistorBehaviors.ModelBaseParameters.NominalTemperatureCelsius">
            <summary>
            Gets or sets the nominal temperature in degrees Celsius.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ResistorBehaviors.ModelBaseParameters.NominalTemperature">
            <summary>
            Gets the nominal temperature parameter in degrees Kelvin.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ResistorBehaviors.ModelBaseParameters.TemperatureCoefficient1">
            <summary>
            Gets the first-order temperature coefficient parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ResistorBehaviors.ModelBaseParameters.TemperatureCoefficient2">
            <summary>
            Gets the second-order temperature coefficient parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ResistorBehaviors.ModelBaseParameters.ExponentialCoefficient">
            <summary>
            Gets the exponential temperature coefficient parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ResistorBehaviors.ModelBaseParameters.SheetResistance">
            <summary>
            Gets the sheet resistance parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ResistorBehaviors.ModelBaseParameters.DefaultWidth">
            <summary>
            Gets the default width parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ResistorBehaviors.ModelBaseParameters.Narrow">
            <summary>
            Gets the narrowing coefficient parameter.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.ResistorBehaviors.NoiseBehavior">
            <summary>
            Noise behavior for <see cref="T:SpiceSharp.Components.Resistor"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ResistorBehaviors.NoiseBehavior.ResistorNoise">
            <summary>
            Gets resistor noise sources
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.ResistorBehaviors.NoiseBehavior.#ctor(System.String)">
            <summary>
            Create a new instance of the <see cref="T:SpiceSharp.Components.ResistorBehaviors.NoiseBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.ResistorBehaviors.NoiseBehavior.SpiceSharp#Behaviors#INoiseBehavior#ConnectNoise">
            <summary>
            Connect the noise
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.ResistorBehaviors.NoiseBehavior.SpiceSharp#Behaviors#INoiseBehavior#Noise">
            <summary>
            Noise calculations
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.ResistorBehaviors.TemperatureBehavior">
            <summary>
            Temperature behavior for a <see cref="T:SpiceSharp.Components.Resistor"/>
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.ResistorBehaviors.TemperatureBehavior.MinimumResistance">
            <summary>
            The minimum resistance for any resistor.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ResistorBehaviors.TemperatureBehavior.ModelParameters">
            <summary>
            Gets the model parameters.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ResistorBehaviors.TemperatureBehavior.BaseParameters">
            <summary>
            Gets the base parameters.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ResistorBehaviors.TemperatureBehavior.Conductance">
            <summary>
            Gets the default conductance for this model
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.ResistorBehaviors.TemperatureBehavior.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.ResistorBehaviors.TemperatureBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.ResistorBehaviors.TemperatureBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.ResistorBehaviors.TemperatureBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation</param>
            <param name="context">The setup data provider</param>
        </member>
        <member name="M:SpiceSharp.Components.ResistorBehaviors.TemperatureBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.ResistorBehaviors.TemperatureBehavior.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <summary>
            Execute behavior
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.Resistor">
            <summary>
            A resistor
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Resistor.ResistorPinCount">
            <summary>
            Constants
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Resistor.#ctor(System.String)">
            <summary>
            Create a new instance of the <see cref="T:SpiceSharp.Components.Resistor"/> class.
            </summary>
            <param name="name">The name of the resistor</param>
        </member>
        <member name="M:SpiceSharp.Components.Resistor.#ctor(System.String,System.String,System.String,System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.Resistor"/> class.
            </summary>
            <param name="name">The name of the resistor</param>
            <param name="pos">The positive node</param>
            <param name="neg">The negative node</param>
            <param name="res">The resistance</param>
        </member>
        <member name="T:SpiceSharp.Components.ResistorModel">
            <summary>
            A model for semiconductor <see cref="T:SpiceSharp.Components.Resistor"/>
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.ResistorModel.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.ResistorModel"/> class.
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:SpiceSharp.Components.BipolarBehaviors.BaseParameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.BipolarJunctionTransistor"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BaseParameters.TemperatureCelsius">
            <summary>
            Gets or sets the temperature in degrees Celsius.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BaseParameters.Temperature">
            <summary>
            Gets the temperature parameter in degrees Kelvin.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BaseParameters.Area">
            <summary>
            Gets the area parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BaseParameters.Off">
            <summary>
            Gets or sets whether or not the device is initially off (non-conducting).
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BaseParameters.InitialVoltageBe">
            <summary>
            Gets the initial base-emitter voltage parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BaseParameters.InitialVoltageCe">
            <summary>
            Gets the initial collector-emitter voltage parameter.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.BaseParameters.SetIc(System.Double[])">
            <summary>
            Set initial conditions of the device.
            </summary>
            <param name="value">The initial voltages (Vce, Vbe) or just (Vbe).</param>
        </member>
        <member name="T:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior">
            <summary>
            DC biasing behavior for a <see cref="T:SpiceSharp.Components.BipolarJunctionTransistor" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.BaseConfiguration">
            <summary>
            Gets the base configuration of the simulation.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.VoltageBe">
            <summary>
            Gets the base-emitter voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.VoltageBc">
            <summary>
            Gets the base-collector voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.CollectorCurrent">
            <summary>
            Gets or modifies the collector current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.BaseCurrent">
            <summary>
            Gets or modifies the base current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.ConductancePi">
            <summary>
            Gets or sets the small signal input conductance - pi.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.ConductanceMu">
            <summary>
            Gets or sets the small signal conductance mu.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.Transconductance">
            <summary>
            Gets or sets the transconductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.OutputConductance">
            <summary>
            Gets or sets the output conductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.ConductanceX">
            <summary>
            Gets or sets the conductance - X.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.GetPower(SpiceSharp.Simulations.BaseSimulationState)">
            <summary>
            Gets the dissipated power.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.CollectorPrimeNode">
            <summary>
            Gets the collector prime node index.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.BasePrimeNode">
            <summary>
            Gets the base prime node index.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.EmitterPrimeNode">
            <summary>
            Gets the emitter prime node index.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.CollectorNode">
            <summary>
            Gets the collect node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.BaseNode">
            <summary>
            Gets the base node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.EmitterNode">
            <summary>
            Gets the emitter node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.SubstrateNode">
            <summary>
            Gets the substrate node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.CollectorCollectorPrimePtr">
            <summary>Gets the (external collector, collector) element.</summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.BaseBasePrimePtr">
            <summary>
            Gets the (external base, base) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.EmitterEmitterPrimePtr">
            <summary>
            Gets the (external emitter, emitter) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.CollectorPrimeCollectorPtr">
            <summary>
            Gets the (collector, external collector) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.CollectorPrimeBasePrimePtr">
            <summary>
            Gets the (collector, base) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.CollectorPrimeEmitterPrimePtr">
            <summary>
            Gets the (collector, emitter) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.BasePrimeBasePtr">
            <summary>
            Gets the (base, external base) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.BasePrimeCollectorPrimePtr">
            <summary>
            Gets the (base, collector) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.BasePrimeEmitterPrimePtr">
            <summary>
            Gets the (base, emitter) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.EmitterPrimeEmitterPtr">
            <summary>
            Gets the (emitter, external emitter) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.EmitterPrimeCollectorPrimePtr">
            <summary>
            Gets the (emitter, collector) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.EmitterPrimeBasePrimePtr">
            <summary>
            Gets the (emitter, base) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.CollectorCollectorPtr">
            <summary>
            Gets the external (collector, collector) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.BaseBasePtr">
            <summary>
            Gets the external (base, base) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.EmitterEmitterPtr">
            <summary>
            Gets the external (emitter, emitter) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.CollectorPrimeCollectorPrimePtr">
            <summary>
            Gets the (collector, collector) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.BasePrimeBasePrimePtr">
            <summary>
            Gets the (base, base) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.EmitterPrimeEmitterPrimePtr">
            <summary>
            Gets the (emitter, emitter) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.SubstrateSubstratePtr">
            <summary>
            Gets the (substrate, substrate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.CollectorPrimeSubstratePtr">
            <summary>
            Gets the (collector, substrate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.SubstrateCollectorPrimePtr">
            <summary>
            Gets the (substrate, collector) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.BaseCollectorPrimePtr">
            <summary>
            TODO: Check if this is right.
            Gets the (external base, collector) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.CollectorPrimeBasePtr">
            <summary>
            TODO: Check if this is right.
            Gets the (collector, external base) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.CollectorPrimePtr">
            <summary>
            Gets the collector RHS element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.BasePrimePtr">
            <summary>
            Gets the base RHS element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.EmitterPrimePtr">
            <summary>
            Gets the Emitter RHS element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.CurrentBe">
            <summary>
            Gets or modifies the base-emitter current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.CurrentBc">
            <summary>
            Gets or modifies the base-collector current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.CondBe">
            <summary>
            Gets or modifies the base-emitter conductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.CondBc">
            <summary>
            Gets or modifies the base-collector conductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.BaseCharge">
            <summary>
            Gets or sets the base charge.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.Dqbdvc">
            <summary>
            TODO: Try to factor out this part of the biasing behavior.
            Gets or sets the charge to collector voltage derivative.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.Dqbdve">
            <summary>
            TODO: Try to factor our this part of the biasing behavior.
            Gets or sets the charge to emitter voltage derivative.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <summary>
            Execute behavior
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.ExcessPhaseCalculation(System.Double@,System.Double@,System.Double@)">
            <summary>
            Excess phase calculation.
            </summary>
            <param name="cc">The collector current.</param>
            <param name="cex">The excess phase current.</param>
            <param name="gex">The excess phase conductance.</param>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.Initialize(System.Double@,System.Double@)">
            <summary>
            Initializes the voltages for the current iteration.
            </summary>
            <param name="vbe">The VBE.</param>
            <param name="vbc">The VBC.</param>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#IsConvergent">
            <summary>
            Check if the BJT is convergent
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiceSharp.Components.BipolarBehaviors.DynamicParameterBehavior">
            <summary>
            Common dynamic (time-dependent) parameter logic for a <see cref="T:SpiceSharp.Components.BipolarJunctionTransistor" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.BipolarBehaviors.BiasingBehavior" />
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.DynamicParameterBehavior.CapBe">
            <summary>
            Gets the internal base-emitter capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.DynamicParameterBehavior.CapBc">
            <summary>
            Gets the internal bsae-collector capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.DynamicParameterBehavior.CapBx">
            <summary>
            Gets the base-collector capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.DynamicParameterBehavior.CapCs">
            <summary>
            Gets the collector-substrate capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.DynamicParameterBehavior.ChargeBe">
            <summary>
            Gets or sets the base-emitter charge storage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.DynamicParameterBehavior.ChargeBc">
            <summary>
            Gets or sets the base-collector charge storage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.DynamicParameterBehavior.ChargeBx">
            <summary>
            Gets or sets the base-X charge storage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.DynamicParameterBehavior.ChargeCs">
            <summary>
            Gets or sets the collector-substract charge storage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.DynamicParameterBehavior.Geqcb">
            <summary>
            Gets the small-signal equivalent collector-bulk conductance.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.DynamicParameterBehavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.BipolarBehaviors.DynamicParameterBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.DynamicParameterBehavior.CalculateCapacitances(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the capacitances.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.BipolarBehaviors.ExcessPhaseEventArgs">
            <summary>
            Event arguments for modifying charges and currents
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ExcessPhaseEventArgs.CollectorCurrent">
            <summary>
            Collector current
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ExcessPhaseEventArgs.BaseCharge">
            <summary>
            Charges on the base
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ExcessPhaseEventArgs.ExcessPhaseCurrent">
            <summary>
            Excess phase current
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ExcessPhaseEventArgs.ExcessPhaseConduct">
            <summary>
            Excess phase conductance
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior">
            <summary>
            AC behavior for <see cref="T:SpiceSharp.Components.BipolarJunctionTransistor"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior.CCollectorCollectorPrimePtr">
            <summary>
            Gets the (external collector, collector) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior.CBaseBasePrimePtr">
            <summary>
            Gets the (external base, base) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior.CEmitterEmitterPrimePtr">
            <summary>
            Gets the (external emitter, emitter) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior.CCollectorPrimeCollectorPtr">
            <summary>
            Gets the (collector, external collector) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior.CCollectorPrimeBasePrimePtr">
            <summary>
            Gets the (collector, base) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior.CCollectorPrimeEmitterPrimePtr">
            <summary>
            Gets the (collector, emitter) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior.CBasePrimeBasePtr">
            <summary>
            Gets the (base, external base) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior.CBasePrimeCollectorPrimePtr">
            <summary>
            Gets the (base, collector) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior.CBasePrimeEmitterPrimePtr">
            <summary>
            Gets the (base, emitter) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior.CEmitterPrimeEmitterPtr">
            <summary>
            Gets the (emitter, external emitter) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior.CEmitterPrimeCollectorPrimePtr">
            <summary>
            Gets the (emitter, collector) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior.CEmitterPrimeBasePrimePtr">
            <summary>
            Gets the (emitter, base) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior.CCollectorCollectorPtr">
            <summary>
            Gets the external (collector, collector) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior.CBaseBasePtr">
            <summary>
            Gets the external (base, base) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior.CEmitterEmitterPtr">
            <summary>
            Gets the external (emitter, emitter) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior.CCollectorPrimeCollectorPrimePtr">
            <summary>
            Gets the (collector, collector) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior.CBasePrimeBasePrimePtr">
            <summary>
            Gets the (base, base) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior.CEmitterPrimeEmitterPrimePtr">
            <summary>
            Gets the (emitter, emitter) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior.CSubstrateSubstratePtr">
            <summary>
            Gets the (substrate, substrate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior.CCollectorPrimeSubstratePtr">
            <summary>
            Gets the (collector, substrate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior.CSubstrateCollectorPrimePtr">
            <summary>
            Gets the (substrate, collector) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior.CBaseCollectorPrimePtr">
            <summary>
            TODO: Check if this is right.
            Gets the (external base, collector) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior.CCollectorPrimeBasePtr">
            <summary>
            TODO: Check if this is right.
            Gets the (collector, external base) element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <summary>
            Initialize AC parameters
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <summary>
            Execute behavior for AC analysis
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.BipolarJunctionTransistorModel"/>
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.SetNpn(System.Boolean)">
            <summary>
            Set the model to be an NPN transistor.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.SetPnp(System.Boolean)">
            <summary>
            Set the model to be a PNP transistor.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.TypeName">
            <summary>
            Gets the type of the model ("npn" or "pnp").
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.BipolarType">
            <summary>
            Gets or sets the scalar bipolar type (1.0 for NPN or -1.0 for PNP).
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.NominalTemperatureCelsius">
            <summary>
            Gets or sets the nominal temperature in degrees Celsius.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.NominalTemperature">
            <summary>
            Gets the nominal temperature parameter in degrees Kelvin.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.SatCur">
            <summary>
            Gets the saturation current parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.BetaF">
            <summary>
            Gets the ideal forward beta parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.EmissionCoefficientForward">
            <summary>
            Gets the forward emission coefficient parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.EarlyVoltageForward">
            <summary>
            Gets the forward Early voltage parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.RollOffForward">
            <summary>
            Gets the forward beta roll-off corner current parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.LeakBeCurrent">
            <summary>
            Gets the base-emitter saturation current parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.LeakBeEmissionCoefficient">
            <summary>
            Gets the base-emitter emission coefficient parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.BetaR">
            <summary>
            Gets the ideal reverse beta parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.EmissionCoefficientReverse">
            <summary>
            Gets the reverse emission coefficient parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.EarlyVoltageReverse">
            <summary>
            Gets the reverse Early voltage parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.RollOffReverse">
            <summary>
            Gets the reverse beta roll-off corner current parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.LeakBcCurrent">
            <summary>
            Gets the base-collector saturation current parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.LeakBcEmissionCoefficient">
            <summary>
            Gets the base-collector emission coefficient parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.BaseResist">
            <summary>
            Gets the zero-bias base resistance parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.BaseCurrentHalfResist">
            <summary>
            Gets the current for base resistance (rb + rbm) / 2 parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.MinimumBaseResistance">
            <summary>
            Gets the minimum base resistance parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.EmitterResistance">
            <summary>
            Gets the emitter resistance parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.CollectorResistance">
            <summary>
            Gets the collector resistance parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.DepletionCapBe">
            <summary>
            Gets the zero-bias base-emitter depletion capacitance parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.PotentialBe">
            <summary>
            Gets the base-emitter built-in potential parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.JunctionExpBe">
            <summary>
            Gets the base-emitter junction grading coefficient parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.TransitTimeForward">
            <summary>
            Gets the ideal forward transit time parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.TransitTimeBiasCoefficientForward">
            <summary>
            Gets the coefficient for bias dependence parameter of the forward transit time.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.TransitTimeForwardVoltageBc">
            <summary>
            Gets the voltage giving the base-collector voltage dependence parameter of the forward transit time.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.TransitTimeHighCurrentForward">
            <summary>
            Gets the high-current dependence parameter of the forward transit time.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.ExcessPhase">
            <summary>
            Gets the excess phase parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.DepletionCapBc">
            <summary>
            Gets the zero-bias base-collector depletion capacitance parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.PotentialBc">
            <summary>
            Gets the base-collector built-in potential parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.JunctionExpBc">
            <summary>
            Gets the base-collector junction grading coefficient parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.BaseFractionBcCap">
            <summary>
            Gets the fraction of base-collector capacitance to the internal base parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.TransitTimeReverse">
            <summary>
            Gets the ideal reverse transit time parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.CapCs">
            <summary>
            Gets the zero-bias collector-substrate capacitance parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.PotentialSubstrate">
            <summary>
            Gets the substrate junction built-in potential parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.ExponentialSubstrate">
            <summary>
            Gets the substrate junction grading coefficient parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.BetaExponent">
            <summary>
            Gets the forward and reverse beta temperature exponent parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.EnergyGap">
            <summary>
            Gets the energy gap parameter for saturation current temperature dependency.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.TempExpIs">
            <summary>
            Gets the temperature exponent parameter for the saturation current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.DepletionCapCoefficient">
            <summary>
            Gets the forward bias junction fit parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.C2">
            <summary>
            Parameter that is not accessible in Spice 3f5
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.C4">
            <summary>
            Parameter that is not accessible in Spice 3f5
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.Npn">
            <summary>
            Scalar used for NPN transistors.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.BipolarBehaviors.ModelBaseParameters.Pnp">
            <summary>
            Scalar used for PNP transistors.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.BipolarBehaviors.ModelNoiseParameters">
            <summary>
            Noise parameters for a <see cref="T:SpiceSharp.Components.BipolarJunctionTransistorModel"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelNoiseParameters.FlickerNoiseCoefficient">
            <summary>
            Gets the flicker noise coefficient parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelNoiseParameters.FlickerNoiseExponent">
            <summary>
            Gets the flicker noise exponent parameter.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.BipolarBehaviors.ModelTemperatureBehavior">
            <summary>
            Temperature behavior for a <see cref="T:SpiceSharp.Components.BipolarJunctionTransistorModel"/>
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.BipolarBehaviors.ModelTemperatureBehavior._mbp">
            <summary>
            Necessary behaviors and parameters
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelTemperatureBehavior.InverseEarlyVoltForward">
            <summary>
            Gets the inverse Early voltage (forward).
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelTemperatureBehavior.InverseEarlyVoltReverse">
            <summary>
            Gets the inverse Early voltage (reverse).
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelTemperatureBehavior.InverseRollOffForward">
            <summary>
            Gets the inverse roll-off (forward).
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelTemperatureBehavior.InverseRollOffReverse">
            <summary>
            Gets the inverse roll-off (reverse).
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelTemperatureBehavior.CollectorConduct">
            <summary>
            Gets the collector conductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelTemperatureBehavior.EmitterConduct">
            <summary>
            Gets the emitter conductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelTemperatureBehavior.TransitTimeVoltageBcFactor">
            <summary>
            Gets the transit time base-collector voltage factor.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelTemperatureBehavior.ExcessPhaseFactor">
            <summary>
            Gets the excess phase factor.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelTemperatureBehavior.Factor1">
            <summary>
            Gets generic factor 1.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelTemperatureBehavior.Xfc">
            <summary>
            Gets ???.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelTemperatureBehavior.F2">
            <summary>
            Gets implementation-specific factor 2.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelTemperatureBehavior.F3">
            <summary>
            Gets implementation-specific factor 3.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelTemperatureBehavior.F6">
            <summary>
            Gets implementation-specific factor 6.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.ModelTemperatureBehavior.F7">
            <summary>
            Gets implementation-specific 7.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.ModelTemperatureBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.BipolarBehaviors.ModelTemperatureBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.ModelTemperatureBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">Data provider</param>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.ModelTemperatureBehavior.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <summary>
            Do temperature-dependent calculations.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.BipolarBehaviors.NoiseBehavior">
            <summary>
            Noise behavior for <see cref="T:SpiceSharp.Components.BipolarJunctionTransistor"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.NoiseBehavior.NoiseParameters">
            <summary>
            Gets the noise parameters.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.BipolarBehaviors.NoiseBehavior.RcNoise">
            <summary>
            Noise sources by their index
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.NoiseBehavior.BipolarJunctionTransistorNoise">
            <summary>
            Noise generators
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.NoiseBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.BipolarBehaviors.NoiseBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.NoiseBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">Data provider</param>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.NoiseBehavior.SpiceSharp#Behaviors#INoiseBehavior#ConnectNoise">
            <summary>
            Connect noise sources
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.NoiseBehavior.SpiceSharp#Behaviors#INoiseBehavior#Noise">
            <summary>
            Noise calculations
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.BipolarBehaviors.TemperatureBehavior">
            <summary>
            Temperature behavior for a <see cref="T:SpiceSharp.Components.BipolarJunctionTransistor"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TemperatureBehavior.BaseParameters">
            <summary>
            Gets the base parameters.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TemperatureBehavior.ModelParameters">
            <summary>
            Gets the model parameters.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TemperatureBehavior.ModelTemperature">
            <summary>
            Gets the model temperature behavior.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TemperatureBehavior.TempSaturationCurrent">
            <summary>
            Gets the temperature-modified saturation current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TemperatureBehavior.TempBetaForward">
            <summary>
            Gets the temperature-modified forward beta.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TemperatureBehavior.TempBetaReverse">
            <summary>
            Gets the temperature-modified reverse beta.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TemperatureBehavior.TempBeLeakageCurrent">
            <summary>
            Gets the temperature-modified base-emitter saturation current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TemperatureBehavior.TempBcLeakageCurrent">
            <summary>
            Gets the temperature-modified base-collector saturation current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TemperatureBehavior.TempBeCap">
            <summary>
            Gets the temperature-modified base-emitter capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TemperatureBehavior.TempBePotential">
            <summary>
            Gets the temperature-modified base-emitter built-in potential.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TemperatureBehavior.TempBcCap">
            <summary>
            Gets the temperature-modified base-collector capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TemperatureBehavior.TempBcPotential">
            <summary>
            Gets the temperature-modified base-collector built-in potential.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TemperatureBehavior.TempDepletionCap">
            <summary>
            Gets the temperature-modified depletion capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TemperatureBehavior.TempFactor1">
            <summary>
            Gets the temperature-modified implementation-specific factor 1.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TemperatureBehavior.TempFactor4">
            <summary>
            Gets the temperature-modified implementation-specific factor 4.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TemperatureBehavior.TempFactor5">
            <summary>
            Gets the temperature-modified implementation-specific factor 5.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TemperatureBehavior.TempVCritical">
            <summary>
            Gets the temperature-modified critical voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TemperatureBehavior.Vt">
            <summary>
            Gets the thermal voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TemperatureBehavior.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.TemperatureBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.BipolarBehaviors.TemperatureBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.TemperatureBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">Data provider</param>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.TemperatureBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.TemperatureBehavior.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <summary>
            Do temperature-dependent calculations
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.BipolarBehaviors.TransientBehavior">
            <summary>
            Transient behavior for a <see cref="T:SpiceSharp.Components.BipolarJunctionTransistor"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TransientBehavior.BasePtr">
            <summary>
            Gets the base RHS element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TransientBehavior.SubstratePtr">
            <summary>
            Gets the substrate RHS element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TransientBehavior.CapCurrentBe">
            <summary>
            Gets the base-emitter capacitor current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TransientBehavior.CapCurrentBc">
            <summary>
            Gets the base-collector capacitor current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TransientBehavior.CapCurrentCs">
            <summary>
            Gets the collector-substrate capacitor current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TransientBehavior.CapCurrentBx">
            <summary>
            Gets the base-X capacitor current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TransientBehavior.CurrentExBc">
            <summary>
            Gets the excess phase base-X capacitor current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TransientBehavior.ChargeBe">
            <summary>
            Gets or sets the base-emitter charge storage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TransientBehavior.ChargeBc">
            <summary>
            Gets or sets the base-collector charge storage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TransientBehavior.ChargeCs">
            <summary>
            Gets or sets the collector-substract charge storage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.BipolarBehaviors.TransientBehavior.ChargeBx">
            <summary>
            Gets or sets the base-X charge storage.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.TransientBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.BipolarBehaviors.TransientBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.TransientBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.TransientBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.TransientBehavior.SpiceSharp#Behaviors#ITimeBehavior#InitializeStates">
            <summary>
            Calculate state variables
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.TransientBehavior.SpiceSharp#Behaviors#ITimeBehavior#Load">
            <summary>
            Transient behavior
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.BipolarBehaviors.TransientBehavior.ExcessPhaseCalculation(System.Double@,System.Double@,System.Double@)">
            <summary>
            Excess phase calculation.
            </summary>
            <param name="cc">The collector current.</param>
            <param name="cex">The excess phase current.</param>
            <param name="gex">The excess phase conductance.</param>
        </member>
        <member name="T:SpiceSharp.Components.BipolarJunctionTransistor">
            <summary>
            A bipolar junction transistor (BJT)
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.BipolarJunctionTransistor.BipolarJunctionTransistorPinCount">
            <summary>
            Constants
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.BipolarJunctionTransistor.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.BipolarJunctionTransistor"/> class.
            </summary>
            <param name="name">The name of the device</param>
        </member>
        <member name="M:SpiceSharp.Components.BipolarJunctionTransistor.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.BipolarJunctionTransistor"/> class.
            </summary>
            <param name="name">The name of the device.</param>
            <param name="c">The collector node.</param>
            <param name="b">The base node.</param>
            <param name="e">The emitter node.</param>
            <param name="s">The substrate node.</param>
            <param name="model">The model.</param>
        </member>
        <member name="T:SpiceSharp.Components.BipolarJunctionTransistorModel">
            <summary>
            A model for a <see cref="T:SpiceSharp.Components.BipolarJunctionTransistor"/>
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.BipolarJunctionTransistorModel.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.BipolarJunctionTransistorModel"/> class.
            </summary>
            <param name="name">The name of the device</param>
        </member>
        <member name="T:SpiceSharp.Components.DiodeBehaviors.BaseParameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.Diode"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.BaseParameters.Area">
            <summary>
            Gets the area parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.BaseParameters.Off">
            <summary>
            Gets or sets whether or not the diode is initially off (non-conducting).
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.BaseParameters.InitCond">
            <summary>
            Gets or sets the initial condition.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.BaseParameters.TemperatureCelsius">
            <summary>
            Gets or sets the temperature in degrees Celsius.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.BaseParameters.Temperature">
            <summary>
            Gets the temperature parameter in degrees Kelvin.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.DiodeBehaviors.BiasingBehavior">
            <summary>
            DC biasing behavior for a <see cref="T:SpiceSharp.Components.Diode" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.BiasingBehavior.PosPrimeNode">
            <summary>
            Gets the positive internal node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.BiasingBehavior.PosNode">
            <summary>
            Gets the positive node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.BiasingBehavior.NegNode">
            <summary>
            Gets the negative node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.BiasingBehavior.PosPosPrimePtr">
            <summary>
            Gets the (external positive, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.BiasingBehavior.NegPosPrimePtr">
            <summary>
            Gets the (negative, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.BiasingBehavior.PosPrimePosPtr">
            <summary>
            Gets the (positive, external positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.BiasingBehavior.PosPrimeNegPtr">
            <summary>
            Gets the (positive, negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.BiasingBehavior.PosPosPtr">
            <summary>
            Gets the external (positive, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.BiasingBehavior.NegNegPtr">
            <summary>
            Gets the (negative, negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.BiasingBehavior.PosPrimePosPrimePtr">
            <summary>
            Gets the (positive, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.BiasingBehavior.PosPrimePtr">
            <summary>
            Gets the positive RHS element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.BiasingBehavior.NegPtr">
            <summary>
            Gets the negative RHS element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.BiasingBehavior.Voltage">
            <summary>
            Gets the voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.BiasingBehavior.Current">
            <summary>
            Gets the current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.BiasingBehavior.Conductance">
            <summary>
            Gets the small-signal conductance.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.BiasingBehavior.GetPower">
            <summary>
            Gets the power dissipated.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.BiasingBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.DiodeBehaviors.BiasingBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.BiasingBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <summary>
            Execute behavior
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.BiasingBehavior.Initialize(System.Double@,System.Boolean@)">
            <summary>
            Initialize the device based on the current iteration state.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#IsConvergent">
            <summary>
            Check convergence for the diode
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiceSharp.Components.DiodeBehaviors.DynamicParameterBehavior">
            <summary>
            Common logic for dynamic (time-dependent) parameters of a <see cref="T:SpiceSharp.Components.Diode" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.DiodeBehaviors.BiasingBehavior" />
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.DynamicParameterBehavior.Capacitance">
            <summary>
            Diode capacitance
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.DynamicParameterBehavior.CapCharge">
            <summary>
            Gets or sets the capacitor charge.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.DynamicParameterBehavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.DiodeBehaviors.DynamicParameterBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.DynamicParameterBehavior.CalculateCapacitance(System.Double)">
            <summary>
            Calculates the capacitance based on the current voltage.
            </summary>
            <param name="vd">The vd.</param>
        </member>
        <member name="T:SpiceSharp.Components.DiodeBehaviors.FrequencyBehavior">
            <summary>
            AC behavior for <see cref="T:SpiceSharp.Components.Diode"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.FrequencyBehavior.CPosPosPrimePtr">
            <summary>
            Gets the (external positive, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.FrequencyBehavior.CNegPosPrimePtr">
            <summary>
            Gets the (negative, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.FrequencyBehavior.CPosPrimePosPtr">
            <summary>
            Gets the (positive, external positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.FrequencyBehavior.CPosPrimeNegPtr">
            <summary>
            Gets the (positive, negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.FrequencyBehavior.CPosPosPtr">
            <summary>
            Gets the external (positive, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.FrequencyBehavior.CNegNegPtr">
            <summary>
            Gets the (negative, negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.FrequencyBehavior.CPosPrimePosPrimePtr">
            <summary>
            Gets the (positive, positive) element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.FrequencyBehavior.GetComplexVoltage">
            <summary>
            Gets the voltage.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.FrequencyBehavior.GetComplexCurrent">
            <summary>
            Gets the current.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.FrequencyBehavior.GetComplexPower">
            <summary>
            Gets the power.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.FrequencyBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.DiodeBehaviors.FrequencyBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.FrequencyBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.FrequencyBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <summary>
            Calculate the small-signal parameters.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <summary>
            Load the Y-matrix and Rhs-vector.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.DiodeBehaviors.ModelBaseParameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.DiodeModel"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.ModelBaseParameters.SaturationCurrent">
            <summary>
            Gets the saturation current parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.ModelBaseParameters.NominalTemperatureCelsius">
            <summary>
            Gets or sets the nominal temperature in degrees Celsius.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.ModelBaseParameters.NominalTemperature">
            <summary>
            Gets the nominal temperature parameter in degrees Kelvin.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.ModelBaseParameters.Resistance">
            <summary>
            Gets the ohmic resistance parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.ModelBaseParameters.EmissionCoefficient">
            <summary>
            Gets the mission coefficient parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.ModelBaseParameters.TransitTime">
            <summary>
            Gets the transit time parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.ModelBaseParameters.JunctionCap">
            <summary>
            Gets the junction capacitance parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.ModelBaseParameters.JunctionPotential">
            <summary>
            Gets the junction built-in potential parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.ModelBaseParameters.GradingCoefficient">
            <summary>
            Gets the grading coefficient parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.ModelBaseParameters.ActivationEnergy">
            <summary>
            Gets the activation energy parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.ModelBaseParameters.SaturationCurrentExp">
            <summary>
            Gets the saturation current temperature exponent parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.ModelBaseParameters.DepletionCapCoefficient">
            <summary>
            Gets the forward bias junction fit parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.ModelBaseParameters.BreakdownVoltage">
            <summary>
            Gets the reverse breakdown voltage parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.ModelBaseParameters.BreakdownCurrent">
            <summary>
            Gets the current parameter at the reverse breakdown voltage.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.DiodeBehaviors.ModelNoiseParameters">
            <summary>
            Noise parameters for a <see cref="T:SpiceSharp.Components.DiodeModel"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.ModelNoiseParameters.FlickerNoiseCoefficient">
            <summary>
            Gets the flicker noise coefficient parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.ModelNoiseParameters.FlickerNoiseExponent">
            <summary>
            Gets the flicker noise exponent parameter.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.DiodeBehaviors.ModelTemperatureBehavior">
            <summary>
            Temperature behavior for a <see cref="T:SpiceSharp.Components.DiodeModel"/>
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.DiodeBehaviors.ModelTemperatureBehavior._mbp">
            <summary>
            Necessary behaviors and parameters
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.ModelTemperatureBehavior.Conductance">
            <summary>
            Conductance
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.ModelTemperatureBehavior.VtNominal">
            <summary>
            Gets the nominal thermal voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.ModelTemperatureBehavior.Xfc">
            <summary>
            Gets ???
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.ModelTemperatureBehavior.F2">
            <summary>
            Gets the implementation-specific factor 2.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.ModelTemperatureBehavior.F3">
            <summary>
            Gets the implementation-specific factor 3.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.ModelTemperatureBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.DiodeBehaviors.ModelTemperatureBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.ModelTemperatureBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Binds the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.ModelTemperatureBehavior.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <summary>
            Do temperature-dependent calculations
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.DiodeBehaviors.NoiseBehavior">
            <summary>
            Noise behavior for <see cref="T:SpiceSharp.Components.Diode"/>
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.DiodeBehaviors.NoiseBehavior._mnp">
            <summary>
            Necessary behaviors
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.DiodeBehaviors.NoiseBehavior.RsNoise">
            <summary>
            Noise sources by their index
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.NoiseBehavior.DiodeNoise">
            <summary>
            Noise generators
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.NoiseBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.DiodeBehaviors.NoiseBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.NoiseBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">Data provider</param>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.NoiseBehavior.SpiceSharp#Behaviors#INoiseBehavior#ConnectNoise">
            <summary>
            Connect the noise source
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.NoiseBehavior.SpiceSharp#Behaviors#INoiseBehavior#Noise">
            <summary>
            Noise calculations
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.DiodeBehaviors.TemperatureBehavior">
            <summary>
            Temperature behavior for a <see cref="T:SpiceSharp.Components.Diode" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.TemperatureBehavior.BaseParameters">
            <summary>
            Gets the base parameters.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.TemperatureBehavior.ModelParameters">
            <summary>
            Gets the model parameters.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.TemperatureBehavior.ModelTemperature">
            <summary>
            Gets the model temperature behavior.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.TemperatureBehavior.BaseConfiguration">
            <summary>
            Gets the base configuration of the simulation.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.TemperatureBehavior.TempJunctionCap">
            <summary>
            Gets the temperature-modified junction capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.TemperatureBehavior.TempJunctionPot">
            <summary>
            Gets the temperature-modified junction built-in potential.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.TemperatureBehavior.TempSaturationCurrent">
            <summary>
            Gets the temperature-modified saturation current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.TemperatureBehavior.TempFactor1">
            <summary>
            Gets the temperature-modified implementation-specific factor 1.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.TemperatureBehavior.TempDepletionCap">
            <summary>
            Gets the temperature-modified depletion capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.TemperatureBehavior.TempVCritical">
            <summary>
            Gets the temperature-modified critical voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.TemperatureBehavior.TempBreakdownVoltage">
            <summary>
            Gets the temperature-modified breakdown voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.TemperatureBehavior.Vt">
            <summary>
            Gets the thermal voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.TemperatureBehavior.Vte">
            <summary>
            Gets the temperature-modified and emission-modified thermal voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.TemperatureBehavior.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.TemperatureBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.DiodeBehaviors.TemperatureBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.TemperatureBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.TemperatureBehavior.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <summary>
            Do temperature-dependent calculations
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.DiodeBehaviors.TransientBehavior">
            <summary>
            Transient behavior for a <see cref="T:SpiceSharp.Components.Diode"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.TransientBehavior.CapCharge">
            <summary>
            Gets the capacitance charge.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.DiodeBehaviors.TransientBehavior.CapCurrent">
            <summary>
            Gets the capacitor current.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.DiodeBehaviors.TransientBehavior._capCharge">
            <summary>
            The charge on the junction capacitance
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.TransientBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.DiodeBehaviors.TransientBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.TransientBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.TransientBehavior.SpiceSharp#Behaviors#ITimeBehavior#InitializeStates">
            <summary>
            Calculate the state values
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.DiodeBehaviors.TransientBehavior.SpiceSharp#Behaviors#ITimeBehavior#Load">
            <summary>
            Transient behavior
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.Diode">
            <summary>
            A diode
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Diode.DiodePinCount">
            <summary>
            Constants
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Diode.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.Diode"/> class.
            </summary>
            <param name="name">The name of the device</param>
        </member>
        <member name="M:SpiceSharp.Components.Diode.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Diode"/> class.
            </summary>
            <param name="name">The name of the device.</param>
            <param name="anode">The anode.</param>
            <param name="cathode">The cathode.</param>
            <param name="model">The model.</param>
        </member>
        <member name="T:SpiceSharp.Components.DiodeModel">
            <summary>
            A model for a <see cref="T:SpiceSharp.Components.Diode"/>
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.DiodeModel.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.DiodeModel"/> class.
            </summary>
            <param name="name">The name of the device</param>
        </member>
        <member name="T:SpiceSharp.Components.JFETBehaviors.BaseParameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.JFET" />.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSet" />
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BaseParameters.TemperatureCelsius">
            <summary>
            Gets or sets the temperature in degrees celsius.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BaseParameters.Temperature">
            <summary>
            Gets the temperature in Kelvin.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BaseParameters.Area">
            <summary>
            Gets the area.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BaseParameters.InitialVds">
            <summary>
            Gets the initial D-S voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BaseParameters.InitialVgs">
            <summary>
            Gets the initial G-S voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BaseParameters.Off">
            <summary>
            Gets or sets a value indicating whether this instance is off.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.JFETBehaviors.BaseParameters.SetIc(System.Double[])">
            <summary>
            Sets the initial conditions of the JFET.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="T:SpiceSharp.Components.JFETBehaviors.BiasingBehavior">
            <summary>
            DC biasing behavior for a <see cref="T:SpiceSharp.Components.JFET" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.BaseConfiguration">
            <summary>
            Gets the base configuration.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.DrainNode">
            <summary>
            Gets the external drain node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.GateNode">
            <summary>
            Gets the external gate node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.SourceNode">
            <summary>
            Gets the external source node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.DrainPrimeNode">
            <summary>
            Gets the drain node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.SourcePrimeNode">
            <summary>
            Gets the source node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.GateNodePtr">
            <summary>
            Gets the gate RHS element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.DrainPrimeNodePtr">
            <summary>
            Gets the drain RHS element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.SourcePrimeNodePtr">
            <summary>
            Gets the source RHS element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.DrainDrainPrimePtr">
            <summary>
            Gets the (external drain, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.GateDrainPrimePtr">
            <summary>
            Gets the (gate, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.GateSourcePrimePtr">
            <summary>
            Gets the (gate, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.SourceSourcePrimePtr">
            <summary>
            Gets the (external source, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.DrainPrimeDrainPtr">
            <summary>
            Gets the (external drain, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.DrainPrimeGatePtr">
            <summary>
            Gets the (drain, gate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.DrainPrimeSourcePrimePtr">
            <summary>
            Gets the (drain, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.SourcePrimeGatePtr">
            <summary>
            Gets the (source, gate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.SourcePrimeSourcePtr">
            <summary>
            Gets the (source, external source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.SourcePrimeDrainPrimePtr">
            <summary>
            Gets the (source, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.DrainDrainPtr">
            <summary>
            Gets the (external drain, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.GateGatePtr">
            <summary>
            Gets the (gate, gate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.SourceSourcePtr">
            <summary>
            Gets the (external source, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.DrainPrimeDrainPrimePtr">
            <summary>
            Gets the (drain, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.SourcePrimeSourcePrimePtr">
            <summary>
            Gets the (source, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.Vgs">
            <summary>
            Gets the gate-source voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.Vgd">
            <summary>
            Gets the gate-drain voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.Cg">
            <summary>
            Gets the gate current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.Cd">
            <summary>
            Gets the drain current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.Cgd">
            <summary>
            Gets the gate-drain current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.Gm">
            <summary>
            Gets the small-signal transconductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.Gds">
            <summary>
            Gets the small-signal drain-source conductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.Ggs">
            <summary>
            Gets the small-signal gate-source conductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.Ggd">
            <summary>
            Gets the small-signal gate-drain conductance.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.JFETBehaviors.BiasingBehavior"/> class.
            </summary>
            <param name="name">The identifier of the behavior.</param>
            <remarks>
            The identifier of the behavior should be the same as that of the entity creating it.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <summary>
            Loads the Y-matrix and Rhs-vector.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.Initialize(System.Double@,System.Double@,System.Boolean@)">
            <summary>
            Initializes the voltages for the current iteration.
            </summary>
            <param name="vgs">The VGS.</param>
            <param name="vgd">The VGD.</param>
            <param name="check">if set to <c>true</c> [check].</param>
        </member>
        <member name="M:SpiceSharp.Components.JFETBehaviors.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#IsConvergent">
            <summary>
            Tests convergence at the device-level.
            </summary>
            <returns>
            <c>true</c> if the device determines the solution converges; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.JFETBehaviors.FrequencyBehavior">
            <summary>
            Frequency behavior for a <see cref="T:SpiceSharp.Components.JFET" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.FrequencyBehavior.CapGs">
            <summary>
            Gets the gate-source capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.FrequencyBehavior.CapGd">
            <summary>
            Gets the gate-drain capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.FrequencyBehavior.CDrainDrainPtr">
            <summary>
            Gets the external (drain, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.FrequencyBehavior.CGateGatePtr">
            <summary>
            Gets the (gate, gate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.FrequencyBehavior.CSourceSourcePtr">
            <summary>
            Gets the external (source, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.FrequencyBehavior.CDrainPrimeDrainPrimePtr">
            <summary>
            Gets the (drain, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.FrequencyBehavior.CSourcePrimeSourcePrimePtr">
            <summary>
            Gets the (source, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.FrequencyBehavior.CDrainDrainPrimePtr">
            <summary>
            Gets the (external drain, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.FrequencyBehavior.CGateDrainPrimePtr">
            <summary>
            Gets the (gate, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.FrequencyBehavior.CGateSourcePrimePtr">
            <summary>
            Gets the (gate, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.FrequencyBehavior.CSourceSourcePrimePtr">
            <summary>
            Gets the (external source, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.FrequencyBehavior.CDrainPrimeDrainPtr">
            <summary>
            Gets the (drain, external drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.FrequencyBehavior.CDrainPrimeGatePtr">
            <summary>
            Gets the (drain, gate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.FrequencyBehavior.CDrainPrimeSourcePrimePtr">
            <summary>
            Gets the (drain, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.FrequencyBehavior.CSourcePrimeGatePtr">
            <summary>
            Gets the (source, gate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.FrequencyBehavior.CSourcePrimeSourcePtr">
            <summary>
            Gets the (source, external source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.FrequencyBehavior.CSourcePrimeDrainPrimePtr">
            <summary>
            Gets the (source, drain) element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.JFETBehaviors.FrequencyBehavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.JFETBehaviors.FrequencyBehavior"/> class.
            </summary>
            <param name="name">The identifier of the behavior.</param>
            <remarks>
            The identifier of the behavior should be the same as that of the entity creating it.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Components.JFETBehaviors.FrequencyBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.JFETBehaviors.FrequencyBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.JFETBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <summary>
            Initializes the parameters.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.JFETBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <summary>
            Load the Y-matrix and Rhs vector.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.JFETBehaviors.ModelBaseParameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.JFETModel" />.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSet" />
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.ModelBaseParameters.NominalTemperatureCelsius">
            <summary>
            Gets or sets the measurement temperature in degrees celsius.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.ModelBaseParameters.NominalTemperature">
            <summary>
            Gets the measurement temperature in Kelvin.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.ModelBaseParameters.Threshold">
            <summary>
            Gets the threshold voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.ModelBaseParameters.Beta">
            <summary>
            Gets the transconductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.ModelBaseParameters.LModulation">
            <summary>
            Gets the channel length modulation parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.ModelBaseParameters.DrainResistance">
            <summary>
            Gets the drain resistance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.ModelBaseParameters.SourceResistance">
            <summary>
            Gets the source resistance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.ModelBaseParameters.CapGs">
            <summary>
            Gets the gate-source junction capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.ModelBaseParameters.CapGd">
            <summary>
            Gets the gate-drain junction capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.ModelBaseParameters.GatePotential">
            <summary>
            Gets the gate junction potential.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.ModelBaseParameters.GateSaturationCurrent">
            <summary>
            Gets the gate saturation current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.ModelBaseParameters.DepletionCapCoefficient">
            <summary>
            Gets the forward bias junction fitting parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.ModelBaseParameters.B">
            <summary>
            Gets the doping tail parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.ModelBaseParameters.JFETType">
            <summary>
            Gets or sets the type of the jfet.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.ModelBaseParameters.DrainConductance">
            <summary>
            Gets the drain conductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.ModelBaseParameters.SourceConductance">
            <summary>
            Gets the source conductance.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.JFETBehaviors.ModelBaseParameters.SetNjf(System.Boolean)">
            <summary>
            Sets the model to be n-type.
            </summary>
            <param name="flag">if set to <c>true</c> n-type is set.</param>
        </member>
        <member name="M:SpiceSharp.Components.JFETBehaviors.ModelBaseParameters.SetPjf(System.Boolean)">
            <summary>
            Sets the model to be p-type.
            </summary>
            <param name="flag">if set to <c>true</c> p-type is set.</param>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.ModelBaseParameters.TypeName">
            <summary>
            Gets the name of the type.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.JFETBehaviors.ModelBaseParameters.CalculateDefaults">
            <summary>
            Method for calculating the default values of derived parameters.
            </summary>
            <remarks>
            These calculations should be run whenever a parameter has been changed.
            </remarks>
        </member>
        <member name="T:SpiceSharp.Components.JFETBehaviors.ModelNoiseParameters">
            <summary>
            Noise parameters for a <see cref="T:SpiceSharp.Components.JFETModel" />.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSet" />
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.ModelNoiseParameters.FnCoefficient">
            <summary>
            Gets the flicker noise coefficient.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.ModelNoiseParameters.FnExponent">
            <summary>
            Gets the flicker noise exponent.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.JFETBehaviors.ModelTemperatureBehavior">
            <summary>
            Temperature behavior for a <see cref="T:SpiceSharp.Components.JFETModel" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.ModelTemperatureBehavior.F2">
            <summary>
            Gets the implementation-specific factor 2.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.ModelTemperatureBehavior.F3">
            <summary>
            Gets the implementation-specific factor 3.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.ModelTemperatureBehavior.BFactor">
            <summary>
            Gets the bulk factor.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.ModelTemperatureBehavior.Pbo">
            <summary>
            Gets the implementation-specific factor Pbo.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.ModelTemperatureBehavior.Xfc">
            <summary>
            Gets ???
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.ModelTemperatureBehavior.Cjfact">
            <summary>
            Gets the junction capacitance factor.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.JFETBehaviors.ModelTemperatureBehavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.JFETBehaviors.ModelTemperatureBehavior"/> class.
            </summary>
            <param name="name">The identifier of the behavior.</param>
            <remarks>
            The identifier of the behavior should be the same as that of the entity creating it.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Components.JFETBehaviors.ModelTemperatureBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.JFETBehaviors.ModelTemperatureBehavior.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <summary>
            Perform temperature-dependent calculations.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.JFETBehaviors.TemperatureBehavior">
            <summary>
            Temperature behavior for a <see cref="T:SpiceSharp.Components.JFET" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.TemperatureBehavior.ModelParameters">
            <summary>
            Gets the model parameters.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.TemperatureBehavior.BaseParameters">
            <summary>
            Gets the base parameters.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.TemperatureBehavior.ModelTemperature">
            <summary>
            Gets the model temperature behavior.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.TemperatureBehavior.TempSaturationCurrent">
            <summary>
            Gets the temperature-modified saturation current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.TemperatureBehavior.TempCapGs">
            <summary>
            Gets the temperature-modified gate-source capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.TemperatureBehavior.TempCapGd">
            <summary>
            Gets the temperature-modified gate-drain capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.TemperatureBehavior.TempGatePotential">
            <summary>
            Gets the temperature-modified gate potential.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.TemperatureBehavior.CorDepCap">
            <summary>
            Gets the temperature-modified depletion capacitance correction.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.TemperatureBehavior.F1">
            <summary>
            Gets the implementation-specific factor 1.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.TemperatureBehavior.Vcrit">
            <summary>
            Gets the temperature-modified critical voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.TemperatureBehavior.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.JFETBehaviors.TemperatureBehavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.JFETBehaviors.TemperatureBehavior"/> class.
            </summary>
            <param name="name">The identifier of the behavior.</param>
            <remarks>
            The identifier of the behavior should be the same as that of the entity creating it.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Components.JFETBehaviors.TemperatureBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.JFETBehaviors.TemperatureBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.JFETBehaviors.TemperatureBehavior.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <summary>
            Perform temperature-dependent calculations.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.JFETBehaviors.TransientBehavior">
            <summary>
            Transient behavior for a <see cref="T:SpiceSharp.Components.JFET" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.TransientBehavior.Qgs">
            <summary>
            Gets the state tracking gate-source charge.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.TransientBehavior.Qgd">
            <summary>
            Gets the state tracking gate-drain charge.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.TransientBehavior.CapGs">
            <summary>
            Gets the G-S capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.JFETBehaviors.TransientBehavior.CapGd">
            <summary>
            Gets the G-D capacitance.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.JFETBehaviors.TransientBehavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.JFETBehaviors.TransientBehavior"/> class.
            </summary>
            <param name="name">The identifier of the behavior.</param>
            <remarks>
            The identifier of the behavior should be the same as that of the entity creating it.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Components.JFETBehaviors.TransientBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.JFETBehaviors.TransientBehavior.SpiceSharp#Behaviors#ITimeBehavior#InitializeStates">
            <summary>
            Calculates the state values from the current DC solution.
            </summary>
            <remarks>
            In this method, the initial value is calculated based on the operating point solution,
            and the result is stored in each respective <see cref="T:SpiceSharp.IntegrationMethods.StateDerivative" /> or <see cref="T:SpiceSharp.IntegrationMethods.StateHistory" />.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Components.JFETBehaviors.TransientBehavior.SpiceSharp#Behaviors#ITimeBehavior#Load">
            <summary>
            Perform time-dependent calculations.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.JFETBehaviors.TransientBehavior.CalculateStates(System.Double,System.Double)">
            <summary>
            Calculates the states.
            </summary>
            <param name="vgs">The VGS.</param>
            <param name="vgd">The VGD.</param>
        </member>
        <member name="T:SpiceSharp.Components.JFET">
            <summary>
            A junction field-effect transistor.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Component" />
        </member>
        <member name="F:SpiceSharp.Components.JFET.JFETPincount">
            <summary>
            The number of pins on a JFET.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.JFET.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.JFET"/> class.
            </summary>
            <param name="name">The string of the entity.</param>
        </member>
        <member name="T:SpiceSharp.Components.JFETModel">
            <summary>
            Model for a <see cref="T:SpiceSharp.Components.JFET" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Model" />
        </member>
        <member name="M:SpiceSharp.Components.JFETModel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.JFETModel"/> class.
            </summary>
            <param name="name">The name of the model.</param>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Common.BaseParameters">
            <summary>
            Common parameters for mosfet components.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSet" />
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.BaseParameters.TemperatureCelsius">
            <summary>
            Gets or sets the temperature in degrees celsius.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.BaseParameters.Temperature">
            <summary>
            Gets the temperature in Kelvin.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.BaseParameters.Width">
            <summary>
            Gets the mosfet width.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.BaseParameters.Length">
            <summary>
            Gets the mosfet length.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.BaseParameters.SourceArea">
            <summary>
            Gets the source layout area.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.BaseParameters.DrainArea">
            <summary>
            Gets the drain layout area.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.BaseParameters.SourcePerimeter">
            <summary>
            Gets the source layout perimeter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.BaseParameters.DrainPerimeter">
            <summary>
            Gets the drain layout perimeter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.BaseParameters.SourceSquares">
            <summary>
            Gets the number of squares of the source.
            Used in conjunction with the sheet resistance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.BaseParameters.DrainSquares">
            <summary>
            Gets the number of squares of the drain.
            Used in conjunction with the sheet resistance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.BaseParameters.Off">
            <summary>
            Gets or sets a value indicating whether the device is on or off.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.BaseParameters.InitialVoltageBs">
            <summary>
            Gets the initial bulk-source voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.BaseParameters.InitialVoltageDs">
            <summary>
            Gets the initial drain-source voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.BaseParameters.InitialVoltageGs">
            <summary>
            Gets the initial gate-source voltage.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Common.BaseParameters.SetIc(System.Double[])">
            <summary>
            Set the initial conditions of the device.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters">
            <summary>
            Common model parameters for mosfets.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSet" />
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.Width">
            <summary>
            Gets the default width for transistors using this model.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.Length">
            <summary>
            Gets the default length for transistors using this model.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.NominalTemperatureCelsius">
            <summary>
            Gets or sets the nominal temperature in degrees celsius.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.Vt0">
            <summary>
            Gets the base threshold voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.Transconductance">
            <summary>
            Gets the transconductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.Gamma">
            <summary>
            Gets the bulk threshold parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.Phi">
            <summary>
            Gets the surface potential.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.DrainResistance">
            <summary>
            Gets the drain ohmic resistance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.SourceResistance">
            <summary>
            Gets the source ohmic resistance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.CapBd">
            <summary>
            Gets the bulk-drain junction capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.CapBs">
            <summary>
            Gets the bulk-source junction capacitance
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.JunctionSatCur">
            <summary>
            Gets the bulk junction saturation current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.BulkJunctionPotential">
            <summary>
            Gets the bulk junction potential.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.GateSourceOverlapCapFactor">
            <summary>
            Gets the gate-source overlap capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.GateDrainOverlapCapFactor">
            <summary>
            Gets the gate-drain overlap capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.GateBulkOverlapCapFactor">
            <summary>
            Gets the gate-bulk overlap capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.BulkCapFactor">
            <summary>
            Gets the bottom junction capacitance per area.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.BulkJunctionBotGradingCoefficient">
            <summary>
            Gets the bulk junction bottom grading coefficient.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.SidewallCapFactor">
            <summary>
            Gets the sidewall capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.BulkJunctionSideGradingCoefficient">
            <summary>
            Gets the bulk junction side grading coefficient.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.JunctionSatCurDensity">
            <summary>
            Gets the bulk junction saturation current density.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.OxideThickness">
            <summary>
            Gets the oxide thickness.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.LateralDiffusion">
            <summary>
            Gets the lateral diffusion.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.SheetResistance">
            <summary>
            Gets the sheet resistance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.SurfaceMobility">
            <summary>
            Gets the surface mobility.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.ForwardCapDepletionCoefficient">
            <summary>
            Gets the forward bias junction fitting parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.GateType">
            <summary>
            Gets the type of the gate.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.SubstrateDoping">
            <summary>
            Gets the substrate doping level.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.SurfaceStateDensity">
            <summary>
            Gets the surface state density.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.NominalTemperature">
            <summary>
            Gets the nominal temperature in Kelvin.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.MosfetType">
            <summary>
            Gets or sets the mosfet type.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.SetNmos(System.Boolean)">
            <summary>
            Sets the model to represent an NMOS.
            </summary>
            <param name="value">if set to <c>true</c>, the model represents an NMOS.</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.SetPmos(System.Boolean)">
            <summary>
            Sets the model to represent a PMOS.
            </summary>
            <param name="value">if set to <c>true</c>, the model represents a PMOS.</param>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.TypeName">
            <summary>
            Gets the name of the type.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.OxideCapFactor">
            <summary>
            Gets the oxide capacitance density.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.CalculateDefaults">
            <summary>
            Method for calculating the default values of derived parameters.
            </summary>
            <remarks>
            These calculations should be run whenever a parameter has been changed.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Common.ModelBaseParameters.Clone">
            <summary>
            Creates a deep clone of the parameter set.
            </summary>
            <returns>
            A deep clone of the parameter set.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Common.ModelNoiseParameters">
            <summary>
            Noise parameters for a <see cref="T:SpiceSharp.Components.Model"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelNoiseParameters.FlickerNoiseCoefficient">
            <summary>
            Gets the flicker-noise coefficient parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Common.ModelNoiseParameters.FlickerNoiseExponent">
            <summary>
            Gets the flicker-noise exponent parameter.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Transistor">
            <summary>
            A class with static methods for Mosfet transistors
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Transistor.LimitFet(System.Double,System.Double,System.Double)">
            <summary>
            Limiting function FET
            </summary>
            <remarks>
            Update taken from ngSpice, which was fixed by Alan Gillespie's code.
            </remarks>
            <param name="newVoltage">New voltage</param>
            <param name="oldVoltage">Olt voltage</param>
            <param name="threshold">Threshold</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Transistor.LimitVds(System.Double,System.Double)">
            <summary>
            Limiting function VDS
            </summary>
            <param name="newVoltage">New voltage</param>
            <param name="oldVoltage">Old voltage</param>
            <returns>The limited vds</returns>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Transistor.MeyerCharges(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double,System.Double)">
            <summary>
            QMeyer method for calculating capacitances
            </summary>
            <param name="vgs">Gate-source voltage</param>
            <param name="vgd">Gate-drain voltage</param>
            <param name="von">Von</param>
            <param name="vdsat">Saturation voltage</param>
            <param name="capGs">Gate-source capacitance</param>
            <param name="capGd">Gate-drain capacitance</param>
            <param name="capGb">Gate-bulk capacitance</param>
            <param name="phi">Phi</param>
            <param name="cox">Cox</param>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Level1.BaseParameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.Mosfet1"/>
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior">
            <summary>
            Biasing behavior for a <see cref="T:SpiceSharp.Components.Mosfet1" />.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.MaximumExponentArgument">
            <summary>
            The maximum exponent argument
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.BaseConfiguration">
            <summary>
            Gets the base configuration.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.DrainCurrent">
            <summary>
            Gets or sets the drain current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.BsCurrent">
            <summary>
            Gets or sets the bulk-source current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.BdCurrent">
            <summary>
            Gets or sets the bulk-drain current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.Transconductance">
            <summary>
            Gets or sets the small-signal transconductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.TransconductanceBs">
            <summary>
            Gets or sets the small-signal bulk transconductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.CondDs">
            <summary>
            Gets or sets the small-signal output conductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.CondBs">
            <summary>
            Gets or sets the small-signal bulk-source conductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.CondBd">
            <summary>
            Gets or sets the small-signal bulk-drain conductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.Von">
            <summary>
            Gets or sets the turn-on voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.SaturationVoltageDs">
            <summary>
            Gets or sets the saturation voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.Mode">
            <summary>
            Gets the current mode of operation. +1.0 if vds is positive, -1 if it is negative.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.VoltageGs">
            <summary>
            Gets the gate-source voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.VoltageDs">
            <summary>
            Gets the drain-source voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.VoltageBs">
            <summary>
            Gets the bulk-source voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.VoltageBd">
            <summary>
            Gets the bulk-drain voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.DrainNode">
            <summary>
            Gets the external drain node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.GateNode">
            <summary>
            Gets the gate node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.SourceNode">
            <summary>
            Gets the external source node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.BulkNode">
            <summary>
            Gets the bulk node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.DrainNodePrime">
            <summary>
            Gets the (internal) drain node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.SourceNodePrime">
            <summary>
            Gets the (internal) source node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.DrainDrainPtr">
            <summary>
            Gets the external (drain, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.GateGatePtr">
            <summary>
            Gets the (gate, gate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.SourceSourcePtr">
            <summary>
            Gets the external (source, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.BulkBulkPtr">
            <summary>
            Gets the (bulk, bulk) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.DrainPrimeDrainPrimePtr">
            <summary>
            Gets the (drain, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.SourcePrimeSourcePrimePtr">
            <summary>
            Gets the (source, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.DrainDrainPrimePtr">
            <summary>
            Gets the (external drain, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.GateBulkPtr">
            <summary>
            Gets the (gate, bulk) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.GateDrainPrimePtr">
            <summary>
            Gets the (gate, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.GateSourcePrimePtr">
            <summary>
            Gets the (gate, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.SourceSourcePrimePtr">
            <summary>
            Gets the (external source, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.BulkDrainPrimePtr">
            <summary>
            Gets the (bulk, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.BulkSourcePrimePtr">
            <summary>
            Gets the (bulk, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.DrainPrimeSourcePrimePtr">
            <summary>
            Gets the (drain, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.DrainPrimeDrainPtr">
            <summary>
            Gets the (drain, external drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.BulkGatePtr">
            <summary>
            Gets the (bulk, gate) element
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.DrainPrimeGatePtr">
            <summary>
            Gets the (drain, gate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.SourcePrimeGatePtr">
            <summary>
            Gets the (source, gate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.SourcePrimeSourcePtr">
            <summary>
            Gets the (source, external source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.DrainPrimeBulkPtr">
            <summary>
            Gets the (drain, bulk) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.SourcePrimeBulkPtr">
            <summary>
            Gets the (source, bulk) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.SourcePrimeDrainPrimePtr">
            <summary>
            Gets the (source, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.BulkPtr">
            <summary>
            Gets the bulk RHS element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.DrainPrimePtr">
            <summary>
            Gets the drain RHS element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.SourcePrimePtr">
            <summary>
            Gets the source RHS element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <summary>
            Loads the Y-matrix and Rhs-vector.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.Initialize(System.Double@,System.Double@,System.Double@,System.Boolean@)">
            <summary>
            Initializes the voltages to be used for calculating the current iteration.
            </summary>
            <param name="vgs">The VGS.</param>
            <param name="vds">The VDS.</param>
            <param name="vbs">The VBS.</param>
            <param name="check">If set to <c>true</c>, the current voltage was limited and another iteration should be calculated.</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.Evaluate(System.Double,System.Double,System.Double)">
            <summary>
            Execute behavior
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#IsConvergent">
            <summary>
            Tests convergence at the device-level.
            </summary>
            <returns>
            <c>true</c> if the device determines the solution converges; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Level1.DynamicParameterBehavior">
            <summary>
            This class allows calculation of dynamic (time-dependent) parameters for a <see cref="T:SpiceSharp.Components.Mosfet1" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.MosfetBehaviors.Level1.BiasingBehavior" />
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.DynamicParameterBehavior.CapBd">
            <summary>
            Gets the bulk-drain junction capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.DynamicParameterBehavior.CapBdSidewall">
            <summary>
            Gets the bulk-drain junction sidewall capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.DynamicParameterBehavior.CapBs">
            <summary>
            Gets the bulk-source junction capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.DynamicParameterBehavior.CapBsSidewall">
            <summary>
            Gets the bulk-source junction sidewall capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.DynamicParameterBehavior.ChargeBs">
            <summary>
            Gets or sets the stored bulk-source charge.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.DynamicParameterBehavior.ChargeBd">
            <summary>
            Gets or sets the stored bulk-drain charge.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.DynamicParameterBehavior.CapGs">
            <summary>
            Gets or sets the capacitance due to gate-source charge storage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.DynamicParameterBehavior.CapGd">
            <summary>
            Gets or sets the capacitance due to gate-drain charge storage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.DynamicParameterBehavior.CapGb">
            <summary>
            Gets or sets the capacitance due to gate-bulk charge storage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.DynamicParameterBehavior.TempCapBd">
            <summary>
            Gets the temperature-modified bulk-drain capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.DynamicParameterBehavior.TempCapBs">
            <summary>
            Gets the temperature-modified bulk-source capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.DynamicParameterBehavior.TempJunctionCap">
            <summary>
            Gets the temperature-modified junction capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.DynamicParameterBehavior.TempJunctionCapSidewall">
            <summary>
            Gets the temperature-modified sidewall junction capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.DynamicParameterBehavior.TempDepletionCap">
            <summary>
            Gets the temperature-modified depletion capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.DynamicParameterBehavior.F2D">
            <summary>
            Gets the implementation-specific factor 2-drain.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.DynamicParameterBehavior.F3D">
            <summary>
            Gets the implementation-specific factor 3-drain.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.DynamicParameterBehavior.F4D">
            <summary>
            Gets the implementation-specific factor 4-drain.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.DynamicParameterBehavior.F2S">
            <summary>
            Gets the implementation-specific factor 2-source.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.DynamicParameterBehavior.F3S">
            <summary>
            Gets the implementation-specific factor 3-source.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.DynamicParameterBehavior.F4S">
            <summary>
            Gets the implementation-specific factor 4-source.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.DynamicParameterBehavior.EffectiveLength">
            <summary>
            Gets the effective length.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.DynamicParameterBehavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.MosfetBehaviors.Level1.DynamicParameterBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.DynamicParameterBehavior.CalculateBaseCapacitances">
            <summary>
            Calculates the base capacitance parameters. Only needs to be calculated
            once when temperature or parameters have changed.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.DynamicParameterBehavior.CalculateCapacitances(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the capacitances based on the current biasing point.
            </summary>
            <param name="vgs">The gate-source voltage.</param>
            <param name="vds">The drain-source voltage.</param>
            <param name="vbs">The bulk-source voltage.</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.DynamicParameterBehavior.CalculateMeyerCharges(System.Double,System.Double)">
            <summary>
            Calculates the Meyer capacitors.
            </summary>
            <param name="vgs">The VGS.</param>
            <param name="vgd">The VGD.</param>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Level1.FrequencyBehavior">
            <summary>
            Frequency behavior for a <see cref="T:SpiceSharp.Components.Mosfet1" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.FrequencyBehavior.CDrainDrainPtr">
            <summary>
            Gets the external (drain, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.FrequencyBehavior.CGateGatePtr">
            <summary>
            Gets the (gate, gate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.FrequencyBehavior.CSourceSourcePtr">
            <summary>
            Gets the external (source, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.FrequencyBehavior.CBulkBulkPtr">
            <summary>
            Gets the (bulk, bulk) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.FrequencyBehavior.CDrainPrimeDrainPrimePtr">
            <summary>
            Gets the (drain, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.FrequencyBehavior.CSourcePrimeSourcePrimePtr">
            <summary>
            Gets the (source, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.FrequencyBehavior.CDrainDrainPrimePtr">
            <summary>
            Gets the (external drain, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.FrequencyBehavior.CGateBulkPtr">
            <summary>
            Gets the (gate, bulk) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.FrequencyBehavior.CGateDrainPrimePtr">
            <summary>
            Gets the (gate, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.FrequencyBehavior.CGateSourcePrimePtr">
            <summary>
            Gets the (gate, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.FrequencyBehavior.CSourceSourcePrimePtr">
            <summary>
            Gets the (external source, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.FrequencyBehavior.CBulkDrainPrimePtr">
            <summary>
            Gets the (bulk, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.FrequencyBehavior.CBulkSourcePrimePtr">
            <summary>
            Gets the (bulk, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.FrequencyBehavior.CDrainPrimeSourcePrimePtr">
            <summary>
            Gets the (drain, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.FrequencyBehavior.CDrainPrimeDrainPtr">
            <summary>
            Gets the (drain, external drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.FrequencyBehavior.CBulkGatePtr">
            <summary>
            Gets the (bulk, gate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.FrequencyBehavior.CDrainPrimeGatePtr">
            <summary>
            Gets the (drain, gate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.FrequencyBehavior.CSourcePrimeGatePtr">
            <summary>
            Gets the (source, gate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.FrequencyBehavior.CSourcePrimeSourcePtr">
            <summary>
            Gets the (source, external source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.FrequencyBehavior.CDrainPrimeBulkPtr">
            <summary>
            Gets the (drain, bulk) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.FrequencyBehavior.CSourcePrimeBulkPtr">
            <summary>
            Gets the (source, bulk) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.FrequencyBehavior.CSourcePrimeDrainPrimePtr">
            <summary>
            Gets the (source, drain) element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.FrequencyBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.MosfetBehaviors.Level1.FrequencyBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.FrequencyBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation"></param>
            <param name="context"></param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.FrequencyBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <summary>
            Initializes the parameters.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <summary>
            Load the Y-matrix and right-hand side vector for frequency domain analysis.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Level1.ModelBaseParameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.Model"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.ModelBaseParameters.Lambda">
            <summary>
            Gets the channel length modulation parameter.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.ModelBaseParameters.CalculateDefaults">
            <summary>
            Method for calculating the default values of derived parameters.
            </summary>
            <remarks>
            These calculations should be run whenever a parameter has been changed.
            </remarks>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Level1.ModelTemperatureBehavior">
            <summary>
            Temperature behavior for a <see cref="T:SpiceSharp.Components.Model"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.ModelTemperatureBehavior.ModelParameters">
            <summary>
            Necessary behaviors and parameters
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.ModelTemperatureBehavior.Factor1">
            <summary>
            Gets implementation-specific factor 1.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.ModelTemperatureBehavior.VtNominal">
            <summary>
            Gets the nominal thermal voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.ModelTemperatureBehavior.EgFet1">
            <summary>
            Gets the bandgap voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.ModelTemperatureBehavior.PbFactor1">
            <summary>
            Gets the implementaiton specific factor PbFactor1.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.ModelTemperatureBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.MosfetBehaviors.Level1.ModelTemperatureBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.ModelTemperatureBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.ModelTemperatureBehavior.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <summary>
            Do temperature-dependent calculations.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Level1.NoiseBehavior">
            <summary>
            Noise behavior for a <see cref="T:SpiceSharp.Components.Mosfet1"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.NoiseBehavior.NoiseParameters">
            <summary>
            Gets the noise parameters.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.MosfetBehaviors.Level1.NoiseBehavior.RdNoise">
            <summary>
            Index of the thermal noise generated by the drain resistance.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.MosfetBehaviors.Level1.NoiseBehavior.RsNoise">
            <summary>
            Index of the thermal noise generated by the source resistance.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.MosfetBehaviors.Level1.NoiseBehavior.IdNoise">
            <summary>
            Index of the shot-noise generated by the drain current.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.MosfetBehaviors.Level1.NoiseBehavior.FlickerNoise">
            <summary>
            Index of the flicker noise generated.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.NoiseBehavior.MosfetNoise">
            <summary>
            Noise generators
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.NoiseBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.MosfetBehaviors.Level1.NoiseBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.NoiseBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.NoiseBehavior.SpiceSharp#Behaviors#INoiseBehavior#ConnectNoise">
            <summary>
            Connect noise
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.NoiseBehavior.SpiceSharp#Behaviors#INoiseBehavior#Noise">
            <summary>
            Calculate the noise contributions.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Level1.TemperatureBehavior">
            <summary>
            Temperature behavior for a <see cref="T:SpiceSharp.Components.Mosfet1"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TemperatureBehavior.BaseParameters">
            <summary>
            Gets the base parameters.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TemperatureBehavior.ModelParameters">
            <summary>
            Gets the model parameters.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TemperatureBehavior.ModelTemperature">
            <summary>
            Gets the model temperature behavior.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TemperatureBehavior.SourceConductance">
            <summary>
            Gets the small source conductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TemperatureBehavior.DrainConductance">
            <summary>
            Gets the drain conductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TemperatureBehavior.SourceResistance">
            <summary>
            Gets the source resistance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TemperatureBehavior.DrainResistance">
            <summary>
            Gets the drain resistance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TemperatureBehavior.SourceVCritical">
            <summary>
            Gets or sets the critical source voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TemperatureBehavior.DrainVCritical">
            <summary>
            Gets or sets the critical drain voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TemperatureBehavior.TempSurfaceMobility">
            <summary>
            Gets the temperature-modified surface mobility.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TemperatureBehavior.TempPhi">
            <summary>
            Gets the temperature-modified phi.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TemperatureBehavior.TempVoltageBi">
            <summary>
            Gets the temperature-modified Vbi.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TemperatureBehavior.TempBulkPotential">
            <summary>
            Gets the temperature-modified bulk potential.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TemperatureBehavior.TempTransconductance">
            <summary>
            Gets the temperature-modified transconductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TemperatureBehavior.TempVt0">
            <summary>
            Gets the temperature-modified threshold voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TemperatureBehavior.Vt">
            <summary>
            Gets the thermal voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TemperatureBehavior.DrainSatCurrent">
            <summary>
            Gets the temperature-modified drain saturation current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TemperatureBehavior.SourceSatCurrent">
            <summary>
            Gets the temperature-modified source saturation current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TemperatureBehavior.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.TemperatureBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.MosfetBehaviors.Level1.TemperatureBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.TemperatureBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior. for the specified simulation.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.TemperatureBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.TemperatureBehavior.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <summary>
            Perform temperature-dependent calculations.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Level1.TransientBehavior">
            <summary>
            Transient behavior for a <see cref="T:SpiceSharp.Components.Mosfet1" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TransientBehavior.ChargeBs">
            <summary>
            Gets or sets the stored bulk-source charge.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TransientBehavior.ChargeBd">
            <summary>
            Gets or sets the stored bulk-drain charge.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TransientBehavior.CapGs">
            <summary>
            Gets or sets the capacitance due to gate-source charge storage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TransientBehavior.CapGd">
            <summary>
            Gets or sets the capacitance due to gate-drain charge storage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TransientBehavior.CapGb">
            <summary>
            Gets or sets the capacitance due to gate-bulk charge storage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TransientBehavior.ChargeGs">
            <summary>
            Gets the stored gate-source charge.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TransientBehavior.ChargeGd">
            <summary>
            Gets the stored gate-drain charge.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TransientBehavior.ChargeGb">
            <summary>
            Gets the stored gate-bulk charge.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TransientBehavior.VoltageDs">
            <summary>
            Gets the drain-source voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TransientBehavior.VoltageGs">
            <summary>
            Gets the gate-source voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TransientBehavior.VoltageBs">
            <summary>
            Gets the bulk-source voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level1.TransientBehavior.GatePtr">
            <summary>
            Elements needed for transient behavior
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.TransientBehavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.MosfetBehaviors.Level1.TransientBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.TransientBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation"></param>
            <param name="context"></param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.TransientBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.TransientBehavior.SpiceSharp#Behaviors#ITimeBehavior#InitializeStates">
            <summary>
            Calculates the state values from the current DC solution.
            </summary>
            <remarks>
            In this method, the initial value is calculated based on the operating point solution,
            and the result is stored in each respective <see cref="T:SpiceSharp.IntegrationMethods.StateDerivative" /> or <see cref="T:SpiceSharp.IntegrationMethods.StateHistory" />.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level1.TransientBehavior.SpiceSharp#Behaviors#ITimeBehavior#Load">
            <summary>
            Perform time-dependent calculations.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Level2.BaseParameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.Mosfet2"/>
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior">
            <summary>
            General behavior of a <see cref="T:SpiceSharp.Components.Mosfet2" />
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.Sig1">
            <summary>
            Signs used in the model
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.EpsilonSilicon">
            <summary>
            The permittivity of silicon.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.MaximumExponentArgument">
            <summary>
            The maximum exponent argument.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.BaseConfiguration">
            <summary>
            Gets the base configuration.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.DrainCurrent">
            <summary>
            Gets or sets the DrainNode current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.BsCurrent">
            <summary>
            Gets or sets the bulk-source current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.BdCurrent">
            <summary>
            Gets or sets the small-signal bulk-drain current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.Transconductance">
            <summary>
            Gets or sets the small-signal transconductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.TransconductanceBs">
            <summary>
            Gets or sets the bulk transconductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.CondDs">
            <summary>
            Gets or sets the small-signal output conductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.CondBs">
            <summary>
            Gets or sets the small-signal bulk-source conductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.CondBd">
            <summary>
            Gets or sets the small-signal bulk-drain conductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.Von">
            <summary>
            Gets or sets the turn-on voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.SaturationVoltageDs">
            <summary>
            Gets or sets the saturation voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.Mode">
            <summary>
            Gets the current mode of operation. +1.0 if vds is positive, -1 if it is negative.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.VoltageGs">
            <summary>
            Gets the gate-source voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.VoltageDs">
            <summary>
            Gets the drain-source voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.VoltageBs">
            <summary>
            Gets the bulk-source voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.VoltageBd">
            <summary>
            Gets the bulk-drain voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.DrainNode">
            <summary>
            Gets the external drain node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.GateNode">
            <summary>
            Gets the gate node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.SourceNode">
            <summary>
            Gets the external source node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.BulkNode">
            <summary>
            Gets the bulk node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.DrainNodePrime">
            <summary>
            Gets the (internal) drain node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.SourceNodePrime">
            <summary>
            Gets the (internal) source node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.DrainDrainPtr">
            <summary>
            Gets the external (drain, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.GateGatePtr">
            <summary>
            Gets the (gate, gate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.SourceSourcePtr">
            <summary>
            Gets the external (source, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.BulkBulkPtr">
            <summary>
            Gets the (bulk, bulk) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.DrainPrimeDrainPrimePtr">
            <summary>
            Gets the (drain, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.SourcePrimeSourcePrimePtr">
            <summary>
            Gets the (source, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.DrainDrainPrimePtr">
            <summary>
            Gets the (external drain, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.GateBulkPtr">
            <summary>
            Gets the (gate, bulk) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.GateDrainPrimePtr">
            <summary>
            Gets the (gate, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.GateSourcePrimePtr">
            <summary>
            Gets the (gate, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.SourceSourcePrimePtr">
            <summary>
            Gets the (external source, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.BulkDrainPrimePtr">
            <summary>
            Gets the (bulk, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.BulkSourcePrimePtr">
            <summary>
            Gets the (bulk, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.DrainPrimeSourcePrimePtr">
            <summary>
            Gets the (drain, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.DrainPrimeDrainPtr">
            <summary>
            Gets the (drain, external drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.BulkGatePtr">
            <summary>
            Gets the (bulk, gate) element
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.DrainPrimeGatePtr">
            <summary>
            Gets the (drain, gate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.SourcePrimeGatePtr">
            <summary>
            Gets the (source, gate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.SourcePrimeSourcePtr">
            <summary>
            Gets the (source, external source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.DrainPrimeBulkPtr">
            <summary>
            Gets the (drain, bulk) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.SourcePrimeBulkPtr">
            <summary>
            Gets the (source, bulk) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.SourcePrimeDrainPrimePtr">
            <summary>
            Gets the (source, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.BulkPtr">
            <summary>
            Gets the bulk RHS element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.DrainPrimePtr">
            <summary>
            Gets the drain RHS element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.SourcePrimePtr">
            <summary>
            Gets the source RHS element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <summary>
            Loads the Y-matrix and Rhs-vector.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.Initialize(System.Double@,System.Double@,System.Double@,System.Boolean@)">
            <summary>
            Initializes the voltages to be used for the current iteration.
            </summary>
            <param name="vgs">The VGS.</param>
            <param name="vds">The VDS.</param>
            <param name="vbs">The VBS.</param>
            <param name="check">if set to <c>true</c> [check].</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.Evaluate(System.Double,System.Double,System.Double)">
            <summary>
            Execute behavior
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#IsConvergent">
            <summary>
            Tests convergence at the device-level.
            </summary>
            <returns>
            <c>true</c> if the device determines the solution converges; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Level2.DynamicParameterBehavior">
            <summary>
            This class allows calculation of dynamic (time-dependent) parameters for a <see cref="T:SpiceSharp.Components.Mosfet2" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.MosfetBehaviors.Level2.BiasingBehavior" />
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.DynamicParameterBehavior.CapBd">
            <summary>
            Gets the bulk-drain junction capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.DynamicParameterBehavior.CapBdSidewall">
            <summary>
            Gets the bulk-drain junction sidewall capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.DynamicParameterBehavior.CapBs">
            <summary>
            Gets the bulk-source junction capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.DynamicParameterBehavior.CapBsSidewall">
            <summary>
            Gets the bulk-source junction sidewall capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.DynamicParameterBehavior.ChargeBs">
            <summary>
            Gets or sets the stored bulk-source charge.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.DynamicParameterBehavior.ChargeBd">
            <summary>
            Gets or sets the stored bulk-drain charge.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.DynamicParameterBehavior.CapGs">
            <summary>
            Gets or sets the capacitance due to gate-source charge storage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.DynamicParameterBehavior.CapGd">
            <summary>
            Gets or sets the capacitance due to gate-drain charge storage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.DynamicParameterBehavior.CapGb">
            <summary>
            Gets or sets the capacitance due to gate-bulk charge storage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.DynamicParameterBehavior.TempCapBd">
            <summary>
            Gets the temperature-modified bulk-drain capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.DynamicParameterBehavior.TempCapBs">
            <summary>
            Gets the temperature-modified bulk-source capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.DynamicParameterBehavior.TempJunctionCap">
            <summary>
            Gets the temperature-modified junction capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.DynamicParameterBehavior.TempJunctionCapSidewall">
            <summary>
            Gets the temperature-modified sidewall junction capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.DynamicParameterBehavior.TempDepletionCap">
            <summary>
            Gets the temperature-modified depletion capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.DynamicParameterBehavior.F2D">
            <summary>
            Gets the implementation-specific factor 2-drain.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.DynamicParameterBehavior.F3D">
            <summary>
            Gets the implementation-specific factor 3-drain.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.DynamicParameterBehavior.F4D">
            <summary>
            Gets the implementation-specific factor 4-drain.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.DynamicParameterBehavior.F2S">
            <summary>
            Gets the implementation-specific factor 2-source.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.DynamicParameterBehavior.F3S">
            <summary>
            Gets the implementation-specific factor 3-source.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.DynamicParameterBehavior.F4S">
            <summary>
            Gets the implementation-specific factor 4-source.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.DynamicParameterBehavior.EffectiveLength">
            <summary>
            Gets the effective length.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.DynamicParameterBehavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.MosfetBehaviors.Level2.DynamicParameterBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.DynamicParameterBehavior.CalculateBaseCapacitances">
            <summary>
            Calculates the base capacitance parameters. Only needs to be calculated
            once when temperature or parameters have changed.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.DynamicParameterBehavior.CalculateCapacitances(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the capacitances based on the current biasing point.
            </summary>
            <param name="vgs">The gate-source voltage.</param>
            <param name="vds">The drain-source voltage.</param>
            <param name="vbs">The bulk-source voltage.</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.DynamicParameterBehavior.CalculateMeyerCharges(System.Double,System.Double)">
            <summary>
            Calculates the Meyer capacitors.
            </summary>
            <param name="vgs">The VGS.</param>
            <param name="vgd">The VGD.</param>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Level2.FrequencyBehavior">
            <summary>
            Frequency behavior for a <see cref="T:SpiceSharp.Components.Mosfet1" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.FrequencyBehavior.CDrainDrainPtr">
            <summary>
            Gets the external (drain, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.FrequencyBehavior.CGateGatePtr">
            <summary>
            Gets the (gate, gate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.FrequencyBehavior.CSourceSourcePtr">
            <summary>
            Gets the external (source, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.FrequencyBehavior.CBulkBulkPtr">
            <summary>
            Gets the (bulk, bulk) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.FrequencyBehavior.CDrainPrimeDrainPrimePtr">
            <summary>
            Gets the (drain, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.FrequencyBehavior.CSourcePrimeSourcePrimePtr">
            <summary>
            Gets the (source, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.FrequencyBehavior.CDrainDrainPrimePtr">
            <summary>
            Gets the (external drain, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.FrequencyBehavior.CGateBulkPtr">
            <summary>
            Gets the (gate, bulk) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.FrequencyBehavior.CGateDrainPrimePtr">
            <summary>
            Gets the (gate, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.FrequencyBehavior.CGateSourcePrimePtr">
            <summary>
            Gets the (gate, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.FrequencyBehavior.CSourceSourcePrimePtr">
            <summary>
            Gets the (external source, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.FrequencyBehavior.CBulkDrainPrimePtr">
            <summary>
            Gets the (bulk, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.FrequencyBehavior.CBulkSourcePrimePtr">
            <summary>
            Gets the (bulk, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.FrequencyBehavior.CDrainPrimeSourcePrimePtr">
            <summary>
            Gets the (drain, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.FrequencyBehavior.CDrainPrimeDrainPtr">
            <summary>
            Gets the (drain, external drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.FrequencyBehavior.CBulkGatePtr">
            <summary>
            Gets the (bulk, gate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.FrequencyBehavior.CDrainPrimeGatePtr">
            <summary>
            Gets the (drain, gate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.FrequencyBehavior.CSourcePrimeGatePtr">
            <summary>
            Gets the (source, gate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.FrequencyBehavior.CSourcePrimeSourcePtr">
            <summary>
            Gets the (source, external source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.FrequencyBehavior.CDrainPrimeBulkPtr">
            <summary>
            Gets the (drain, bulk) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.FrequencyBehavior.CSourcePrimeBulkPtr">
            <summary>
            Gets the (source, bulk) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.FrequencyBehavior.CSourcePrimeDrainPrimePtr">
            <summary>
            Gets the (source, drain) element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.FrequencyBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.MosfetBehaviors.Level2.FrequencyBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.FrequencyBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation"></param>
            <param name="context"></param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.FrequencyBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <summary>
            Initializes the parameters.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <summary>
            Load the Y-matrix and right-hand side vector for frequency domain analysis.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Level2.ModelBaseParameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.Mosfet2Model"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.ModelBaseParameters.Lambda">
            <summary>
            Gets the channel length modulation parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.ModelBaseParameters.NarrowFactor">
            <summary>
            Gets the width effect on the threshold voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.ModelBaseParameters.CriticalField">
            <summary>
            Gets the critical field for mobility degradation.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.ModelBaseParameters.CriticalFieldExp">
            <summary>
            Gets the critical field exponent for mobility degradation.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.ModelBaseParameters.ChannelCharge">
            <summary>
            Gets the total channel charge coefficient.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.ModelBaseParameters.FastSurfaceStateDensity">
            <summary>
            Gets the fast surface state density.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.ModelBaseParameters.MaxDriftVelocity">
            <summary>
            Gets the maximum drift velocity.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.ModelBaseParameters.JunctionDepth">
            <summary>
            Gets the junction depth.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.ModelBaseParameters.CalculateDefaults">
            <summary>
            Method for calculating the default values of derived parameters.
            </summary>
            <remarks>
            These calculations should be run whenever a parameter has been changed.
            </remarks>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Level2.ModelTemperatureBehavior">
            <summary>
            Temperature behavior for a <see cref="T:SpiceSharp.Components.Model"/>
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.MosfetBehaviors.Level2.ModelTemperatureBehavior.EpsilonSilicon">
            <summary>
            The permittivity of silicon
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.ModelTemperatureBehavior.ModelParameters">
            <summary>
            Necessary behaviors and parameters
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.ModelTemperatureBehavior.Factor1">
            <summary>
            Gets the implementation-specific factor 1.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.ModelTemperatureBehavior.VtNominal">
            <summary>
            Gets the nominal thermal voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.ModelTemperatureBehavior.EgFet1">
            <summary>
            Gets the band-gap.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.ModelTemperatureBehavior.PbFactor1">
            <summary>
            Gets the implementation-specific factor PbFactor1
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.ModelTemperatureBehavior.Xd">
            <summary>
            Gets the implementation-specific Xd.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.ModelTemperatureBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.MosfetBehaviors.Level2.ModelTemperatureBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.ModelTemperatureBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.ModelTemperatureBehavior.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <summary>
            Do temperature-dependent calculations.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Level2.NoiseBehavior">
            <summary>
            Noise behavior for a <see cref="T:SpiceSharp.Components.Mosfet1"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.NoiseBehavior.NoiseParameters">
            <summary>
            Gets the noise parameters.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.MosfetBehaviors.Level2.NoiseBehavior.RdNoise">
            <summary>
            Index of the thermal noise generated by the drain resistance.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.MosfetBehaviors.Level2.NoiseBehavior.RsNoise">
            <summary>
            Index of the thermal noise generated by the source resistance.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.MosfetBehaviors.Level2.NoiseBehavior.IdNoise">
            <summary>
            Index of the shot-noise generated by the drain current.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.MosfetBehaviors.Level2.NoiseBehavior.FlickerNoise">
            <summary>
            Index of the flicker-noise.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.NoiseBehavior.MosfetNoise">
            <summary>
            Noise generators
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.NoiseBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.MosfetBehaviors.Level2.NoiseBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.NoiseBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.NoiseBehavior.SpiceSharp#Behaviors#INoiseBehavior#ConnectNoise">
            <summary>
            Connect noise
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.NoiseBehavior.SpiceSharp#Behaviors#INoiseBehavior#Noise">
            <summary>
            Calculate the noise contributions.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Level2.TemperatureBehavior">
            <summary>
            Temperature behavior for a <see cref="T:SpiceSharp.Components.Mosfet2"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TemperatureBehavior.BaseParameters">
            <summary>
            Gets the base parameters.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TemperatureBehavior.ModelParameters">
            <summary>
            Gets the model parameters.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TemperatureBehavior.ModelTemperature">
            <summary>
            Gets the model temperature behavior.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TemperatureBehavior.SourceConductance">
            <summary>
            Gets the source conductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TemperatureBehavior.DrainConductance">
            <summary>
            Gets the drain conductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TemperatureBehavior.SourceResistance">
            <summary>
            Gets the source resistance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TemperatureBehavior.DrainResistance">
            <summary>
            Gets the drain resistance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TemperatureBehavior.SourceVCritical">
            <summary>
            Gets or sets the critical source voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TemperatureBehavior.DrainVCritical">
            <summary>
            Gets or sets the critical drain voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TemperatureBehavior.TempSurfaceMobility">
            <summary>
            Gets the temperature-modified surface mobility.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TemperatureBehavior.TempPhi">
            <summary>
            Gets the temperature-modified phi.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TemperatureBehavior.TempVoltageBi">
            <summary>
            Gets the temperature-modified Vbi.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TemperatureBehavior.TempBulkPotential">
            <summary>
            Gets the temperature-modified bulk potential.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TemperatureBehavior.TempTransconductance">
            <summary>
            Gets the temperature-modified transconductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TemperatureBehavior.TempVt0">
            <summary>
            Gets the temperature-modified threshold voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TemperatureBehavior.Vt">
            <summary>
            Gets the thermal voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TemperatureBehavior.DrainSatCurrent">
            <summary>
            Gets the temperature-modified drain saturation current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TemperatureBehavior.SourceSatCurrent">
            <summary>
            Gets the temperature-modified source saturation current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TemperatureBehavior.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.TemperatureBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.MosfetBehaviors.Level2.TemperatureBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.TemperatureBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior. for the specified simulation.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.TemperatureBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.TemperatureBehavior.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <summary>
            Perform temperature-dependent calculations.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Level2.TransientBehavior">
            <summary>
            Transient behavior for a <see cref="T:SpiceSharp.Components.Mosfet1" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.MosfetBehaviors.Level2.DynamicParameterBehavior" />
            <seealso cref="T:SpiceSharp.Behaviors.ITimeBehavior" />
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TransientBehavior.ChargeBs">
            <summary>
            Gets or sets the stored bulk-source charge.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TransientBehavior.ChargeBd">
            <summary>
            Gets or sets the stored bulk-drain charge.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TransientBehavior.CapGs">
            <summary>
            Gets or sets the capacitance due to gate-source charge storage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TransientBehavior.CapGd">
            <summary>
            Gets or sets the capacitance due to gate-drain charge storage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TransientBehavior.CapGb">
            <summary>
            Gets or sets the capacitance due to gate-bulk charge storage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TransientBehavior.ChargeGs">
            <summary>
            Gets the stored gate-source charge.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TransientBehavior.ChargeGd">
            <summary>
            Gets the stored gate-drain charge.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TransientBehavior.ChargeGb">
            <summary>
            Gets the stored gate-bulk charge.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TransientBehavior.VoltageDs">
            <summary>
            Gets the drain-source voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TransientBehavior.VoltageGs">
            <summary>
            Gets the gate-source voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TransientBehavior.VoltageBs">
            <summary>
            Gets the bulk-source voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level2.TransientBehavior.GatePtr">
            <summary>
            Elements needed for transient behavior
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.TransientBehavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.MosfetBehaviors.Level2.TransientBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.TransientBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation"></param>
            <param name="context"></param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.TransientBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.TransientBehavior.SpiceSharp#Behaviors#ITimeBehavior#InitializeStates">
            <summary>
            Calculates the state values from the current DC solution.
            </summary>
            <remarks>
            In this method, the initial value is calculated based on the operating point solution,
            and the result is stored in each respective <see cref="T:SpiceSharp.IntegrationMethods.StateDerivative" /> or <see cref="T:SpiceSharp.IntegrationMethods.StateHistory" />.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level2.TransientBehavior.SpiceSharp#Behaviors#ITimeBehavior#Load">
            <summary>
            Perform time-dependent calculations.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Level3.BaseParameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.Mosfet3"/>
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior">
            <summary>
            General behavior for a <see cref="T:SpiceSharp.Components.Mosfet3"/>
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.EpsilonSilicon">
            <summary>
            The permittivity of silicon
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.MaximumExponentArgument">
            <summary>
            The maximum exponent argument.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.BaseConfiguration">
            <summary>
            Gets the base configuration.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.DrainCurrent">
            <summary>
            Gets or sets the drain current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.BsCurrent">
            <summary>
            Gets or sets the bulk-source current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.BdCurrent">
            <summary>
            Gets or sets the bulk-drain current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.Transconductance">
            <summary>
            Gets or sets the small-signal transconductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.TransconductanceBs">
            <summary>
            Gets or sets the small-signal bulk transconductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.CondDs">
            <summary>
            Gets or sets the small-signal output conductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.CondBs">
            <summary>
            Gets or sets the small-signal bulk-source conductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.CondBd">
            <summary>
            Gets or sets the bulk-drain conductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.Von">
            <summary>
            Gets or sets the turn-on voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.SaturationVoltageDs">
            <summary>
            Gets or sets the saturation voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.Mode">
            <summary>
            Gets the current mode of operation. +1.0 if vds is positive, -1 if it is negative.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.VoltageGs">
            <summary>
            Gets the gate-source voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.VoltageDs">
            <summary>
            Gets the drain-source voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.VoltageBs">
            <summary>
            Gets the bulk-source voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.VoltageBd">
            <summary>
            Gets the bulk-drain voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.DrainNode">
            <summary>
            Gets the external drain node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.GateNode">
            <summary>
            Gets the gate node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.SourceNode">
            <summary>
            Gets the external source node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.BulkNode">
            <summary>
            Gets the bulk node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.DrainNodePrime">
            <summary>
            Gets the (internal) drain node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.SourceNodePrime">
            <summary>
            Gets the (internal) source node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.DrainDrainPtr">
            <summary>
            Gets the external (drain, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.GateGatePtr">
            <summary>
            Gets the (gate, gate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.SourceSourcePtr">
            <summary>
            Gets the external (source, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.BulkBulkPtr">
            <summary>
            Gets the (bulk, bulk) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.DrainPrimeDrainPrimePtr">
            <summary>
            Gets the (drain, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.SourcePrimeSourcePrimePtr">
            <summary>
            Gets the (source, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.DrainDrainPrimePtr">
            <summary>
            Gets the (external drain, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.GateBulkPtr">
            <summary>
            Gets the (gate, bulk) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.GateDrainPrimePtr">
            <summary>
            Gets the (gate, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.GateSourcePrimePtr">
            <summary>
            Gets the (gate, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.SourceSourcePrimePtr">
            <summary>
            Gets the (external source, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.BulkDrainPrimePtr">
            <summary>
            Gets the (bulk, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.BulkSourcePrimePtr">
            <summary>
            Gets the (bulk, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.DrainPrimeSourcePrimePtr">
            <summary>
            Gets the (drain, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.DrainPrimeDrainPtr">
            <summary>
            Gets the (drain, external drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.BulkGatePtr">
            <summary>
            Gets the (bulk, gate) element
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.DrainPrimeGatePtr">
            <summary>
            Gets the (drain, gate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.SourcePrimeGatePtr">
            <summary>
            Gets the (source, gate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.SourcePrimeSourcePtr">
            <summary>
            Gets the (source, external source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.DrainPrimeBulkPtr">
            <summary>
            Gets the (drain, bulk) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.SourcePrimeBulkPtr">
            <summary>
            Gets the (source, bulk) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.SourcePrimeDrainPrimePtr">
            <summary>
            Gets the (source, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.BulkPtr">
            <summary>
            Gets the bulk RHS element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.DrainPrimePtr">
            <summary>
            Gets the drain RHS element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.SourcePrimePtr">
            <summary>
            Gets the source RHS element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <summary>
            Loads the Y-matrix and Rhs-vector.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.Initialize(System.Double@,System.Double@,System.Double@,System.Boolean@)">
            <summary>
            Initializes the voltages to be used for the current iteration.
            </summary>
            <param name="vgs">The VGS.</param>
            <param name="vds">The VDS.</param>
            <param name="vbs">The VBS.</param>
            <param name="check">if set to <c>true</c> [check].</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.Evaluate(System.Double,System.Double,System.Double)">
            <summary>
            Execute behavior
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#IsConvergent">
            <summary>
            Tests convergence at the device-level.
            </summary>
            <returns>
            <c>true</c> if the device determines the solution converges; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Level3.DynamicParameterBehavior">
            <summary>
            This class allows calculation of dynamic (time-dependent) parameters for a <see cref="T:SpiceSharp.Components.Mosfet3" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.MosfetBehaviors.Level3.BiasingBehavior" />
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.DynamicParameterBehavior.CapBd">
            <summary>
            Gets the bulk-drain junction capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.DynamicParameterBehavior.CapBdSidewall">
            <summary>
            Gets the bulk-drain junction sidewall capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.DynamicParameterBehavior.CapBs">
            <summary>
            Gets the bulk-source junction capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.DynamicParameterBehavior.CapBsSidewall">
            <summary>
            Gets the bulk-source junction sidewall capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.DynamicParameterBehavior.ChargeBs">
            <summary>
            Gets or sets the stored bulk-source charge.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.DynamicParameterBehavior.ChargeBd">
            <summary>
            Gets or sets the stored bulk-drain charge.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.DynamicParameterBehavior.CapGs">
            <summary>
            Gets or sets the capacitance due to gate-source charge storage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.DynamicParameterBehavior.CapGd">
            <summary>
            Gets or sets the capacitance due to gate-drain charge storage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.DynamicParameterBehavior.CapGb">
            <summary>
            Gets or sets the capacitance due to gate-bulk charge storage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.DynamicParameterBehavior.TempCapBd">
            <summary>
            Gets the temperature-modified bulk-drain capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.DynamicParameterBehavior.TempCapBs">
            <summary>
            Gets the temperature-modified bulk-source capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.DynamicParameterBehavior.TempJunctionCap">
            <summary>
            Gets the temperature-modified junction capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.DynamicParameterBehavior.TempJunctionCapSidewall">
            <summary>
            Gets the temperature-modified sidewall junction capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.DynamicParameterBehavior.TempDepletionCap">
            <summary>
            Gets the temperature-modified depletion capacitance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.DynamicParameterBehavior.F2D">
            <summary>
            Gets the implementation-specific factor 2-drain.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.DynamicParameterBehavior.F3D">
            <summary>
            Gets the implementation-specific factor 3-drain.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.DynamicParameterBehavior.F4D">
            <summary>
            Gets the implementation-specific factor 4-drain.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.DynamicParameterBehavior.F2S">
            <summary>
            Gets the implementation-specific factor 2-source.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.DynamicParameterBehavior.F3S">
            <summary>
            Gets the implementation-specific factor 3-source.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.DynamicParameterBehavior.F4S">
            <summary>
            Gets the implementation-specific factor 4-source.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.DynamicParameterBehavior.EffectiveLength">
            <summary>
            Gets the effective length.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.DynamicParameterBehavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.MosfetBehaviors.Level3.DynamicParameterBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.DynamicParameterBehavior.CalculateBaseCapacitances">
            <summary>
            Calculates the base capacitance parameters. Only needs to be calculated
            once when temperature or parameters have changed.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.DynamicParameterBehavior.CalculateCapacitances(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the capacitances based on the current biasing point.
            </summary>
            <param name="vgs">The gate-source voltage.</param>
            <param name="vds">The drain-source voltage.</param>
            <param name="vbs">The bulk-source voltage.</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.DynamicParameterBehavior.CalculateMeyerCharges(System.Double,System.Double)">
            <summary>
            Calculates the Meyer capacitors.
            </summary>
            <param name="vgs">The VGS.</param>
            <param name="vgd">The VGD.</param>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Level3.FrequencyBehavior">
            <summary>
            Frequency behavior for a <see cref="T:SpiceSharp.Components.Mosfet3" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.FrequencyBehavior.CDrainDrainPtr">
            <summary>
            Gets the external (drain, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.FrequencyBehavior.CGateGatePtr">
            <summary>
            Gets the (gate, gate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.FrequencyBehavior.CSourceSourcePtr">
            <summary>
            Gets the external (source, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.FrequencyBehavior.CBulkBulkPtr">
            <summary>
            Gets the (bulk, bulk) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.FrequencyBehavior.CDrainPrimeDrainPrimePtr">
            <summary>
            Gets the (drain, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.FrequencyBehavior.CSourcePrimeSourcePrimePtr">
            <summary>
            Gets the (source, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.FrequencyBehavior.CDrainDrainPrimePtr">
            <summary>
            Gets the (external drain, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.FrequencyBehavior.CGateBulkPtr">
            <summary>
            Gets the (gate, bulk) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.FrequencyBehavior.CGateDrainPrimePtr">
            <summary>
            Gets the (gate, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.FrequencyBehavior.CGateSourcePrimePtr">
            <summary>
            Gets the (gate, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.FrequencyBehavior.CSourceSourcePrimePtr">
            <summary>
            Gets the (external source, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.FrequencyBehavior.CBulkDrainPrimePtr">
            <summary>
            Gets the (bulk, drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.FrequencyBehavior.CBulkSourcePrimePtr">
            <summary>
            Gets the (bulk, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.FrequencyBehavior.CDrainPrimeSourcePrimePtr">
            <summary>
            Gets the (drain, source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.FrequencyBehavior.CDrainPrimeDrainPtr">
            <summary>
            Gets the (drain, external drain) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.FrequencyBehavior.CBulkGatePtr">
            <summary>
            Gets the (bulk, gate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.FrequencyBehavior.CDrainPrimeGatePtr">
            <summary>
            Gets the (drain, gate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.FrequencyBehavior.CSourcePrimeGatePtr">
            <summary>
            Gets the (source, gate) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.FrequencyBehavior.CSourcePrimeSourcePtr">
            <summary>
            Gets the (source, external source) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.FrequencyBehavior.CDrainPrimeBulkPtr">
            <summary>
            Gets the (drain, bulk) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.FrequencyBehavior.CSourcePrimeBulkPtr">
            <summary>
            Gets the (source, bulk) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.FrequencyBehavior.CSourcePrimeDrainPrimePtr">
            <summary>
            Gets the (source, drain) element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.FrequencyBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.MosfetBehaviors.Level3.FrequencyBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.FrequencyBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation"></param>
            <param name="context"></param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.FrequencyBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <summary>
            Initializes the parameters.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <summary>
            Load the Y-matrix and right-hand side vector for frequency domain analysis.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Level3.ModelBaseParameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.Mosfet3Model"/>
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.MosfetBehaviors.Level3.ModelBaseParameters.EpsilonSilicon">
            <summary>
            The permittivity of silicon
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.ModelBaseParameters.Eta">
            <summary>
            Parameters
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.ModelBaseParameters.Kappa">
            <summary>
            Gets the kappa parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.ModelBaseParameters.Theta">
            <summary>
            Gets the gate-source voltage dependence on mobility.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.ModelBaseParameters.FastSurfaceStateDensity">
            <summary>
            Gets the fast surface state density.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.ModelBaseParameters.MaxDriftVelocity">
            <summary>
            Gets the maximum drift velocity.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.ModelBaseParameters.JunctionDepth">
            <summary>
            Gets the junction depth.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.ModelBaseParameters.DeltaWidth">
            <summary>
            Gets or sets the width effect on the threshold voltage.
            </summary>
            <remarks>
            When setting the parameter, spice 3f5 would change the delta parameter, but when asking
            for it, Spice 3f5 would return the narrow factor instead. This behavior is copied here
            for compatibility.
            </remarks>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.ModelBaseParameters.Delta">
            <summary>
            Gets or sets the width effect on the threshold voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.ModelBaseParameters.NarrowFactor">
            <summary>
            Gets or sets the narrowing factor.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.ModelBaseParameters.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.MosfetBehaviors.Level3.ModelBaseParameters"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.ModelBaseParameters.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.MosfetBehaviors.Level3.ModelBaseParameters"/> class.
            </summary>
            <param name="nmos">True for NMOS, false for PMOS</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.ModelBaseParameters.CalculateDefaults">
            <summary>
            Calculate dependent parameters
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.ModelBaseParameters.Clone">
            <summary>
            Creates a deep clone of the parameter set.
            </summary>
            <returns>
            A deep clone of the parameter set.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Level3.ModelTemperatureBehavior">
            <summary>
            Temperature behavior for a <see cref="T:SpiceSharp.Components.Mosfet3Model" />.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.MosfetBehaviors.Level3.ModelTemperatureBehavior.EpsilonSilicon">
            <summary>
            The permittivity of silicon
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.ModelTemperatureBehavior.ModelParameters">
            <summary>
            Necessary behaviors and parameters
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.ModelTemperatureBehavior.CoefficientDepletionLayerWidth">
            <summary>
            Gets the width of the depletion layer.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.ModelTemperatureBehavior.Alpha">
            <summary>
            Gets alpha.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.ModelTemperatureBehavior.Factor1">
            <summary>
            Gets the implementation-specific factor 1.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.ModelTemperatureBehavior.VtNominal">
            <summary>
            Gets the nominal thermal voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.ModelTemperatureBehavior.EgFet1">
            <summary>
            Gets the band-gap.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.ModelTemperatureBehavior.PbFactor1">
            <summary>
            Gets the implementation-specific factor PbFactor1
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.ModelTemperatureBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.MosfetBehaviors.Level3.ModelTemperatureBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.ModelTemperatureBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.ModelTemperatureBehavior.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <summary>
            Do temperature-dependent calculations.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Level3.NoiseBehavior">
            <summary>
            Noise behavior for a <see cref="T:SpiceSharp.Components.Mosfet3"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.NoiseBehavior.NoiseParameters">
            <summary>
            Gets the noise parameters.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.MosfetBehaviors.Level3.NoiseBehavior.RdNoise">
            <summary>
            Index of the thermal noise generated by the drain resistance.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.MosfetBehaviors.Level3.NoiseBehavior.RsNoise">
            <summary>
            Index of the thermal noise generated by the source resistance.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.MosfetBehaviors.Level3.NoiseBehavior.IdNoise">
            <summary>
            Index of the shot-noise generated by the drain current.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.MosfetBehaviors.Level3.NoiseBehavior.FlickerNoise">
            <summary>
            Index of the flicker-noise.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.NoiseBehavior.MosfetNoise">
            <summary>
            Noise generators
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.NoiseBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.MosfetBehaviors.Level3.NoiseBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.NoiseBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.NoiseBehavior.SpiceSharp#Behaviors#INoiseBehavior#ConnectNoise">
            <summary>
            Connect noise
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.NoiseBehavior.SpiceSharp#Behaviors#INoiseBehavior#Noise">
            <summary>
            Calculate the noise contributions.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Level3.TemperatureBehavior">
            <summary>
            Temperature behavior for a <see cref="T:SpiceSharp.Components.Mosfet3"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TemperatureBehavior.BaseParameters">
            <summary>
            Gets the base parameters.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TemperatureBehavior.ModelParameters">
            <summary>
            Gets the model parameters.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TemperatureBehavior.ModelTemperature">
            <summary>
            Gets the model temperature behavior.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TemperatureBehavior.SourceConductance">
            <summary>
            Gets the source conductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TemperatureBehavior.DrainConductance">
            <summary>
            Gets the drain conductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TemperatureBehavior.SourceResistance">
            <summary>
            Gets the source resistance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TemperatureBehavior.DrainResistance">
            <summary>
            Gets the drain resistance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TemperatureBehavior.SourceVCritical">
            <summary>
            Gets or sets the critical source voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TemperatureBehavior.DrainVCritical">
            <summary>
            Gets or sets the critical drain voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TemperatureBehavior.TempSurfaceMobility">
            <summary>
            Gets the temperature-modified surface mobility.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TemperatureBehavior.TempPhi">
            <summary>
            Gets the temperature-modified phi.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TemperatureBehavior.TempVoltageBi">
            <summary>
            Gets the temperature-modified Vbi.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TemperatureBehavior.TempBulkPotential">
            <summary>
            Gets the temperature-modified bulk potential.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TemperatureBehavior.TempTransconductance">
            <summary>
            Gets the temperature-modified transconductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TemperatureBehavior.TempVt0">
            <summary>
            Gets the temperature-modified threshold voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TemperatureBehavior.Vt">
            <summary>
            Gets the thermal voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TemperatureBehavior.DrainSatCurrent">
            <summary>
            Gets the temperature-modified drain saturation current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TemperatureBehavior.SourceSatCurrent">
            <summary>
            Gets the temperature-modified source saturation current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TemperatureBehavior.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.TemperatureBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.MosfetBehaviors.Level3.TemperatureBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.TemperatureBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior. for the specified simulation.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.TemperatureBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.TemperatureBehavior.SpiceSharp#Behaviors#ITemperatureBehavior#Temperature">
            <summary>
            Perform temperature-dependent calculations.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.MosfetBehaviors.Level3.TransientBehavior">
            <summary>
            Transient behavior for a <see cref="T:SpiceSharp.Components.Mosfet3" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.MosfetBehaviors.Level3.DynamicParameterBehavior" />
            <seealso cref="T:SpiceSharp.Behaviors.ITimeBehavior" />
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TransientBehavior.ChargeBs">
            <summary>
            Gets or sets the stored bulk-source charge.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TransientBehavior.ChargeBd">
            <summary>
            Gets or sets the stored bulk-drain charge.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TransientBehavior.CapGs">
            <summary>
            Gets or sets the capacitance due to gate-source charge storage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TransientBehavior.CapGd">
            <summary>
            Gets or sets the capacitance due to gate-drain charge storage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TransientBehavior.CapGb">
            <summary>
            Gets or sets the capacitance due to gate-bulk charge storage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TransientBehavior.ChargeGs">
            <summary>
            Gets the stored gate-source charge.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TransientBehavior.ChargeGd">
            <summary>
            Gets the stored gate-drain charge.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TransientBehavior.ChargeGb">
            <summary>
            Gets the stored gate-bulk charge.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TransientBehavior.VoltageDs">
            <summary>
            Gets the drain-source voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TransientBehavior.VoltageGs">
            <summary>
            Gets the gate-source voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TransientBehavior.VoltageBs">
            <summary>
            Gets the bulk-source voltage.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.MosfetBehaviors.Level3.TransientBehavior.GatePtr">
            <summary>
            Elements needed for transient behavior
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.TransientBehavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.MosfetBehaviors.Level3.TransientBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.TransientBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation"></param>
            <param name="context"></param>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.TransientBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.TransientBehavior.SpiceSharp#Behaviors#ITimeBehavior#InitializeStates">
            <summary>
            Calculates the state values from the current DC solution.
            </summary>
            <remarks>
            In this method, the initial value is calculated based on the operating point solution,
            and the result is stored in each respective <see cref="T:SpiceSharp.IntegrationMethods.StateDerivative" /> or <see cref="T:SpiceSharp.IntegrationMethods.StateHistory" />.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Components.MosfetBehaviors.Level3.TransientBehavior.SpiceSharp#Behaviors#ITimeBehavior#Load">
            <summary>
            Perform time-dependent calculations.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.Mosfet1">
            <summary>
            A Mosfet.
            Level 1, Shichman-Hodges.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Mosfet1.Mosfet1PinCount">
            <summary>
            Constants
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Mosfet1.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.Mosfet1"/> class.
            </summary>
            <param name="name">The name of the device</param>
        </member>
        <member name="M:SpiceSharp.Components.Mosfet1.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Mosfet1"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="d">The drain node.</param>
            <param name="g">The gate node.</param>
            <param name="s">The source node.</param>
            <param name="b">The bulk node.</param>
            <param name="model">The mosfet model.</param>
        </member>
        <member name="T:SpiceSharp.Components.Mosfet1Model">
            <summary>
            A model for a <see cref="T:SpiceSharp.Components.Mosfet1"/>
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Mosfet1Model.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.Mosfet1Model"/> class.
            </summary>
            <param name="name">The name of the device</param>
        </member>
        <member name="T:SpiceSharp.Components.Mosfet2">
            <summary>
            A MOS2 Mosfet.
            Level 2, A. Vladimirescu and S. Liu, The Simulation of MOS Integrated Circuits Using SPICE2, ERL Memo No. M80/7, Electronics Research Laboratory University of California, Berkeley, October 1980.
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Mosfet2.Mosfet2PinCount">
            <summary>
            Constants
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Mosfet2.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.Mosfet2"/> class.
            </summary>
            <param name="name">The name of the device</param>
        </member>
        <member name="T:SpiceSharp.Components.Mosfet2Model">
            <summary>
            A model for a <see cref="T:SpiceSharp.Components.Mosfet2"/>
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Mosfet2Model.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.Mosfet2Model"/> class.
            </summary>
            <param name="name">The name of the device</param>
        </member>
        <member name="T:SpiceSharp.Components.Mosfet3">
            <summary>
            A MOS3 Mosfet
            Level 3, a semi-empirical model(see reference for level 3).
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Mosfet3.Mosfet3PinCount">
            <summary>
            Constants
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Mosfet3.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.Mosfet3"/> class.
            </summary>
            <param name="name">The name of the device</param>
        </member>
        <member name="T:SpiceSharp.Components.Mosfet3Model">
            <summary>
            A model for a <see cref="T:SpiceSharp.Components.Mosfet3"/>
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Mosfet3Model.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.Mosfet3Model"/> class.
            </summary>
            <param name="name">The name of the device</param>
        </member>
        <member name="M:SpiceSharp.Components.Mosfet3Model.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.Mosfet3Model"/> class.
            </summary>
            <param name="name">Name</param>
            <param name="nmos">True for NMOS transistors, false for PMOS transistors</param>
        </member>
        <member name="T:SpiceSharp.Components.Semiconductors.Semiconductor">
            <summary>
            A class with static methods for semiconductor devices
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Semiconductors.Semiconductor.LimitJunction(System.Double,System.Double,System.Double,System.Double,System.Boolean@)">
            <summary>
            Limit the per-iteration change of PN junction voltages
            Defined as DEVpnjlim in devsup.c
            </summary>
            <remarks>
            Taken from ngSpice, where it was fixed by Alan Gillespie's code.
            </remarks>
            <param name="newVoltage">New voltage</param>
            <param name="oldVoltage">Old voltage</param>
            <param name="thermalVoltage">Thermal voltage</param>
            <param name="criticalVoltage">Critical voltage</param>
            <param name="limited">Limited flag</param>
            <returns></returns>
        </member>
        <member name="T:SpiceSharp.Components.SwitchBehaviors.AcceptBehavior">
            <summary>
            Accepting behavior for switches.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.SwitchBehaviors.AcceptBehavior.#ctor(System.String,SpiceSharp.Components.SwitchBehaviors.Controller)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.SwitchBehaviors.AcceptBehavior"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:SpiceSharp.Components.SwitchBehaviors.AcceptBehavior.SpiceSharp#Behaviors#IAcceptBehavior#Probe">
            <summary>
            Called when a new timepoint is being tested.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.SwitchBehaviors.AcceptBehavior.SpiceSharp#Behaviors#IAcceptBehavior#Accept">
            <summary>
            Accepts the current timepoint.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.SwitchBehaviors.BaseParameters">
            <summary>
            Base parameters for a switch.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSet" />
        </member>
        <member name="M:SpiceSharp.Components.SwitchBehaviors.BaseParameters.SetZeroStateOn">
            <summary>
            Sets the switch initially to conducting.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.SwitchBehaviors.BaseParameters.SetZeroStateOff">
            <summary>
            Set the switch initially to non-conducting.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.BaseParameters.ZeroState">
            <summary>
            Gets or sets initial state.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.SwitchBehaviors.BiasingBehavior">
            <summary>
            (DC) biasing behavior for switches.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.BiasingBehavior.BaseParameters">
            <summary>
            Gets the base parameters.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.BiasingBehavior.ModelParameters">
            <summary>
            Gets the model parameters.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.BiasingBehavior.PreviousState">
            <summary>
            Gets or sets the old state of the switch
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.BiasingBehavior.UseOldState">
            <summary>
            Flag for using the old state or not
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.BiasingBehavior.CurrentState">
            <summary>
            Gets the current state of the switch
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.BiasingBehavior.Conductance">
            <summary>
            Gets the currently active conductance.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.SwitchBehaviors.BiasingBehavior.GetVoltage">
            <summary>
            Gets the voltage over the switch.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Components.SwitchBehaviors.BiasingBehavior.GetCurrent">
            <summary>
            Gets the current through the switch.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Components.SwitchBehaviors.BiasingBehavior.GetPower">
            <summary>
            Gets the power dissipated by the switch.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.BiasingBehavior.PosNode">
            <summary>
            Gets the positive node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.BiasingBehavior.NegNode">
            <summary>
            Gets the negative node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.BiasingBehavior.PosPosPtr">
            <summary>
            Gets the (positive, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.BiasingBehavior.NegPosPtr">
            <summary>
            Gets the (negative, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.BiasingBehavior.PosNegPtr">
            <summary>
            Gets the (positive, negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.BiasingBehavior.NegNegPtr">
            <summary>
            Gets the (negative, negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.BiasingBehavior.Method">
            <summary>
            Gets the method used for switching.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.SwitchBehaviors.BiasingBehavior.#ctor(System.String,SpiceSharp.Components.SwitchBehaviors.Controller)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.SwitchBehaviors.BiasingBehavior"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="controller">The controller.</param>
        </member>
        <member name="M:SpiceSharp.Components.SwitchBehaviors.BiasingBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.SwitchBehaviors.BiasingBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.SwitchBehaviors.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <summary>
            Loads the Y-matrix and Rhs-vector.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.SwitchBehaviors.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#IsConvergent">
            <summary>
            Tests convergence at the device-level.
            </summary>
            <returns>
            <c>true</c> if the device determines the solution converges; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.SwitchBehaviors.Controller">
            <summary>
            This class can calculate the controlling input of a switch.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.SwitchBehaviors.Controller.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior. for the specified simulation.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.SwitchBehaviors.Controller.GetValue(SpiceSharp.Simulations.BaseSimulationState)">
            <summary>
            Gets the value that is controlling the switch.
            </summary>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="T:SpiceSharp.Components.SwitchBehaviors.CurrentControlled">
            <summary>
            Controller for making a switch current-controlled.
            </summary>
            <seealso cref="T:SpiceSharp.Components.SwitchBehaviors.Controller" />
        </member>
        <member name="F:SpiceSharp.Components.SwitchBehaviors.CurrentControlled._loadBehavior">
            <summary>
            The load behavior of the voltage source that measures the current
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.SwitchBehaviors.CurrentControlled.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior. for the specified simulation.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.SwitchBehaviors.CurrentControlled.GetValue(SpiceSharp.Simulations.BaseSimulationState)">
            <summary>
            Gets the value that is controlling the switch.
            </summary>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="T:SpiceSharp.Components.SwitchBehaviors.CurrentModelParameters">
            <summary>
            Model parameters for a <see cref="T:SpiceSharp.Components.CurrentSwitchModel" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.SwitchBehaviors.ModelBaseParameters" />
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.CurrentModelParameters.Threshold">
            <summary>
            Gets the threshold current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.CurrentModelParameters.Hysteresis">
            <summary>
            Gets the hysteresis current.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.SwitchBehaviors.FrequencyBehavior">
            <summary>
            Frequency behavior for switches.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.FrequencyBehavior.CPosPosPtr">
            <summary>
            Gets the (positive, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.FrequencyBehavior.CNegPosPtr">
            <summary>
            Gets the (negative, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.FrequencyBehavior.CPosNegPtr">
            <summary>
            Gets the (positive, negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.FrequencyBehavior.CNegNegPtr">
            <summary>
            Gets the (negative, negative) element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.SwitchBehaviors.FrequencyBehavior.#ctor(System.String,SpiceSharp.Components.SwitchBehaviors.Controller)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.SwitchBehaviors.FrequencyBehavior"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:SpiceSharp.Components.SwitchBehaviors.FrequencyBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.SwitchBehaviors.FrequencyBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.SwitchBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <summary>
            Initialize small-signal parameters.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.SwitchBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <summary>
            Load the Y-matrix and right-hand side vector for frequency domain analysis.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.SwitchBehaviors.ModelBaseParameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.CurrentSwitchModel"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.ModelBaseParameters.OnResistance">
            <summary>
            Gets the resistance parameter when closed.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.ModelBaseParameters.OffResistance">
            <summary>
            Gets the resistance parameter when open.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.ModelBaseParameters.Threshold">
            <summary>
            Gets the threshold parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.ModelBaseParameters.Hysteresis">
            <summary>
            Gets the hysteresis parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.ModelBaseParameters.OnConductance">
            <summary>
            Gets the on conductance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.ModelBaseParameters.OffConductance">
            <summary>
            Gets the off conductance.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.SwitchBehaviors.ModelBaseParameters.CalculateDefaults">
            <summary>
            Method for calculating the default values of derived parameters.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.SwitchBehaviors.VoltageControlled">
            <summary>
            Controller for making a switch voltage-controlled.
            </summary>
            <seealso cref="T:SpiceSharp.Components.SwitchBehaviors.Controller" />
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.VoltageControlled.ContPosNode">
            <summary>
            Gets the controlling positive node index.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.VoltageControlled.ContNegNode">
            <summary>
            Gets the controlling negative node index.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.SwitchBehaviors.VoltageControlled.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior. for the specified simulation.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.SwitchBehaviors.VoltageControlled.GetValue(SpiceSharp.Simulations.BaseSimulationState)">
            <summary>
            Gets the value that is controlling the switch.
            </summary>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="T:SpiceSharp.Components.SwitchBehaviors.VoltageModelParameters">
            <summary>
            Model parameters for a <see cref="T:SpiceSharp.Components.VoltageSwitchModel" />.
            </summary>
            <seealso cref="T:SpiceSharp.Components.SwitchBehaviors.ModelBaseParameters" />
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.VoltageModelParameters.Threshold">
            <summary>
            Gets the threshold current.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.SwitchBehaviors.VoltageModelParameters.Hysteresis">
            <summary>
            Gets the hysteresis current.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.CurrentSwitch">
            <summary>
            A current-controlled switch
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentSwitch.ControllingName">
            <summary>
            Controlling source name
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.CurrentSwitch.CurrentSwitchPinCount">
            <summary>
            Constants
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSwitch.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CurrentSwitch"/> class.
            </summary>
            <param name="name">The name of the current-controlled switch</param>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSwitch.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CurrentSwitch"/> class.
            </summary>
            <param name="name">The name of the current-controlled switch</param>
            <param name="pos">The positive node</param>
            <param name="neg">The negative node</param>
            <param name="controllingSource">The controlling voltage source</param>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSwitch.CreateBehaviors(System.Type[],SpiceSharp.Simulations.Simulation,SpiceSharp.Circuits.EntityCollection)">
            <summary>
            Create the behaviors for the <see cref="T:SpiceSharp.Components.CurrentSwitch" />.
            </summary>
            <param name="types">The behavior types.</param>
            <param name="simulation">The simulation.</param>
            <param name="entities">The entities.</param>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSwitch.BuildBindingContext(SpiceSharp.Simulations.Simulation)">
            <summary>
            Build the binding context.
            </summary>
            <param name="simulation">The simulation.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSwitch.Clone(SpiceSharp.Circuits.InstanceData)">
            <summary>
            Clone the current controlled switch
            </summary>
            <param name="data">Instance data.</param>
            <returns></returns>
        </member>
        <member name="T:SpiceSharp.Components.CurrentSwitchModel">
            <summary>
            A model for a <see cref="T:SpiceSharp.Components.CurrentSwitch"/>
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentSwitchModel.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CurrentSwitchModel"/> class.
            </summary>
            <param name="name">The name of the model</param>
        </member>
        <member name="T:SpiceSharp.Components.VoltageSwitch">
            <summary>
            A voltage-controlled switch
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.VoltageSwitch.VoltageSwitchPinCount">
            <summary>
            Constants
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSwitch.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.VoltageSwitch"/> class.
            </summary>
            <param name="name">The name of the voltage-controlled switch</param>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSwitch.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.VoltageSwitch"/> class.
            </summary>
            <param name="name">The name of the voltage-controlled switch</param>
            <param name="pos">The positive node</param>
            <param name="neg">The negative node</param>
            <param name="controlPos">The positive controlling node</param>
            <param name="controlNeg">The negative controlling node</param>
        </member>
        <member name="T:SpiceSharp.Components.VoltageSwitchModel">
            <summary>
            A model for a <see cref="T:SpiceSharp.Components.VoltageSwitch"/>
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSwitchModel.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.VoltageSwitchModel"/> class.
            </summary>
            <param name="name">The name of the model</param>
        </member>
        <member name="T:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.BaseParameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.CurrentControlledVoltageSource"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.BaseParameters.Coefficient">
            <summary>
            Parameters
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.BaseParameters.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.BaseParameters"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.BaseParameters.#ctor(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.BaseParameters"/> class.
            </summary>
            <param name="gain"></param>
        </member>
        <member name="T:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.BiasingBehavior">
            <summary>
            General behavior for <see cref="T:SpiceSharp.Components.CurrentControlledVoltageSource"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.BiasingBehavior.BaseParameters">
            <summary>
            Gets the base parameters.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.BiasingBehavior.VoltageLoad">
            <summary>
            Gets the voltage biasing behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.BiasingBehavior.GetCurrent">
            <summary>
            Gets the current through the source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.BiasingBehavior.GetVoltage">
            <summary>
            Gets the voltage applied by the source.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.BiasingBehavior.GetPower">
            <summary>
            Gets the power dissipated by the source.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.BiasingBehavior.PosNode">
            <summary>
            Gets the positive node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.BiasingBehavior.NegNode">
            <summary>
            Gets the negative node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.BiasingBehavior.ContBranchEq">
            <summary>
            Gets the controlling branch equation row.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.BiasingBehavior.BranchEq">
            <summary>
            Gets the branch equation row.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.BiasingBehavior.PosBranchPtr">
            <summary>
            Gets the (positive, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.BiasingBehavior.NegBranchPtr">
            <summary>
            Gets the (negative, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.BiasingBehavior.BranchPosPtr">
            <summary>
            Gets the (branch, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.BiasingBehavior.BranchNegPtr">
            <summary>
            Gets the (branch, negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.BiasingBehavior.BranchControlBranchPtr">
            <summary>
            Gets the (controlling branch, branch) element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.BiasingBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.BiasingBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.BiasingBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.BiasingBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <summary>
            Execute behavior
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#IsConvergent">
            <summary>
            Tests convergence at the device-level.
            </summary>
            <returns>
            <c>true</c> if the device determines the solution converges; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.FrequencyBehavior">
            <summary>
            AC behavior for <see cref="T:SpiceSharp.Components.CurrentControlledVoltageSource"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.FrequencyBehavior.CPosBranchPtr">
            <summary>
            Gets the (positive, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.FrequencyBehavior.CNegBranchPtr">
            <summary>
            Gets the (negative, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.FrequencyBehavior.CBranchPosPtr">
            <summary>
            Gets the (branch, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.FrequencyBehavior.CBranchNegPtr">
            <summary>
            Gets the (branch, negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.FrequencyBehavior.CBranchControlBranchPtr">
            <summary>
            Gets the (controlling branch, branch) element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.FrequencyBehavior.GetVoltage(SpiceSharp.Simulations.ComplexSimulationState)">
            <summary>
            Gets the voltage applied by the source.
            </summary>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.FrequencyBehavior.GetCurrent(SpiceSharp.Simulations.ComplexSimulationState)">
            <summary>
            Gets the current through the source.
            </summary>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.FrequencyBehavior.GetPower(SpiceSharp.Simulations.ComplexSimulationState)">
            <summary>
            Gets the power dissipated by the source.
            </summary>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.FrequencyBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.FrequencyBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.FrequencyBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation"></param>
            <param name="context"></param>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.FrequencyBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <summary>
            Initialize small-signal parameters.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSourceBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <summary>
            Execute behavior for AC analysis
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.CurrentControlledVoltageSource">
            <summary>
            A current-controlled voltage source
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.CurrentControlledVoltageSource.ControllingName">
            <summary>
            Controlling source name
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.CurrentControlledVoltageSource.CurrentControlledVoltageSourcePinCount">
            <summary>
            Constants
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSource.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CurrentControlledVoltageSource"/> class.
            </summary>
            <param name="name">The name of the current-controlled current source</param>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSource.#ctor(System.String,System.String,System.String,System.String,System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.CurrentControlledVoltageSource"/> class.
            </summary>
            <param name="name">The name of the current-controlled current source</param>
            <param name="pos">The positive node</param>
            <param name="neg">The negative node</param>
            <param name="controllingSource">The controlling voltage source name</param>
            <param name="gain">The transresistance (gain)</param>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSource.CreateBehaviors(System.Type[],SpiceSharp.Simulations.Simulation,SpiceSharp.Circuits.EntityCollection)">
            <summary>
            Creates behaviors of the specified type.
            </summary>
            <param name="types"></param>
            <param name="simulation">The simulation requesting the behaviors.</param>
            <param name="entities">The entities being processed.</param>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSource.BuildBindingContext(SpiceSharp.Simulations.Simulation)">
            <summary>
            Build the binding context.
            </summary>
            <param name="simulation">The simulation.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Components.CurrentControlledVoltageSource.Clone(SpiceSharp.Circuits.InstanceData)">
            <summary>
            Clone the current controlled current source
            </summary>
            <param name="data">Instance data.</param>
            <returns></returns>
        </member>
        <member name="T:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.BaseParameters">
            <summary>
            Base parameters for a <see cref="T:SpiceSharp.Components.VoltageControlledVoltageSource"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.BaseParameters.Coefficient">
            <summary>
            Parameters
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.BaseParameters.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.BaseParameters"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.BaseParameters.#ctor(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.BaseParameters"/> class.
            </summary>
            <param name="gain">Gain</param>
        </member>
        <member name="T:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.BiasingBehavior">
            <summary>
            General behavior for a <see cref="T:SpiceSharp.Components.VoltageControlledVoltageSource"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.BiasingBehavior.BaseParameters">
            <summary>
            Gets the base parameters.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.BiasingBehavior.GetCurrent">
            <summary>
            Gets the current through the source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.BiasingBehavior.GetVoltage">
            <summary>
            Gets the voltage applied by the source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.BiasingBehavior.GetPower">
            <summary>
            Gets the power dissipated by the source.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.BiasingBehavior.PosNode">
            <summary>
            Gets the positive node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.BiasingBehavior.NegNode">
            <summary>
            Gets the negative node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.BiasingBehavior.ContPosNode">
            <summary>
            Gets the controlling positive node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.BiasingBehavior.ContNegNode">
            <summary>
            Gets the controlling negative node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.BiasingBehavior.BranchEq">
            <summary>
            Gets the branch equation.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.BiasingBehavior.PosBranchPtr">
            <summary>
            Gets the (positive, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.BiasingBehavior.NegBranchPtr">
            <summary>
            Gets the (negative, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.BiasingBehavior.BranchPosPtr">
            <summary>
            Gets the (branch, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.BiasingBehavior.BranchNegPtr">
            <summary>
            Gets the (branch, negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.BiasingBehavior.BranchControlPosPtr">
            <summary>
            Gets the (branch, controlling positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.BiasingBehavior.BranchControlNegPtr">
            <summary>
            Gets the (branch, controlling negative) element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.BiasingBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.BiasingBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.BiasingBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.BiasingBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <summary>
            Execute behavior
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#IsConvergent">
            <summary>
            Tests convergence at the device-level.
            </summary>
            <returns>
            <c>true</c> if the device determines the solution converges; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.FrequencyBehavior">
            <summary>
            AC behavior for a <see cref="T:SpiceSharp.Components.VoltageControlledVoltageSource"/>
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.FrequencyBehavior.GetVoltage(SpiceSharp.Simulations.ComplexSimulationState)">
            <summary>
            Gets the voltage applied by the source.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.FrequencyBehavior.GetCurrent(SpiceSharp.Simulations.ComplexSimulationState)">
            <summary>
            Gets the current through the source.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.FrequencyBehavior.GetPower(SpiceSharp.Simulations.ComplexSimulationState)">
            <summary>
            Gets the power dissipated by the source.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.FrequencyBehavior.CPosBranchPtr">
            <summary>
            Gets the (positive, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.FrequencyBehavior.CNegBranchPtr">
            <summary>
            Gets the (negative, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.FrequencyBehavior.CBranchPosPtr">
            <summary>
            Gets the (branch, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.FrequencyBehavior.CBranchNegPtr">
            <summary>
            Gets the (branch, negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.FrequencyBehavior.CBranchControlPosPtr">
            <summary>
            Gets the (branch, controlling positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.FrequencyBehavior.CBranchControlNegPtr">
            <summary>
            Gets the (branch, controlling negative) element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.FrequencyBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.FrequencyBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.FrequencyBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation"></param>
            <param name="context"></param>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.FrequencyBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <summary>
            Initializes the parameters.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSourceBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <summary>
            Execute behavior for AC analysis
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.VoltageControlledVoltageSource">
            <summary>
            A voltage-controlled current-source
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.VoltageControlledVoltageSource.VoltageControlledVoltageSourcePinCount">
            <summary>
            Constants
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSource.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.VoltageControlledVoltageSource"/> class.
            </summary>
            <param name="name">The name of the voltage-controlled voltage source</param>
        </member>
        <member name="M:SpiceSharp.Components.VoltageControlledVoltageSource.#ctor(System.String,System.String,System.String,System.String,System.String,System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.VoltageControlledVoltageSource"/> class.
            </summary>
            <param name="name">The name of the voltage-controlled voltage source</param>
            <param name="pos">The positive node</param>
            <param name="neg">The negative node</param>
            <param name="controlPos">The positive controlling node</param>
            <param name="controlNeg">The negative controlling node</param>
            <param name="gain">The voltage gain</param>
        </member>
        <member name="T:SpiceSharp.Components.VoltageSourceBehaviors.AcceptBehavior">
            <summary>
            Accept behavior for a <see cref="T:SpiceSharp.Components.VoltageSource"/>
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSourceBehaviors.AcceptBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.VoltageSourceBehaviors.AcceptBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSourceBehaviors.AcceptBehavior.SpiceSharp#Behaviors#IAcceptBehavior#Probe">
            <summary>
            Called when a new timepoint is being tested.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSourceBehaviors.AcceptBehavior.SpiceSharp#Behaviors#IAcceptBehavior#Accept">
            <summary>
            Accept the current timepoint
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.VoltageSourceBehaviors.BiasingBehavior">
            <summary>
            General behavior for <see cref="T:SpiceSharp.Components.VoltageSource"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageSourceBehaviors.BiasingBehavior.BaseParameters">
            <summary>
            Gets the base parameters.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSourceBehaviors.BiasingBehavior.GetCurrent">
            <summary>
            Gets the current through the source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSourceBehaviors.BiasingBehavior.GetPower">
            <summary>
            Gets the power dissipated by the source.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiceSharp.Components.VoltageSourceBehaviors.BiasingBehavior.Voltage">
            <summary>
            Gets the voltage applied by the source.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageSourceBehaviors.BiasingBehavior.PosNode">
            <summary>
            Gets the positive node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageSourceBehaviors.BiasingBehavior.NegNode">
            <summary>
            Gets the negative node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageSourceBehaviors.BiasingBehavior.BranchEq">
            <summary>
            Gets the branch equation.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageSourceBehaviors.BiasingBehavior.PosBranchPtr">
            <summary>
            Gets the (positive, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageSourceBehaviors.BiasingBehavior.NegBranchPtr">
            <summary>
            Gets the (negative, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageSourceBehaviors.BiasingBehavior.BranchPosPtr">
            <summary>
            Gets the (branch, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageSourceBehaviors.BiasingBehavior.BranchNegPtr">
            <summary>
            Gets the (branch, negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageSourceBehaviors.BiasingBehavior.BranchPtr">
            <summary>
            Gets the branch RHS element.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSourceBehaviors.BiasingBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.VoltageSourceBehaviors.BiasingBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSourceBehaviors.BiasingBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSourceBehaviors.BiasingBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSourceBehaviors.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#Load">
            <summary>
            Execute behavior
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSourceBehaviors.BiasingBehavior.SpiceSharp#Behaviors#IBiasingBehavior#IsConvergent">
            <summary>
            Tests convergence at the device-level.
            </summary>
            <returns>
            <c>true</c> if the device determines the solution converges; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SpiceSharp.Components.VoltageSourceBehaviors.FrequencyBehavior">
            <summary>
            AC behavior for <see cref="T:SpiceSharp.Components.VoltageSource"/>
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageSourceBehaviors.FrequencyBehavior.FrequencyParameters">
            <summary>
            Gets the frequency parameters.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageSourceBehaviors.FrequencyBehavior.CPosBranchPtr">
            <summary>
            Gets the (positive, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageSourceBehaviors.FrequencyBehavior.CNegBranchPtr">
            <summary>
            Gets the (negative, branch) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageSourceBehaviors.FrequencyBehavior.CBranchPosPtr">
            <summary>
            Gets the (branch, positive) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageSourceBehaviors.FrequencyBehavior.CBranchNegPtr">
            <summary>
            Gets the (branch, negative) element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageSourceBehaviors.FrequencyBehavior.CBranchPtr">
            <summary>
            Gets the branch RHS element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.VoltageSourceBehaviors.FrequencyBehavior.ComplexVoltage">
            <summary>
            Gets the complex voltage applied by the source.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSourceBehaviors.FrequencyBehavior.GetComplexCurrent">
            <summary>
            Gets the current through the source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSourceBehaviors.FrequencyBehavior.GetComplexPower">
            <summary>
            Gets the power through the source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSourceBehaviors.FrequencyBehavior.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.VoltageSourceBehaviors.FrequencyBehavior"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSourceBehaviors.FrequencyBehavior.Bind(SpiceSharp.Simulations.Simulation,SpiceSharp.Behaviors.BindingContext)">
            <summary>
            Bind the behavior.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSourceBehaviors.FrequencyBehavior.Unbind">
            <summary>
            Unbind the behavior.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSourceBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#InitializeParameters">
            <summary>
            Initializes the parameters.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSourceBehaviors.FrequencyBehavior.SpiceSharp#Behaviors#IFrequencyBehavior#Load">
            <summary>
            Execute behavior for AC analysis
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.VoltageSource">
            <summary>
            An independent voltage source
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.VoltageSource.VoltageSourcePinCount">
            <summary>
            Constants
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSource.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.VoltageSource"/> class.
            </summary>
            <param name="name">The name</param>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSource.#ctor(System.String,System.String,System.String,System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.VoltageSource"/> class.
            </summary>
            <param name="name">The name of the voltage source</param>
            <param name="pos">The positive node</param>
            <param name="neg">The negative node</param>
            <param name="dc">The DC value</param>
        </member>
        <member name="M:SpiceSharp.Components.VoltageSource.#ctor(System.String,System.String,System.String,SpiceSharp.Components.Waveform)">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.VoltageSource"/> class.
            </summary>
            <param name="name">The name of the voltage source</param>
            <param name="pos">The positive node</param>
            <param name="neg">The negative node</param>
            <param name="waveform">The waveform</param>
        </member>
        <member name="T:SpiceSharp.Components.Pulse">
            <summary>
            This class implements a pulse waveform.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Waveform" />
        </member>
        <member name="P:SpiceSharp.Components.Pulse.InitialValue">
            <summary>
            Gets the initial value.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Pulse.PulsedValue">
            <summary>
            Gets the pulsed value.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Pulse.Delay">
            <summary>
            Gets the delay of the waveform in seconds.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Pulse.RiseTime">
            <summary>
            Gets the rise time in seconds.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Pulse.FallTime">
            <summary>
            Gets the fall time in seconds.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Pulse.PulseWidth">
            <summary>
            Gets the width of the pulse in seconds.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Pulse.Period">
            <summary>
            Gets the period in seconds.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Pulse.SetPulse(System.Double[])">
            <summary>
            Sets all the pulse parameters.
            </summary>
            <param name="parameters">The pulse parameters</param>
        </member>
        <member name="F:SpiceSharp.Components.Pulse._v1">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Pulse._v2">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Pulse._td">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Pulse._tr">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Pulse._tf">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Pulse._pw">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Pulse._per">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Pulse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Pulse"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Pulse.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Pulse"/> class.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="pulsedValue">The peak value.</param>
            <param name="delay">The initial delay time in seconds.</param>
            <param name="riseTime">The rise time in seconds.</param>
            <param name="fallTime">The fall time in seconds.</param>
            <param name="pulseWidth">The pulse width in seconds.</param>
            <param name="period">The period in seconds.</param>
        </member>
        <member name="M:SpiceSharp.Components.Pulse.Setup">
            <summary>
            Sets up the waveform.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Pulse.Probe(SpiceSharp.Simulations.TimeSimulation)">
            <summary>
            Indicates a new timepoint is being probed.
            </summary>
            <param name="simulation">The time-based simulation.</param>
        </member>
        <member name="M:SpiceSharp.Components.Pulse.At(System.Double)">
            <summary>
            Calculate the pulse value at the designated timepoint
            </summary>
            <param name="time">The time.</param>
        </member>
        <member name="M:SpiceSharp.Components.Pulse.Accept(SpiceSharp.Simulations.TimeSimulation)">
            <summary>
            Accepts the current timepoint.
            </summary>
            <param name="simulation">The time-based simulation</param>
        </member>
        <member name="T:SpiceSharp.Components.Waveforms.Pwl">
            <summary>
            Piecewise linear waveform.
            </summary>
        </member>
        <member name="T:SpiceSharp.Components.Waveforms.Pwl.LineDefinition">
            <summary>
            A definition of a line
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Waveforms.Pwl.LineDefinition.A">
            <summary>
            Gets or sets the slope of the line.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Waveforms.Pwl.LineDefinition.B">
            <summary>
            Gets or sets the intercept of the line.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Waveforms.Pwl.#ctor(System.Double[],System.Double[])">
            <summary>
            Creates a new instance of the <see cref="T:SpiceSharp.Components.Waveforms.Pwl"/> class.
            </summary>
            <param name="times">Array of times.</param>
            <param name="voltages">Array of voltages.</param>
        </member>
        <member name="P:SpiceSharp.Components.Waveforms.Pwl.Times">
            <summary>
            Array of times.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Waveforms.Pwl.Voltages">
            <summary>
            Array of voltages.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Waveforms.Pwl.Accept(SpiceSharp.Simulations.TimeSimulation)">
            <summary>
            Accepts the current timepoint.
            </summary>
            <param name="simulation">The time-based simulation</param>
        </member>
        <member name="M:SpiceSharp.Components.Waveforms.Pwl.Probe(SpiceSharp.Simulations.TimeSimulation)">
            <summary>
            Indicates a new timepoint is being probed.
            </summary>
            <param name="simulation">The time-based simulation.</param>
        </member>
        <member name="M:SpiceSharp.Components.Waveforms.Pwl.Reset">
            <summary>
            Resets the waveform.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Waveforms.Pwl.Setup">
            <summary>
            Sets up the waveform.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Waveforms.Pwl.GetLineValue(System.Double)">
            <summary>
            Gets the value of PWL for given time.
            </summary>
            <param name="time">Time.</param>
            <returns>
            PWL's value for given time.
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.Waveforms.Pwl.CreateLineParameters(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate the slope and intercept of the line between two given points.
            </summary>
            <param name="x1">The first x-coordinate.</param>
            <param name="x2">The second x-coordinate.</param>
            <param name="y1">The first y-coordinate.</param>
            <param name="y2">The second y-coordinate.</param>
            <returns></returns>
        </member>
        <member name="T:SpiceSharp.Components.Sine">
            <summary>
            This class describes a sine wave.
            </summary>
            <seealso cref="T:SpiceSharp.Components.Waveform" />
        </member>
        <member name="P:SpiceSharp.Components.Sine.Offset">
            <summary>
            Gets the offset.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Sine.Amplitude">
            <summary>
            Gets the amplitude of the sine wave.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Sine.Frequency">
            <summary>
            Gets the frequency of the sine wave in Hertz (Hz).
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Sine.Delay">
            <summary>
            Gets the delay of the sine wave in seconds.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Sine.Theta">
            <summary>
            Gets the damping factor theta of the sinewave.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Sine.Phase">
            <summary>
            Gets the phase of the sinewave.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Sine.SetSine(System.Double[])">
            <summary>
            Sets all the sine parameters.
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="F:SpiceSharp.Components.Sine._vo">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Sine._va">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Sine._freq">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Sine._td">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Sine._theta">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="F:SpiceSharp.Components.Sine._phase">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Sine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Sine"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Sine.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Sine"/> class.
            </summary>
            <param name="offset">The offset.</param>
            <param name="amplitude">The amplitude.</param>
            <param name="frequency">The frequency.</param>
            <param name="delay">The delay.</param>
            <param name="theta">The theta.</param>
            <param name="phase">The phase.</param>
        </member>
        <member name="M:SpiceSharp.Components.Sine.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Sine"/> class.
            </summary>
            <param name="offset">The offset.</param>
            <param name="amplitude">The amplitude.</param>
            <param name="frequency">The frequency.</param>
            <param name="delay">The delay.</param>
            <param name="theta">The theta.</param>
        </member>
        <member name="M:SpiceSharp.Components.Sine.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Components.Sine"/> class.
            </summary>
            <param name="offset">The offset.</param>
            <param name="amplitude">The amplitude.</param>
            <param name="frequency">The frequency.</param>
        </member>
        <member name="M:SpiceSharp.Components.Sine.Setup">
            <summary>
            Sets up the waveform.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Sine.Probe(SpiceSharp.Simulations.TimeSimulation)">
            <summary>
            Indicates a new timepoint is being probed.
            </summary>
            <param name="simulation">The time-based simulation.</param>
        </member>
        <member name="M:SpiceSharp.Components.Sine.Accept(SpiceSharp.Simulations.TimeSimulation)">
            <summary>
            Accepts the current timepoint.
            </summary>
            <param name="simulation">The time-based simulation</param>
        </member>
        <member name="T:SpiceSharp.Components.Waveform">
            <summary>
            Template for a waveform that can change value over time.
            </summary>
        </member>
        <member name="P:SpiceSharp.Components.Waveform.Value">
            <summary>
            Gets the current waveform value at the last probed timepoint.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Waveform.Setup">
            <summary>
            Sets up the waveform.
            </summary>
        </member>
        <member name="M:SpiceSharp.Components.Waveform.Probe(SpiceSharp.Simulations.TimeSimulation)">
            <summary>
            Indicates a new timepoint is being probed.
            </summary>
            <param name="simulation">The time-based simulation.</param>
        </member>
        <member name="M:SpiceSharp.Components.Waveform.Accept(SpiceSharp.Simulations.TimeSimulation)">
            <summary>
            Accepts the current timepoint.
            </summary>
            <param name="simulation">The time-based simulation</param>
        </member>
        <member name="M:SpiceSharp.Components.Waveform.Clone">
            <summary>
            Clones the waveform.
            </summary>
            <returns>
            The cloned waveform.
            </returns>
        </member>
        <member name="M:SpiceSharp.Components.Waveform.SpiceSharp#ICloneable#Clone">
            <summary>
            Clones the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Components.Waveform.CopyFrom(SpiceSharp.Components.Waveform)">
            <summary>
            Copies the contents of another waveform to this one.
            </summary>
            <param name="source">The source parameter.</param>
        </member>
        <member name="M:SpiceSharp.Components.Waveform.SpiceSharp#ICloneable#CopyFrom(SpiceSharp.ICloneable)">
            <summary>
            Copy the contents of another object to this one.
            </summary>
            <param name="source">The source object.</param>
        </member>
        <member name="T:SpiceSharp.BadParameterException">
            <summary>
            Exception for identifying a bad parameter.
            </summary>
        </member>
        <member name="M:SpiceSharp.BadParameterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.BadParameterException"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.BadParameterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.BadParameterException"/> class.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:SpiceSharp.BadParameterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.BadParameterException"/> class.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:SpiceSharp.CircuitException">
            <summary>
            An exception for circuit-related issues.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:SpiceSharp.CircuitException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.CircuitException"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.CircuitException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.CircuitException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:SpiceSharp.CircuitException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.CircuitException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:SpiceSharp.CircuitWarning">
            <summary>
            A static class that tracks warnings.
            </summary>
        </member>
        <member name="E:SpiceSharp.CircuitWarning.WarningGenerated">
            <summary>
            Occurs when a warning was generated.
            </summary>
        </member>
        <member name="M:SpiceSharp.CircuitWarning.Warning(System.Object,System.String)">
            <summary>
            Adds a warning.
            </summary>
            <param name="sender">The sender.</param>
            <param name="message">The warning message.</param>
        </member>
        <member name="T:SpiceSharp.WarningEventArgs">
            <summary>
            Event arguments that are used when a warning is generated.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:SpiceSharp.WarningEventArgs.Message">
            <summary>
            Gets the warning message.
            </summary>
        </member>
        <member name="M:SpiceSharp.WarningEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.WarningEventArgs"/> class.
            </summary>
            <param name="message">The warning message.</param>
        </member>
        <member name="T:SpiceSharp.Constants">
            <summary>
            Helpful electronics-related constants
            </summary>
        </member>
        <member name="F:SpiceSharp.Constants.Charge">
            <summary>
            Charge of an electron (C)
            </summary>
        </member>
        <member name="F:SpiceSharp.Constants.CelsiusKelvin">
            <summary>
            The conversion constant for converting between Kelvin and Celsius.
            </summary>
        </member>
        <member name="F:SpiceSharp.Constants.Boltzmann">
            <summary>
            Boltzman constant (J/K)
            </summary>
        </member>
        <member name="F:SpiceSharp.Constants.ReferenceTemperature">
            <summary>
            The default reference temperature in Kelvin (27degC)
            </summary>
        </member>
        <member name="F:SpiceSharp.Constants.Root2">
            <summary>
            The square root of 2
            </summary>
        </member>
        <member name="F:SpiceSharp.Constants.Vt0">
            <summary>
            The thermal voltage at the default reference temperature (V)
            </summary>
        </member>
        <member name="F:SpiceSharp.Constants.KOverQ">
            <summary>
            Normalized thermal voltage (V/K)
            </summary>
        </member>
        <member name="T:SpiceSharp.ICloneable">
            <summary>
            A template for a parameter that can be cloned and copied.
            </summary>
            <remarks>
            This class can be used to ensure that parameter sets are cloned correctly. This is to avoid issues when running
            multiple simulations in parallel where shared memory may be undesirable.
            </remarks>
        </member>
        <member name="M:SpiceSharp.ICloneable.Clone">
            <summary>
            Clones the parameter.
            </summary>
            <returns>
            The cloned parameter.
            </returns>
        </member>
        <member name="M:SpiceSharp.ICloneable.CopyFrom(SpiceSharp.ICloneable)">
            <summary>
            Copies the contents of one interface to this one.
            </summary>
            <param name="source">The source parameter.</param>
        </member>
        <member name="T:SpiceSharp.ICloneable`1">
            <summary>
            A template for a parameter that can be cloned and copied (typed version).
            </summary>
            <remarks>
            This class can be used to ensure that parameter sets are cloned correctly. This is to avoid issues when running
            multiple simulations in parallel where shared memory may be undesirable.
            </remarks>
        </member>
        <member name="M:SpiceSharp.ICloneable`1.Clone">
            <summary>
            Clones the parameter.
            </summary>
            <returns>
            The cloned parameter.
            </returns>
        </member>
        <member name="M:SpiceSharp.ICloneable`1.CopyFrom(`0)">
            <summary>
            Copies the contents of one interface to this one.
            </summary>
            <param name="source">The source parameter.</param>
        </member>
        <member name="T:SpiceSharp.Reflection">
            <summary>
            Helper class for using reflection in Spice#.
            </summary>
        </member>
        <member name="T:SpiceSharp.Reflection.CachedMemberInfo">
            <summary>
            Holds information about a specified member of the class and its attributes.
            </summary>
        </member>
        <member name="M:SpiceSharp.Reflection.CachedMemberInfo.#ctor(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Reflection.CachedMemberInfo"/> class.
            </summary>
            <param name="member"></param>
            <param name="attributes"></param>
        </member>
        <member name="P:SpiceSharp.Reflection.CachedMemberInfo.Member">
            <summary>
            Gets the reference to the member.
            </summary>
        </member>
        <member name="P:SpiceSharp.Reflection.CachedMemberInfo.Attributes">
            <summary>
            Gets the cached list of attributes for the member.
            </summary>
        </member>
        <member name="M:SpiceSharp.Reflection.CachedMemberInfo.ToString">
            <summary>
            Convert to a string.
            </summary>
        </member>
        <member name="M:SpiceSharp.Reflection.GetMembers(System.Object)">
            <summary>
            Get all the members in the class.
            </summary>
            <param name="source">The source object.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Reflection.GetNamedMembers(System.Object,System.String,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Get all members with a specified name.
            </summary>
            <remarks>
            You can specify a parameter name using the <seealso cref="T:SpiceSharp.Attributes.ParameterNameAttribute" /> attribute.</remarks>
            <param name="source">The source object.</param>
            <param name="name">The name of the parameter.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing parameter names, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Reflection.GetPrincipalMembers(System.Object)">
            <summary>
            Get all principal members.
            </summary>
            <remarks>
            You can specify a parameter as principal using the <seealso cref="T:SpiceSharp.Attributes.ParameterInfoAttribute" /> attribute, using the "IsPrincipal" flag.
            </remarks>
            <param name="source">The source object.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Reflection.SetMember``1(System.Object,System.Reflection.MemberInfo,``0)">
            <summary>
            Sets the value of a member.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <param name="source">The source object.</param>
            <param name="member">The member information.</param>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the member was set; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Reflection.GetMember``1(System.Object,System.Reflection.MemberInfo,``0@)">
            <summary>
            Gets a value of a member.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <param name="source">The source object.</param>
            <param name="member">The member information.</param>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the member was read; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Reflection.CopyPropertiesAndFields(System.Object,System.Object)">
            <summary>
            Copies all properties and fields from a source object to a destination object.
            </summary>
            <remarks>
            This method heavily uses reflection to find valid properties and methods. It supports properties and fields
            of types <see cref="T:System.Double"/>, <see cref="T:System.Int32"/>, <see cref="T:System.String"/>, <see cref="T:System.Boolean"/> and
            <see cref="T:SpiceSharp.ICloneable"/>.
            </remarks>
            <param name="source">The source object.</param>
            <param name="destination">The destination object</param>
        </member>
        <member name="M:SpiceSharp.Reflection.CreateSetterForMember``1(System.Object,System.Reflection.MemberInfo)">
            <summary>
            Create a setter for a member.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <param name="source">The source object.</param>
            <param name="member">The member reflection information.</param>
            <returns>An action that sets the member of this object.</returns>
        </member>
        <member name="M:SpiceSharp.Reflection.CreateGetterForMember``1(System.Object,System.Reflection.MemberInfo)">
            <summary>
            Create a getter for a member.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <param name="source">The source object.</param>
            <param name="member">The member reflection information.</param>
            <returns>A function that gets the member of this object.</returns>
        </member>
        <member name="M:SpiceSharp.Reflection.CreateSetterForMethod``1(System.Object,System.Reflection.MethodInfo)">
            <summary>
            Creates a setter for a method.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <param name="source">The source object.</param>
            <param name="method">The method reflection information.</param>
            <returns>
            An action that calls the method for this instance.
            </returns>
        </member>
        <member name="M:SpiceSharp.Reflection.CreateGetterForMethod``1(System.Object,System.Reflection.MethodInfo)">
            <summary>
            Creates a getter for a method.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <param name="source">The source object.</param>
            <param name="method">The method reflection information.</param>
            <returns>
            A function that calls the method for this instance.
            </returns>
        </member>
        <member name="M:SpiceSharp.Reflection.CreateSetterForProperty``1(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Creates a setter for a property.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <param name="source">The source object.</param>
            <param name="property">The property reflection information.</param>
            <returns>
            An action that sets the property value for this instance.
            </returns>
        </member>
        <member name="M:SpiceSharp.Reflection.CreateGetterForProperty``1(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Creates a getter for a property.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <param name="source">The source object.</param>
            <param name="property">The property reflection information.</param>
            <returns>
            A function that gets the property value for this instance.
            </returns>
        </member>
        <member name="M:SpiceSharp.Reflection.CreateSetterForField``1(System.Object,System.Reflection.FieldInfo)">
            <summary>
            Creates a setter for a field.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <param name="source">The source object.</param>
            <param name="field">The field reflection information.</param>
            <returns>
            An action that sets the field value for this instance.
            </returns>
        </member>
        <member name="M:SpiceSharp.Reflection.CreateGetterForField``1(System.Object,System.Reflection.FieldInfo)">
            <summary>
            Create a getter for a field.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <param name="source">The source object.</param>
            <param name="field">The field reflection information.</param>
            <returns>
            A function that gets the field value for this instance.
            </returns>
        </member>
        <member name="T:SpiceSharp.TypeDictionary`1">
            <summary>
            A base template for storing objects that can be retrieved by their type. It also tracks inheritance,
            so you can retrieve objects by their base class.
            </summary>
            <typeparam name="T">The base type.</typeparam>
            <seealso cref="T:System.Collections.Generic.IDictionary`2" />
        </member>
        <member name="P:SpiceSharp.TypeDictionary`1.Dictionary">
            <summary>
            Gets the dictionary to look up using types.
            </summary>
        </member>
        <member name="P:SpiceSharp.TypeDictionary`1.Lock">
            <summary>
            Gets the lock used for multithreaded usage.
            </summary>
        </member>
        <member name="P:SpiceSharp.TypeDictionary`1.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:SpiceSharp.TypeDictionary`1" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.TypeDictionary`1.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:SpiceSharp.TypeDictionary`1" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.TypeDictionary`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:SpiceSharp.TypeDictionary`1" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.TypeDictionary`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:SpiceSharp.TypeDictionary`1" /> is read-only.
            </summary>
        </member>
        <member name="P:SpiceSharp.TypeDictionary`1.Item(System.Type)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <param name="key">The type.</param>
            <returns>The object of the specified type.</returns>
        </member>
        <member name="M:SpiceSharp.TypeDictionary`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.TypeDictionary`1" /> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.TypeDictionary`1.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:SpiceSharp.TypeDictionary`1"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.TypeDictionary`1.Add(System.Type,`0)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:SpiceSharp.TypeDictionary`1"/>.
            </summary>
            <param name="key">The type of the added value.</param>
            <param name="value">The added value.</param>
        </member>
        <member name="M:SpiceSharp.TypeDictionary`1.Get``1">
            <summary>
            Gets a strongly typed object from the dictionary.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <returns>The requested object.</returns>
        </member>
        <member name="M:SpiceSharp.TypeDictionary`1.TryGet``1(``0@)">
            <summary>
            Tries to get a strongly typed object from the dictionary.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="value">The requested object.</param>
            <returns>
              <c>true</c> if the object was found; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.TypeDictionary`1.ContainsKey(System.Type)">
            <summary>
            Determines whether the <see cref="T:SpiceSharp.TypeDictionary`1" /> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:SpiceSharp.TypeDictionary`1" />.</param>
            <returns>
              <c>true</c> if the <see cref="T:SpiceSharp.TypeDictionary`1" /> contains an element with the key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.TypeDictionary`1.Remove(System.Type)">
            <summary>
            Removes the element with the specified key from the <see cref="T:SpiceSharp.TypeDictionary`1" />.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
              <c>true</c> if the element is successfully removed; otherwise, <c>false</c>.  This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:SpiceSharp.TypeDictionary`1" />.
            </returns>
        </member>
        <member name="M:SpiceSharp.TypeDictionary`1.TryGetValue(System.Type,`0@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key,
            if the key is found; otherwise, the default value for the type of the
            <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <returns>
              <c>true</c> if the object that implements <see cref="T:SpiceSharp.TypeDictionary`1" /> contains an element with the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.TypeDictionary`1.Add(System.Collections.Generic.KeyValuePair{System.Type,`0})">
            <summary>
            Adds an item to the <see cref="T:SpiceSharp.TypeDictionary`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:SpiceSharp.TypeDictionary`1" />.</param>
        </member>
        <member name="M:SpiceSharp.TypeDictionary`1.Clear">
            <summary>
            Removes all items from the <see cref="T:SpiceSharp.TypeDictionary`1"/>.
            </summary>
        </member>
        <member name="M:SpiceSharp.TypeDictionary`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SpiceSharp.TypeDictionary`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SpiceSharp.TypeDictionary`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Type,T}}#Contains(System.Collections.Generic.KeyValuePair{System.Type,`0})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:SpiceSharp.TypeDictionary`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:SpiceSharp.TypeDictionary`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:SpiceSharp.TypeDictionary`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Type,T}}#CopyTo(System.Collections.Generic.KeyValuePair{System.Type,`0}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:SpiceSharp.TypeDictionary`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:SpiceSharp.TypeDictionary`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:SpiceSharp.TypeDictionary`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Type,T}}#Remove(System.Collections.Generic.KeyValuePair{System.Type,`0})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:SpiceSharp.TypeDictionary`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:SpiceSharp.TypeDictionary`1" />.</param>
            <returns>
              <c>true</c> if <paramref name="item" /> was successfully removed from the <see cref="T:SpiceSharp.TypeDictionary`1" />; otherwise, <c>false</c>. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:SpiceSharp.TypeDictionary`1" />.
            </returns>
        </member>
        <member name="T:SpiceSharp.Utility">
            <summary>
            Some utility methods
            </summary>
        </member>
        <member name="P:SpiceSharp.Utility.Separator">
            <summary>
            Gets or sets the separator used when combining strings.
            </summary>
        </member>
        <member name="M:SpiceSharp.Utility.FormatString(System.String,System.Object[])">
            <summary>
            Format a string with the current culture.
            </summary>
            <param name="format">The formatting.</param>
            <param name="args">The arguments.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:SpiceSharp.Utility.Combine(System.String,System.String)">
            <summary>
            Combines a name with the specified appendix, using <see cref="P:SpiceSharp.Utility.Separator"/>.
            </summary>
            <param name="name">The name.</param>
            <param name="appendix">The appendix.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Utility.ThrowIfNull``1(``0,System.String)">
            <summary>
            Throws an exception if the object is null.
            </summary>
            <typeparam name="T">The base type.</typeparam>
            <param name="source">The object.</param>
            <param name="name">The parameter name.</param>
            <returns>The original object.</returns>
        </member>
        <member name="M:SpiceSharp.Utility.ThrowIfNotBound``1(``0,SpiceSharp.Behaviors.Behavior)">
            <summary>
            Throws an exception if the behavior is null saying that the behavior is not bound.
            </summary>
            <typeparam name="T">The base type.</typeparam>
            <param name="source">The object.</param>
            <param name="behavior">The behavior that is supposed to be bound.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Utility.ThrowIfEmpty``1(``0,System.String)">
            <summary>
            Throws an exception if a collection is null or empty.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <param name="source">The object.</param>
            <param name="name">The parameter name.</param>
            <returns>The original collection.</returns>
        </member>
        <member name="M:SpiceSharp.Utility.ThrowIfNot``1(``0,System.String,System.Int32)">
            <summary>
            Throws an exception if a collection is null or does not contain a fixed amount of elements.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <param name="source">The object.</param>
            <param name="name">The parameter name.</param>
            <param name="size">The original collection.</param>
            <returns></returns>
        </member>
        <member name="T:SpiceSharp.GivenParameter`1">
            <summary>
            This class describes a parameter that is optional. Whether or not it was specified can be
            found using the Given variable. It also has a default value when not specified.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <seealso cref="T:SpiceSharp.Parameter`1" />
        </member>
        <member name="P:SpiceSharp.GivenParameter`1.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.GivenParameter`1.RawValue">
            <summary>
            Gets or sets the raw value of the parameter without changing <see cref="P:SpiceSharp.GivenParameter`1.Given" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.GivenParameter`1.Given">
            <summary>
            Gets whether or not the parameter was specified by the user.
            </summary>
        </member>
        <member name="M:SpiceSharp.GivenParameter`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.GivenParameter`1"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.GivenParameter`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.GivenParameter`1"/> class.
            </summary>
            <param name="defaultValue">The default value when the parameter is not specified.</param>
        </member>
        <member name="M:SpiceSharp.GivenParameter`1.Clone">
            <summary>
            Clones the parameter.
            </summary>
            <returns>
            The cloned parameter.
            </returns>
        </member>
        <member name="M:SpiceSharp.GivenParameter`1.CopyFrom(SpiceSharp.Parameter{`0})">
            <summary>
            Copies the contents of a parameter to this parameter.
            </summary>
            <param name="source">The source parameter.</param>
        </member>
        <member name="M:SpiceSharp.GivenParameter`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:SpiceSharp.Parameter`1">
            <summary>
            A template for parameters of a specific type.
            </summary>
            <typeparam name="T">The base value type</typeparam>
        </member>
        <member name="P:SpiceSharp.Parameter`1.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
        </member>
        <member name="M:SpiceSharp.Parameter`1.CopyFrom(SpiceSharp.Parameter{`0})">
            <summary>
            Copies the contents of a parameter to this parameter.
            </summary>
            <param name="source">The source parameter.</param>
        </member>
        <member name="M:SpiceSharp.Parameter`1.SpiceSharp#ICloneable#CopyFrom(SpiceSharp.ICloneable)">
            <summary>
            Copies the contents of an object to this object.
            </summary>
            <param name="source">The source object.</param>
        </member>
        <member name="M:SpiceSharp.Parameter`1.Clone">
            <summary>
            Clone the current parameter.
            </summary>
            <returns>A clone of the parameter.</returns>
        </member>
        <member name="M:SpiceSharp.Parameter`1.SpiceSharp#ICloneable#Clone">
            <summary>
            Clone the current object.
            </summary>
            <returns>A clone of the object.</returns>
        </member>
        <member name="M:SpiceSharp.Parameter`1.op_Implicit(SpiceSharp.Parameter{`0})~`0">
            <summary>
            Performs an implicit conversion from <see cref="T:SpiceSharp.Parameter`1"/> to <typeparamref name="T"/>.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SpiceSharp.Parameter`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:SpiceSharp.ParameterHelper">
            <summary>
            Helper methods for managing (named) parameters using reflection.
            </summary>
            <remarks>
            "Parameter" here is a general term for any class member that can be interacted with by the user in a meaningful way for Spice#. Most Spice 
            models have files with the sole purpose of mapping parameter names on actual variables. Spice# makes this easier by using reflection
            instead.
            </remarks>
        </member>
        <member name="M:SpiceSharp.ParameterHelper.IsParameter(System.Type,System.Type)">
            <summary>
            This method will check whether or not a type is a parameter (implements <seealso cref="T:SpiceSharp.Parameter`1"/>).
            </summary>
            <param name="type">The parameter to check.</param>
            <param name="generic">If not null, the parameter is also verified to have the generic parameter.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.ParameterHelper.TrySetPrincipalParameter``1(System.Object,``0)">
            <summary>
            Sets the value of the principal parameter.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="source">The source object.</param>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if a principal parameter was set; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.ParameterHelper.SetPrincipalParameter``1(System.Object,``0)">
            <summary>
            Sets the value of the principal parameters.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="source">The source object.</param>
            <param name="value">The value.</param>
            <returns>The source object (can be used for chaining).</returns>
        </member>
        <member name="M:SpiceSharp.ParameterHelper.TrySetParameter``1(System.Object,System.String,``0,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Tries setting a parameter with a specified name.
            If multiple parameters have the same name, they will all be set.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="source">The source object.</param>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing parameter names, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.</param>
            <returns>
              <c>true</c> if there was one or more parameters set; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.ParameterHelper.SetParameter``1(System.Object,System.String,``0,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Sets a parameter with a specified name. If multiple parameters have the same name, they will all be set.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="source">The source object.</param>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing parameter names, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.</param>
            <returns>The source object (can be used for chaining).</returns>
        </member>
        <member name="M:SpiceSharp.ParameterHelper.TrySetParameter(System.Object,System.String,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Calls a method by name without arguments.
            If multiple parameters by this name exist, all of them will be called.
            </summary>
            <param name="source">The source object.</param>
            <param name="name">The name of the method.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing parameter names, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.</param>
            <returns>
              <c>true</c> if there was one or more methods called; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.ParameterHelper.SetParameter(System.Object,System.String,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Calls a method by name without arguments.
            If multiple parameters by this name exist, all of them will be called.
            </summary>
            <param name="source">The source object.</param>
            <param name="name">The name of the method.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing parameter names, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.</param>
            <returns>The source object (can be used for chaining).</returns>
        </member>
        <member name="M:SpiceSharp.ParameterHelper.TryGetParameter``1(System.Object,System.String,``0@,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Get a parameter value. Only the first found parameter with the specified name is returned.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="source">The source object.</param>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing parameter names, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.</param>
            <returns>
                <c>true</c> if the parameter exists and the value was read; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.ParameterHelper.GetParameter``1(System.Object,System.String,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Get a parameter value. Only the first found parameter with the specified name is returned.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="source">The source object.</param>
            <param name="name">The name of the parameter.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing parameter names, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.ParameterHelper.TryGetParameter``1(System.Object,``0@)">
            <summary>
            Get a parameter value. Only the first principal parameter is returned.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="source">The source object.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.ParameterHelper.GetParameter``1(System.Object)">
            <summary>
            Get a parameter value. Only the first principal parameter is returned.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="source">The source object.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.ParameterHelper.SetMember``1(System.Object,System.Reflection.MemberInfo,``0)">
            <summary>
            Sets the value of a member. If the member is a property that implements <seealso cref="T:SpiceSharp.Parameter`1" />
            then the parameter value is set.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <param name="source">The source object.</param>
            <param name="member">The member information.</param>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the member was set; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.ParameterHelper.GetMember``1(System.Object,System.Reflection.MemberInfo,``0@)">
            <summary>
            Gets a value of a member. If the member is a property that implements <seealso cref="T:SpiceSharp.Parameter`1" />
            then the parameter value is returned.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <param name="source">The source object.</param>
            <param name="member">The member information.</param>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the member was read; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.ParameterHelper.CreateGetter``1(System.Object)">
            <summary>
            Create a getter for the principal parameter.
            </summary>
            <remarks>
            The principal parameter is a member flagged with a <seealso cref="T:SpiceSharp.Attributes.ParameterInfoAttribute" />
            where the principal flag is set. It can be used to flag a class member as the default
            parameter.
            </remarks>
            <typeparam name="T">The parameter type.</typeparam>
            <param name="source">The object with parameters.</param>
            <returns>A function returning the value of the principal parameter, or <c>null</c> if there is no principal parameter.</returns>
        </member>
        <member name="M:SpiceSharp.ParameterHelper.CreateGetter``1(System.Object,System.String,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Returns a getter for the eligible first parameter with the specified name.
            </summary>
            <typeparam name="T">The parameter type.</typeparam>
            <param name="source">The object with parameters.</param>
            <param name="name">The name of the parameter.</param>
            <param name="comparer">The string comparer used for identifying the parameter name.</param>
            <returns>A function returning the value of the parameter, or <c>null</c> if there is no parameter with the specified name.</returns>
        </member>
        <member name="M:SpiceSharp.ParameterHelper.CreateSetter``1(System.Object)">
            <summary>
            Create a setter for the principal parameter.
            </summary>
            <remarks>
            The principal parameter is a member flagged with a <seealso cref="T:SpiceSharp.Attributes.ParameterInfoAttribute" />
            where the principal flag is set. It can be used to flag a class member as the default
            parameter.
            </remarks>
            <typeparam name="T">The parameter type.</typeparam>
            <param name="source">The object with parameters.</param>
            <returns>An action that can set the value of the principal parameter, or <c>null</c> if there is no principal parameter.</returns>
        </member>
        <member name="M:SpiceSharp.ParameterHelper.CreateSetter``1(System.Object,System.String,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Returns a setter for the first eligible parameter with the specified name.
            </summary>
            <typeparam name="T">The parameter type.</typeparam>
            <param name="source">The object with parameters.</param>
            <param name="name">The name of the parameter.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing parameter names, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.</param>
            <returns>A function returning the value of the parameter, or <c>null</c> if there is no parameter with the specified name.</returns>
        </member>
        <member name="M:SpiceSharp.ParameterHelper.CreateSetterForMember``1(System.Object,System.Reflection.MemberInfo)">
            <summary>
            Create a setter for a member.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <param name="source">The source object.</param>
            <param name="member">The member reflection information.</param>
            <returns>An action that sets the member of this object.</returns>
        </member>
        <member name="M:SpiceSharp.ParameterHelper.CreateGetterForMember``1(System.Object,System.Reflection.MemberInfo)">
            <summary>
            Create a getter for a member.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <param name="source">The source object.</param>
            <param name="member">The member reflection information.</param>
            <returns>A function that gets the member of this object.</returns>
        </member>
        <member name="M:SpiceSharp.ParameterHelper.CreateSetterForProperty``1(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Creates a setter for a property.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <param name="source">The source object.</param>
            <param name="property">The property reflection information.</param>
            <returns>
            An action that sets the property value for this instance.
            </returns>
        </member>
        <member name="M:SpiceSharp.ParameterHelper.CreateGetterForProperty``1(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Creates a getter for a property. Parameters are accounted for.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <param name="source">The source object.</param>
            <param name="property">The property reflection information.</param>
            <returns>
            A function that gets the property value for this instance.
            </returns>
        </member>
        <member name="T:SpiceSharp.ParameterPool">
            <summary>
            Collection for parameter sets. This class will keep track which parameter sets belong to which entity.
            Only a <see cref="T:SpiceSharp.ParameterSet" /> can be requested from the collection.
            </summary>
        </member>
        <member name="F:SpiceSharp.ParameterPool._entityParameters">
            <summary>
            The entity parameters
            </summary>
        </member>
        <member name="P:SpiceSharp.ParameterPool.Item(System.String)">
            <summary>
            Gets the associated <see cref="T:SpiceSharp.ParameterSetDictionary"/> of an entity.
            </summary>
            <param name="name">The entity identifier.</param>
            <returns>The parameter set associated to the specified entity identifier.</returns>
        </member>
        <member name="M:SpiceSharp.ParameterPool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.ParameterPool"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.ParameterPool.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.ParameterPool"/> class.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing entity names, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.</param>
        </member>
        <member name="M:SpiceSharp.ParameterPool.Add(System.String,SpiceSharp.ParameterSet)">
            <summary>
            Adds the specified parameter set to the pool.
            </summary>
            <param name="creator">The entity identifier to which the parameter set belongs.</param>
            <param name="parameters">The parameter set.</param>
        </member>
        <member name="M:SpiceSharp.ParameterPool.Contains(System.String)">
            <summary>
            Checks if a parameter set exists for a specified entity identifier.
            </summary>
            <param name="name">The entity identifier.</param>
            <returns>
              <c>true</c> if a parameter set exists; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.ParameterPool.Clear">
            <summary>
            Clears all parameter sets in the pool.
            </summary>
        </member>
        <member name="T:SpiceSharp.ParameterSet">
            <summary>
            A class that describes a set of parameters.
            </summary>
            <remarks>
            This class allows accessing parameters by their metadata. Metadata is specified by using 
            the <see cref="T:SpiceSharp.Attributes.ParameterNameAttribute"/> and <see cref="T:SpiceSharp.Attributes.ParameterInfoAttribute"/>.
            </remarks>
        </member>
        <member name="M:SpiceSharp.ParameterSet.CalculateDefaults">
            <summary>
            Method for calculating the default values of derived parameters.
            </summary>
            <remarks>
            These calculations should be run whenever a parameter has been changed.
            </remarks>
        </member>
        <member name="M:SpiceSharp.ParameterSet.Clone">
            <summary>
            Creates a clone of the parameter set.
            </summary>
            <returns>
            A clone of the parameter set.
            </returns>
        </member>
        <member name="M:SpiceSharp.ParameterSet.SpiceSharp#ICloneable#Clone">
            <summary>
            Creates a clone of the parameter set.
            </summary>
            <returns>
            A clone of the parameter set.
            </returns>
        </member>
        <member name="M:SpiceSharp.ParameterSet.CopyFrom(SpiceSharp.ParameterSet)">
            <summary>
            Copy properties and fields from another parameter set.
            </summary>
            <param name="source">The source parameter set.</param>
        </member>
        <member name="M:SpiceSharp.ParameterSet.SpiceSharp#ICloneable#CopyFrom(SpiceSharp.ICloneable)">
            <summary>
            Copy parameters from another object.
            </summary>
            <param name="source">The source object.</param>
        </member>
        <member name="T:SpiceSharp.ParameterSetDictionary">
            <summary>
            A dictionary of <see cref="T:SpiceSharp.ParameterSet" />. Only one instance of each type is allowed.
            </summary>
            <seealso cref="T:SpiceSharp.TypeDictionary`1" />
        </member>
        <member name="M:SpiceSharp.ParameterSetDictionary.Add(SpiceSharp.ParameterSet)">
            <summary>
            Adds a parameter set to the dictionary.
            </summary>
            <param name="set">The parameter set.</param>
        </member>
        <member name="M:SpiceSharp.ParameterSetDictionary.SetPrincipalParameter``1(``0)">
            <summary>
            Sets the principal parameter.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if a principal parameter was set; otherwise <c>false</c>.
            </returns>
            <remarks>
            Only the first encountered principal parameter will be set.
            </remarks>
        </member>
        <member name="M:SpiceSharp.ParameterSetDictionary.SetParameter(System.String,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Calls a parameter method with a specified name. If multiple methods exist,
            all of them will be called.
            </summary>
            <param name="name">The name of the method.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing parameter names, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.</param>
            <returns>The source object (can be used for chaining).</returns>
        </member>
        <member name="M:SpiceSharp.ParameterSetDictionary.SetParameter``1(System.String,``0,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Sets all parameters with a specified name in any parameter set in the dictionary.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing parameter names, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.</param>
            <returns>The source object (can be used for chaining).</returns>
        </member>
        <member name="M:SpiceSharp.ParameterSetDictionary.GetPrincipalParameter``1">
            <summary>
            Gets the principal parameter from any parameter set in the dictionary.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <returns>
            The principal parameter of the specified type.
            </returns>
        </member>
        <member name="M:SpiceSharp.ParameterSetDictionary.GetParameter``1(System.String,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Gets a named parameter from any parameter set in the dictionary.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <param name="name">The name of the parameter.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing parameter names, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.ParameterSetDictionary.CreateSetter``1(System.String,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Gets a setter for a parameter with a specified name in any parameter set in the dictionary.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <param name="name">The name of the parameter.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing parameter names, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.</param>
            <returns>
            An action for setting the parameter with the specified type and name, or <c>null</c> if no parameter was found.
            </returns>
        </member>
        <member name="M:SpiceSharp.ParameterSetDictionary.CreateSetter``1">
            <summary>
            Gets a setter for a principal parameter in any parameter set in the dictionary.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <returns>
            An action for setting the principal parameter with the specified type and name, or <c>null</c> if no parameter was found.
            </returns>
            <remarks>
            Only the first encountered principal parameter will be set using the setter returned from this method.
            </remarks>
        </member>
        <member name="M:SpiceSharp.ParameterSetDictionary.Clone">
            <summary>
            Clone the dictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.ParameterSetDictionary.SpiceSharp#ICloneable#Clone">
            <summary>
            Clone the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.ParameterSetDictionary.CopyFrom(SpiceSharp.ParameterSetDictionary)">
            <summary>
            Copy all parameter sets.
            </summary>
            <param name="source">The source object.</param>
        </member>
        <member name="M:SpiceSharp.ParameterSetDictionary.SpiceSharp#ICloneable#CopyFrom(SpiceSharp.ICloneable)">
            <summary>
            Copy all properties from another object to this one.
            </summary>
            <param name="source">The source object.</param>
        </member>
        <member name="T:SpiceSharp.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.GminSteppingFailed">
            <summary>
              Looks up a localized string similar to Gmin step failed.
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.SourceSteppingFailed">
            <summary>
              Looks up a localized string similar to Source stepping failed.
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.StartDiagonalGminStepping">
            <summary>
              Looks up a localized string similar to Starting diagonal Gmin stepping.
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.StartGminStepping">
            <summary>
              Looks up a localized string similar to Starting Gmin stepping.
            </summary>
        </member>
        <member name="P:SpiceSharp.Properties.Resources.StartSourceStepping">
            <summary>
              Looks up a localized string similar to Starting source stepping.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.AfterExecuteEventArgs">
            <summary>
            Event arguments that are used after simulation execution.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:SpiceSharp.Simulations.AfterExecuteEventArgs.Repeat">
            <summary>
            If <c>true</c>, the simulation will be requested to repeat the simulation another time.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.BaseConfiguration">
            <summary>
            A configuration for a <see cref="T:SpiceSharp.Simulations.BaseSimulation" />.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSet" />
        </member>
        <member name="P:SpiceSharp.Simulations.BaseConfiguration.NoOperatingPointIterations">
            <summary>
            Gets or sets a value indicating whether the simulation should go straight to gmin stepping.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseConfiguration.Gmin">
            <summary>
            Gets or sets the minimum conductance.
            </summary>
            <remarks>
            Convergence is mainly an issue with semiconductor junctions, which often lead to exponential curves. Exponential dependencies
            are very harsh on convergence. A lower Gmin will cause iterations to converge faster, but to a (slightly) wrong value. By
            steadily relaxing this value back to 0 it is possible to progressively reach a solution without having non-convergence.
            </remarks>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseConfiguration.GminSteps">
            <summary>
            Gets or sets the number of steps to use when using gmin stepping to improve convergence.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseConfiguration.SourceSteps">
            <summary>
            Gets or sets the number of steps when using source stepping to improve convergence.
            </summary>
            <remarks>
            In source stepping, all sources are considered to be at 0 which has typically only one single solution (all nodes and
            currents are 0V and 0A). By increasing the source factor in small steps, it is possible to progressively reach a solution
            without having non-convergence.
            </remarks>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseConfiguration.RelativeTolerance">
            <summary>
            Gets or sets the allowed relative tolerance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseConfiguration.VoltageTolerance">
            <summary>
            Gets or sets the absolute tolerance on voltages.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseConfiguration.AbsoluteTolerance">
            <summary>
            Gets or sets the absolute tolerance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseConfiguration.ChargeTolerance">
            <summary>
            Gets or sets the tolerance on charges.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseConfiguration.AbsolutePivotThreshold">
            <summary>
            Gets or sets the absolute threshold for choosing pivots.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseConfiguration.RelativePivotThreshold">
            <summary>
            Gets or sets the relative threshold for choosing pivots.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseConfiguration.DcMaxIterations">
            <summary>
            Gets or sets the maximum number of iterations for operating point simulation.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseConfiguration.Nodesets">
            <summary>
            Gets the nodesets.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.BaseSimulation">
            <summary>
            The base simulation.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.Simulation" />
            <remarks>
            Pretty much all simulations start out with calculating the operating point of the circuit. So a <see cref="P:SpiceSharp.Simulations.BaseSimulation.RealState" /> is always part of the simulation.
            </remarks>
            <seealso cref="T:SpiceSharp.Simulations.Simulation" />
        </member>
        <member name="P:SpiceSharp.Simulations.BaseSimulation.RealState">
            <summary>
            Gets the currently active simulation state.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseSimulation.ProblemVariable">
            <summary>
            Gets the variable that causes issues.
            </summary>
            <remarks>
            This variable can be used to close in on the problem in case of non-convergence.
            </remarks>
        </member>
        <member name="E:SpiceSharp.Simulations.BaseSimulation.BeforeLoad">
            <summary>
            Occurs before loading the matrix and right-hand side vector.
            </summary>
            <remarks>
            For better performance, you can also create an entity with a high priority that
            generates a load behavior.
            </remarks>
        </member>
        <member name="E:SpiceSharp.Simulations.BaseSimulation.AfterLoad">
            <summary>
            Occurs after loading the matrix and right-hand side vector.
            </summary>
            <remarks>
            For better performance, you can also create an entity with a low priority that
            generates a load behavior.
            </remarks>
        </member>
        <member name="E:SpiceSharp.Simulations.BaseSimulation.BeforeTemperature">
            <summary>
            Occurs before performing temperature-dependent calculations.
            </summary>
            <remarks>
            For better performance, you can also create an entity with a high priority that
            creates a temperature behavior.
            </remarks>
        </member>
        <member name="E:SpiceSharp.Simulations.BaseSimulation.AfterTemperature">
            <summary>
            Occurs after performing temperature-dependent calculations.
            </summary>
            <remarks>
            For better performance, you can also create an entity with a low priority that
            creates a temperature behavior.
            </remarks>
        </member>
        <member name="F:SpiceSharp.Simulations.BaseSimulation._realStateLoadArgs">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseSimulation.DcMaxIterations">
            <summary>
            Gets the maximum number of allowed iterations for DC analysis.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseSimulation.AbsTol">
            <summary>
            Gets the (cached) absolute tolerance on values to check convergence.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseSimulation.RelTol">
            <summary>
            Gets the (cached) relative tolerance on values to check convergence.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseSimulation.BaseSimulationStatistics">
            <summary>
            Gets the (cached) simulation statistics for the simulation.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.BaseSimulation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.BaseSimulation"/> class.
            </summary>
            <param name="name">The identifier of the simulation.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.BaseSimulation.Setup(SpiceSharp.Circuits.EntityCollection)">
            <summary>
            Set up the simulation.
            </summary>
            <param name="circuit">The circuit that will be used.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.BaseSimulation.Execute">
            <summary>
            Executes the simulation.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.BaseSimulation.Temperature">
            <summary>
            Perform temperature-dependent calculations.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.BaseSimulation.Unsetup">
            <summary>
            Destroys the simulation.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.BaseSimulation.Op(System.Int32)">
            <summary>
            Calculates the operating point of the circuit.
            </summary>
            <param name="maxIterations">The maximum amount of allowed iterations.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.BaseSimulation.IterateGminStepping(System.Int32,System.Int32)">
            <summary>
            Iterates to a solution while shunting PN-junctions with a conductance.
            </summary>
            <param name="maxIterations">The maximum number of iterations per step.</param>
            <param name="steps">The number of steps.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Simulations.BaseSimulation.IterateDiagonalGminStepping(System.Int32,System.Int32)">
            <summary>
            Iterates to a solution while adding a conductive path to ground on all nodes.
            </summary>
            <param name="maxIterations">The maximum number of iterations per step.</param>
            <param name="steps">The number of steps.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Simulations.BaseSimulation.IterateSourceStepping(System.Int32,System.Int32)">
            <summary>
            Iterates to a solution slowly ramping up independent voltages and currents.
            </summary>
            <param name="maxIterations">The maximum number of iterations per step.</param>
            <param name="steps">The number of steps.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Simulations.BaseSimulation.Iterate(System.Int32)">
            <summary>
            Iterates towards a solution.
            </summary>
            <param name="maxIterations">The maximum allowed iterations.</param>
            <returns>
              <c>true</c> if the iterations converged to a solution; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.BaseSimulation.Load">
            <summary>
            Load the current simulation state solver.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.BaseSimulation.LoadBehaviors">
            <summary>
            Loads the current simulation state solver.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.BaseSimulation.LoadNodeSets(System.Object,SpiceSharp.Simulations.LoadStateEventArgs)">
            <summary>
            Applies nodesets.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Arguments</param>
        </member>
        <member name="M:SpiceSharp.Simulations.BaseSimulation.IsConvergent">
            <summary>
            Checks that the solution converges to a solution.
            </summary>
            <returns>
              <c>true</c> if the solution converges; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.BaseSimulation.OnBeforeLoad(SpiceSharp.Simulations.LoadStateEventArgs)">
            <summary>
            Raises the <see cref="E:BeforeLoad" /> event.
            </summary>
            <param name="args">The <see cref="T:SpiceSharp.Simulations.LoadStateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.BaseSimulation.OnAfterLoad(SpiceSharp.Simulations.LoadStateEventArgs)">
            <summary>
            Raises the <see cref="E:AfterLoad" /> event.
            </summary>
            <param name="args">The <see cref="T:SpiceSharp.Simulations.LoadStateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.BaseSimulation.OnBeforeTemperature(SpiceSharp.Simulations.LoadStateEventArgs)">
            <summary>
            Raises the <see cref="E:BeforeTemperature" /> event.
            </summary>
            <param name="args">The <see cref="T:SpiceSharp.Simulations.LoadStateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.BaseSimulation.OnAfterTemperature(SpiceSharp.Simulations.LoadStateEventArgs)">
            <summary>
            Raises the <see cref="E:AfterTemperature" /> event.
            </summary>
            <param name="args">The <see cref="T:SpiceSharp.Simulations.LoadStateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.BaseSimulationState">
            <summary>
            A simulation state for simulations using real numbers.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.SimulationState" />
        </member>
        <member name="P:SpiceSharp.Simulations.BaseSimulationState.Init">
            <summary>
            Gets or sets the initialization flag.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseSimulationState.UseDc">
            <summary>
            Gets or sets the flag for ignoring time-related effects. If true, each device should assume the circuit is not moving in time.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseSimulationState.UseIc">
            <summary>
            Gets or sets the flag for using initial conditions. If true, the operating point will not be calculated, and initial conditions will be used instead.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseSimulationState.SourceFactor">
            <summary>
            The current source factor.
            This parameter is changed when doing source stepping for aiding convergence.
            </summary>
            <remarks>
            In source stepping, all sources are considered to be at 0 which has typically only one single solution (all nodes and
            currents are 0V and 0A). By increasing the source factor in small steps, it is possible to progressively reach a solution
            without having non-convergence.
            </remarks>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseSimulationState.Gmin">
            <summary>
            Gets or sets the a conductance that is shunted with PN junctions to aid convergence.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseSimulationState.IsConvergent">
            <summary>
            Is the current iteration convergent?
            This parameter is used to communicate convergence.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseSimulationState.Temperature">
            <summary>
            The current temperature for this circuit in Kelvin.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseSimulationState.NominalTemperature">
            <summary>
            The nominal temperature for the circuit in Kelvin.
            Used by models as the default temperature where the parameters were measured.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseSimulationState.Solver">
            <summary>
            Gets the solver for solving linear systems of equations.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseSimulationState.Solution">
            <summary>
            Gets the solution vector.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseSimulationState.OldSolution">
            <summary>
            Gets the previous solution vector.
            </summary>
            <remarks>
            This vector is needed for determining convergence.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Simulations.BaseSimulationState.Setup(SpiceSharp.Simulations.VariableSet)">
            <summary>
            Setup the simulation state.
            </summary>
            <param name="nodes">The unknown variables for which the state is used.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.BaseSimulationState.Unsetup">
            <summary>
            Unsetup the state.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.BaseSimulationState.StoreSolution">
            <summary>
            Stores the solution.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.BaseSimulationStatistics">
            <summary>
            Statistics for a <see cref="T:SpiceSharp.Simulations.BaseSimulationStatistics" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseSimulationStatistics.Iterations">
            <summary>
            Gets the total number of iterations.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseSimulationStatistics.SolveTime">
            <summary>
            Gets a stopwatch that keeps the total time spent solving equations.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseSimulationStatistics.LoadTime">
            <summary>
            Gets a stopwatch that keeps the total time spent loading the equation matrix.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseSimulationStatistics.ReorderTime">
            <summary>
            Gets a stopwatch that keeps the total time spent reordering the equation matrix.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.BaseSimulationStatistics.DecompositionTime">
            <summary>
            Gets a stopwatch that keeps the total time spent on decomposition of the matrix.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.BaseSimulationStatistics.Reset">
            <summary>
            Reset simulation statistics.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.ConvergenceAid">
            <summary>
            A template for aiding convergence.
            </summary>
            <remarks>
            The convergence aid will try to bring the solution of a variable as close
            as possible to the specified value. If this value is close to the final
            solution, then convergence can be achieved much faster.
            </remarks>
        </member>
        <member name="F:SpiceSharp.Simulations.ConvergenceAid.Force">
            <summary>
            The amount with which a value is forced to the convergence aid value.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ConvergenceAid.Name">
            <summary>
            Gets the name of the variable.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ConvergenceAid.Value">
            <summary>
            Gets the value for the convergence aid.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ConvergenceAid.Variables">
            <summary>
            Gets the unknown variables.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ConvergenceAid.Solver">
            <summary>
            Gets the solver of the system of equations.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ConvergenceAid.Diagonal">
            <summary>
            Gets the diagonal element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ConvergenceAid.Rhs">
            <summary>
            Gets the right-hand side element.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ConvergenceAid.Node">
            <summary>
            Gets the node for which the aid is meant.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.ConvergenceAid.#ctor(System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.ConvergenceAid"/> class.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.ConvergenceAid.Initialize(SpiceSharp.Simulations.BaseSimulation)">
            <summary>
            Sets up the convergence aid for a specific simulation.
            </summary>
            <param name="simulation">The simulation.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.ConvergenceAid.Aid">
            <summary>
            Aids the convergence.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.ConvergenceAid.Unsetup">
            <summary>
            Destroys the convergence aid.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.ComplexSimulationState">
            <summary>
            A simulation state using complex numbers.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.SimulationState" />
        </member>
        <member name="P:SpiceSharp.Simulations.ComplexSimulationState.IsConvergent">
            <summary>
            Gets or sets a value indicating whether the solution converges.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ComplexSimulationState.Solver">
            <summary>
            Gets the solver for complex linear systems of equations.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ComplexSimulationState.Solution">
            <summary>
            Gets the solution.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ComplexSimulationState.Laplace">
            <summary>
            Gets or sets the current laplace variable.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.ComplexSimulationState.Setup(SpiceSharp.Simulations.VariableSet)">
            <summary>
            Setup the simulation state.
            </summary>
            <param name="nodes">The unknown variables for which the state is used.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.ComplexSimulationState.Unsetup">
            <summary>
            Unsetup the state.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.ComplexSimulationStatistics">
            <summary>
            Statistics for a <see cref="T:SpiceSharp.Simulations.FrequencySimulation"/>.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ComplexSimulationStatistics.ComplexPoints">
            <summary>
            Gets or sets the number of frequency points calculated.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ComplexSimulationStatistics.ComplexTime">
            <summary>
            Gets the time spent on frequency analysis.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ComplexSimulationStatistics.ComplexSolveTime">
            <summary>
            Gets the time spent on solving the complex equation matrix.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ComplexSimulationStatistics.ComplexLoadTime">
            <summary>
            Gets the time spent on loading the complex equation matrix.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ComplexSimulationStatistics.ComplexReorderTime">
            <summary>
            Gets the time spent on reordering the complex equation matrix.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ComplexSimulationStatistics.ComplexDecompositionTime">
            <summary>
            Gets the time spent on decomposition of the complex equation matrix.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.ComplexSimulationStatistics.Reset">
            <summary>
            Reset the statistics.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.FrequencyConfiguration">
            <summary>
            A configuration for a <see cref="T:SpiceSharp.Simulations.FrequencySimulation" />.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSet" />
        </member>
        <member name="P:SpiceSharp.Simulations.FrequencyConfiguration.KeepOpInfo">
            <summary>
            Gets or sets a value indicating whether the operation point should be exported.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.FrequencyConfiguration.AbsolutePivotThreshold">
            <summary>
            Gets or sets the absolute threshold for choosing pivots.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.FrequencyConfiguration.RelativePivotThreshold">
            <summary>
            Gets or sets the relative threshold for choosing pivots.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.FrequencyConfiguration.FrequencySweep">
            <summary>
            Gets or sets the frequency sweep.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencyConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.FrequencyConfiguration"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencyConfiguration.#ctor(SpiceSharp.Simulations.Sweep{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.FrequencyConfiguration"/> class.
            </summary>
            <param name="frequencySweep">The frequency sweep.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.FrequencySimulation">
            <summary>
            A template for frequency-dependent analysis.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.BaseSimulation" />
        </member>
        <member name="F:SpiceSharp.Simulations.FrequencySimulation._frequencyBehaviors">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.FrequencySimulation.FrequencySimulationStatistics">
            <summary>
            Gets the (cached) simulation statistics.
            </summary>
        </member>
        <member name="E:SpiceSharp.Simulations.FrequencySimulation.BeforeFrequencyLoad">
            <summary>
            Occurs before loading the matrix and right-hand side vector.
            </summary>
            <remarks>
            For better performance you can also create an entity with a high priority that
            generates a frequency behavior.
            </remarks>
        </member>
        <member name="E:SpiceSharp.Simulations.FrequencySimulation.AfterFrequencyLoad">
            <summary>
            Occurs after loading the matrix and right-hand side vector.
            </summary>
            <remarks>
            For better performance you can also create an entity with a low priority that
            generates a frequency behavior.
            </remarks>
        </member>
        <member name="P:SpiceSharp.Simulations.FrequencySimulation.ComplexState">
            <summary>
            Gets the complex simulation state.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.FrequencySimulation.FrequencySweep">
            <summary>
            Gets the frequency sweep.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencySimulation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.FrequencySimulation"/> class.
            </summary>
            <param name="name">The identifier of the simulation.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencySimulation.#ctor(System.String,SpiceSharp.Simulations.Sweep{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.FrequencySimulation"/> class.
            </summary>
            <param name="name">The identifier of the simulation.</param>
            <param name="frequencySweep">The frequency sweep.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencySimulation.Setup(SpiceSharp.Circuits.EntityCollection)">
            <summary>
            Set up the simulation.
            </summary>
            <param name="entities">The circuit that will be used.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencySimulation.Execute">
            <summary>
            Executes the simulation.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencySimulation.Unsetup">
            <summary>
            Destroys the simulation.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencySimulation.AcIterate">
            <summary>
            Acs the iterate.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencySimulation.OnBeforeFrequencyLoad(SpiceSharp.Simulations.LoadStateEventArgs)">
            <summary>
            Raises the <see cref="E:SpiceSharp.Simulations.FrequencySimulation.BeforeFrequencyLoad" /> event.
            </summary>
            <param name="args">The <see cref="T:SpiceSharp.Simulations.LoadStateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencySimulation.OnAfterFrequencyLoad(SpiceSharp.Simulations.LoadStateEventArgs)">
            <summary>
            Raises the <see cref="E:AfterFrequencyLoad" /> event.
            </summary>
            <param name="args">The <see cref="T:SpiceSharp.Simulations.LoadStateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencySimulation.InitializeAcParameters">
            <summary>
            Initializes the ac parameters.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencySimulation.FrequencyLoad">
            <summary>
            Loads the Y-matrix and right-hand side vector.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.FrequencySimulation.LoadFrequencyBehaviors">
            <summary>
            Loads the Y-matrix and right-hand side vector.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.InitializationModes">
            <summary>
            Possible modes for initialization of behaviors.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.InitializationModes.None">
            <summary>
            The default mode.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.InitializationModes.Float">
            <summary>
            Indicates that nodes may still be everywhere, and a first solution should be calculated.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.InitializationModes.Junction">
            <summary>
            Indicates that PN junctions or other difficult-to-converge dependencies should be initialized to a starting voltage.
            </summary>
            <remarks>
            PN junction often don't behave well in iterative methods due to their exponential dependency. A good initial value can be critical.
            </remarks>
        </member>
        <member name="F:SpiceSharp.Simulations.InitializationModes.Fix">
            <summary>
            Indicates that an initial iteration has been done and that we need to fix the solution to check for convergence.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.LoadStateEventArgs">
            <summary>
            Event arguments that are used when a state is loaded.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:SpiceSharp.Simulations.LoadStateEventArgs.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.LoadStateEventArgs.#ctor(SpiceSharp.Simulations.SimulationState)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.LoadStateEventArgs"/> class.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.ModifiedNodalAnalysisHelper">
            <summary>
            A helper class that is specific to Modified Nodal Analysis.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.ModifiedNodalAnalysisHelper.PreorderModifiedNodalAnalysis``1(SpiceSharp.Algebra.Solver{``0},System.Func{``0,System.Double})">
            <summary>
            This method preorders a matrix that is typically constructed using Modified Nodal Analysis (MNA).
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <param name="solver">The solver.</param>
            <param name="magnitude">The method that converts the base value type to a scalar.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.ModifiedNodalAnalysisHelper.ApplyDiagonalGmin(SpiceSharp.Algebra.SparseLinearSystem{System.Double},System.Double)">
            <summary>
            Apply an additional conductance to the diagonal elements of a matrix that is typically constructed using Modified Nodal Analysis (MNA).
            </summary>
            <param name="solver">The solver.</param>
            <param name="gmin">The conductance to be added.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.ModifiedNodalAnalysisHelper.CountTwins``1(SpiceSharp.Algebra.Solver{``0},System.Int32,SpiceSharp.Algebra.MatrixElement{``0}@,SpiceSharp.Algebra.MatrixElement{``0}@,System.Func{``0,System.Double})">
            <summary>
            Count the number of twins in a matrix that is typically constructed using Modified Nodal Analysis (MNA).
            </summary>
            <remarks>
            A twin is a matrix element that is equal to one, and also has a one on the transposed position. MNA formulation
            often leads to many twins, allowing us to save some time by searching for them beforehand.
            </remarks>
            <param name="solver">The solver.</param>
            <param name="column">The column index.</param>
            <param name="twin1">The first twin element.</param>
            <param name="twin2">The second twin element.</param>
            <param name="magnitude">The method that converts the base value type to a scalar.</param>
            <returns>The number of twins found.</returns>
        </member>
        <member name="T:SpiceSharp.Simulations.DecadeSweep">
            <summary>
            This class implements a sweep with a number of points per decade.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.Sweep`1" />
        </member>
        <member name="P:SpiceSharp.Simulations.DecadeSweep.Points">
            <summary>
            Gets an enumeration of the points in the sweep.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.DecadeSweep._freqDelta">
            <summary>
            Multiplication factor
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.DecadeSweep.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.DecadeSweep"/> class.
            </summary>
            <param name="initial">The initial value.</param>
            <param name="final">The final value.</param>
            <param name="steps">The number of steps per decade.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.LinearSweep">
            <summary>
            A class that implements a linear sweep.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.Sweep`1" />
        </member>
        <member name="P:SpiceSharp.Simulations.LinearSweep.Points">
            <summary>
            Gets an enumeration of the points in the sweep.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.LinearSweep.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.LinearSweep"/> class.
            </summary>
            <param name="initial">The initial value.</param>
            <param name="final">The final value.</param>
            <param name="count">The number of points.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.LinearSweep.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.LinearSweep"/> class.
            </summary>
            <param name="initial">The initial value.</param>
            <param name="final">The final value.</param>
            <param name="delta">The step size.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.OctaveSweep">
            <summary>
            Class that describes a sweep with a number of points per octave.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.Sweep`1" />
        </member>
        <member name="P:SpiceSharp.Simulations.OctaveSweep.Points">
            <summary>
            Gets an enumeration of the points in the sweep.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.OctaveSweep._freqDelta">
            <summary>
            Multiplication factor
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.OctaveSweep.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.OctaveSweep"/> class.
            </summary>
            <param name="initial">The initial value.</param>
            <param name="final">The final value.</param>
            <param name="steps">The number of points per octave.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.Sweep`1">
            <summary>
            A template for a sweep.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="P:SpiceSharp.Simulations.Sweep`1.Points">
            <summary>
            Gets an enumeration of the points in the sweep.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Sweep`1.Current">
            <summary>
            Gets the current value.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Sweep`1.Initial">
            <summary>
            Gets the initial value of the sweep.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Sweep`1.Final">
            <summary>
            Gets the final value of the sweep.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Sweep`1.Count">
            <summary>
            Gets the number of points in the sweep.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.Sweep`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Sweep`1"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.Sweep`1.#ctor(`0,`0,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Sweep`1"/> class.
            </summary>
            <param name="initial">The initial value.</param>
            <param name="final">The final value.</param>
            <param name="count">The number of points.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.TimeConfiguration">
            <summary>
            Configuration for a <see cref="T:SpiceSharp.Simulations.TimeConfiguration" />
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSet" />
        </member>
        <member name="P:SpiceSharp.Simulations.TimeConfiguration.Method">
            <summary>
            Gets or sets the integration method that needs to be used.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.TimeConfiguration.InitTime">
            <summary>
            Gets or sets the initial timepoint that should be exported.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.TimeConfiguration.FinalTime">
            <summary>
            Gets or sets the final simulation timepoint.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.TimeConfiguration.Step">
            <summary>
            Gets or sets the step size.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.TimeConfiguration.MaxStep">
            <summary>
            Gets or sets the maximum timestep.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.TimeConfiguration.DeltaMin">
            <summary>
            Gets the minimum timestep allowed.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.TimeConfiguration.TranMaxIterations">
            <summary>
            Gets or sets the maximum number of iterations allowed for each time point.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.TimeConfiguration.UseIc">
            <summary>
            Use initial conditions.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.TimeConfiguration.InitialConditions">
            <summary>
            Gets the initial conditions.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.TimeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.TimeConfiguration"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.TimeConfiguration.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.TimeConfiguration"/> class.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing initial condition node names, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.TimeConfiguration.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.TimeConfiguration"/> class.
            </summary>
            <param name="step">The step size.</param>
            <param name="final">The final time.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.TimeConfiguration.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.TimeConfiguration"/> class.
            </summary>
            <param name="step">The step size.</param>
            <param name="final">The final time.</param>
            <param name="max">The maximum timestep.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.TimeSimulation">
            <summary>
            A base class for time-domain analysis.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.BaseSimulation" />
        </member>
        <member name="P:SpiceSharp.Simulations.TimeSimulation.Method">
            <summary>
            Gets the active integration method.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.TimeSimulation._transientBehaviors">
            <summary>
            Time-domain behaviors.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.TimeSimulation.TimeSimulationStatistics">
            <summary>
            Time simulation statistics.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.TimeSimulation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.TimeSimulation"/> class.
            </summary>
            <param name="name">The identifier of the simulation.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.TimeSimulation.#ctor(System.String,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.TimeSimulation"/> class.
            </summary>
            <param name="name">The identifier of the simulation.</param>
            <param name="step">The step size.</param>
            <param name="final">The final time.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.TimeSimulation.#ctor(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.TimeSimulation"/> class.
            </summary>
            <param name="name">The identifier of the simulation.</param>
            <param name="step">The step size.</param>
            <param name="final">The final time.</param>
            <param name="maxStep">The maximum step.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.TimeSimulation.Setup(SpiceSharp.Circuits.EntityCollection)">
            <summary>
            Set up the simulation.
            </summary>
            <param name="entities">The circuit that will be used.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.TimeSimulation.Execute">
            <summary>
            Executes the simulation.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.TimeSimulation.Unsetup">
            <summary>
            Destroys the simulation.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.TimeSimulation.TimeIterate(System.Int32)">
            <summary>
            Iterates to a solution for time simulations.
            </summary>
            <param name="maxIterations">The maximum number of iterations.</param>
            <returns>
              <c>true</c> if the iterations converged to a solution; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.TimeSimulation.InitializeStates">
            <summary>
            Initializes all transient behaviors to assume that the current solution is the DC solution.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.TimeSimulation.LoadInitialConditions(System.Object,SpiceSharp.Simulations.LoadStateEventArgs)">
            <summary>
            Applies initial conditions.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Arguments</param>
        </member>
        <member name="M:SpiceSharp.Simulations.TimeSimulation.LoadBehaviors">
            <summary>
            Load all behaviors for time simulation.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.TimeSimulation.Accept">
            <summary>
            Accepts the current simulation state as a valid timepoint.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.TimeSimulation.Probe(System.Double)">
            <summary>
            Probe for a new time point.
            </summary>
            <param name="delta">The timestep.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.TimeSimulationStatistics">
            <summary>
            Statistics for a <see cref="T:SpiceSharp.Simulations.TimeSimulationStatistics" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.TimeSimulationStatistics.TimePoints">
            <summary>
            Gets the number of time points calculated.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.TimeSimulationStatistics.TransientIterations">
            <summary>
            Gets the number of transient iterations.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.TimeSimulationStatistics.TransientTime">
            <summary>
            Gets the time spent on transient analysis.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.TimeSimulationStatistics.TransientSolveTime">
            <summary>
            Gets the time spent on solving a transient analysis.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.TimeSimulationStatistics.Accepted">
            <summary>
            Gets the number of accepted time points.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.TimeSimulationStatistics.Rejected">
            <summary>
            Gets the number of rejected time points.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.TimeSimulationStatistics.Reset">
            <summary>
            Reset the statistics.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.BeforeExecuteEventArgs">
            <summary>
            Event arguments that are used before simulation execution.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:SpiceSharp.Simulations.BeforeExecuteEventArgs.Repeated">
            <summary>
            Gets a value indicating whether the simulation is repeated.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.BeforeExecuteEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.BeforeExecuteEventArgs"/> class.
            </summary>
            <param name="repeated">if set to <c>true</c>, the simulation was repeated.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.CollectionConfiguration">
            <summary>
            This class can configure how collections are created in simulations.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSet" />
        </member>
        <member name="P:SpiceSharp.Simulations.CollectionConfiguration.VariableComparer">
            <summary>
            Gets or sets the comparer used for comparing two variable/node identifiers.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.CollectionConfiguration.CloneParameters">
            <summary>
            Gets or sets a flag indicating whether the simulation should clone all parameters.
            </summary>
            <remarks>
            This is mainly useful when using the same circuit for multiple simulations and
            running them in multiple threads.
            </remarks>
        </member>
        <member name="T:SpiceSharp.Simulations.ExportDataEventArgs">
            <summary>
            A class that describes exported simulation data. Can be used by simulations to pass exported simulation data as an event argument.
            This class contains some helper methods for extracting data from the simulation.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="F:SpiceSharp.Simulations.ExportDataEventArgs._simulation">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ExportDataEventArgs.Time">
            <summary>
            Gets the time if the simulation supports it.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ExportDataEventArgs.Frequency">
            <summary>
            Gets the frequency if the simulation supports it.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ExportDataEventArgs.Laplace">
            <summary>
            Gets the laplace variable if the simulation supports it.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ExportDataEventArgs.SweepValue">
            <summary>
            Gets the current sweep value if the simulation is a <see cref="T:SpiceSharp.Simulations.DC" /> analysis.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.ExportDataEventArgs.#ctor(SpiceSharp.Simulations.Simulation)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.ExportDataEventArgs"/> class.
            </summary>
            <param name="simulation">The simulation.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.ExportDataEventArgs.GetVoltage(System.String)">
            <summary>
            Gets the voltage at a specified node.
            </summary>
            <param name="node">The node identifier.</param>
            <returns>The extracted voltage.</returns>
            <remarks>
            For better performance, consider using <see cref="T:SpiceSharp.Simulations.RealVoltageExport" />.
            </remarks>
            <seealso cref="T:SpiceSharp.Simulations.RealVoltageExport" />
        </member>
        <member name="M:SpiceSharp.Simulations.ExportDataEventArgs.GetVoltage(System.String,System.String)">
            <summary>
            Gets the differential voltage between two specified nodes.
            </summary>
            <param name="positive">The identifier of the node at the positive probe.</param>
            <param name="negative">The identifier of the node at the negative probe.</param>
            <returns>The extracted voltage.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.ExportDataEventArgs.GetComplexVoltage(System.String)">
            <summary>
            Gets the complex voltage at a specific node.
            </summary>
            <param name="node">The node identifier.</param>
            <returns>The extracted voltage.</returns>
            <remarks>
            For better performance, consider using <see cref="T:SpiceSharp.Simulations.ComplexVoltageExport"/>
            </remarks>
            <seealso cref="T:SpiceSharp.Simulations.ComplexVoltageExport"/>
        </member>
        <member name="M:SpiceSharp.Simulations.ExportDataEventArgs.GetComplexVoltage(System.String,System.String)">
            <summary>
            Gets the differential complex voltage between two specified nodes.
            </summary>
            <param name="positive">The identifier of the node at the positive probe.</param>
            <param name="negative">The identifier of the node at the negative probe.</param>
            <returns>
            The extracted voltage.
            </returns>
        </member>
        <member name="T:SpiceSharp.Simulations.ComplexCurrentExport">
            <summary>
            This class can export complex currents.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.Export`1" />
        </member>
        <member name="P:SpiceSharp.Simulations.ComplexCurrentExport.Source">
            <summary>
            Gets the identifier of the voltage source.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ComplexCurrentExport.Index">
            <summary>
            Gets the index in the of the current variable.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.ComplexCurrentExport.IsValidSimulation(SpiceSharp.Simulations.Simulation)">
            <summary>
            Check if the simulation is a frequency simulation
            </summary>
            <param name="simulation">The simulation.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Simulations.ComplexCurrentExport.#ctor(SpiceSharp.Simulations.FrequencySimulation,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.RealCurrentExport"/> class.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="source">The source identifier.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.ComplexCurrentExport.Initialize(System.Object,System.EventArgs)">
            <summary>
            Initializes the export.
            </summary>
            <param name="sender">The object (simulation) sending the event.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.ComplexCurrentExport.Finalize(System.Object,System.EventArgs)">
            <summary>
            Finalizes the export.
            </summary>
            <param name="sender">The object (simulation) sending the event</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.ComplexPropertyExport">
            <summary>
            This class can export complex property values.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.Export`1" />
        </member>
        <member name="P:SpiceSharp.Simulations.ComplexPropertyExport.EntityName">
            <summary>
            Gets the identifier of the entity.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ComplexPropertyExport.PropertyName">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ComplexPropertyExport.Comparer">
            <summary>
            Gets the comparer for parameter names.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.ComplexPropertyExport.#ctor(SpiceSharp.Simulations.Simulation,System.String,System.String,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.ComplexPropertyExport"/> class.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="entityName">The identifier of the entity.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing parameter names, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.ComplexPropertyExport.Initialize(System.Object,System.EventArgs)">
            <summary>
            Initializes the export.
            </summary>
            <param name="sender">The object (simulation) sending the event.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.ComplexVoltageExport">
            <summary>
            This class can export complex voltages.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.Export`1" />
        </member>
        <member name="P:SpiceSharp.Simulations.ComplexVoltageExport.PosNode">
            <summary>
            Gets the identifier of the positive node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ComplexVoltageExport.PosIndex">
            <summary>
            Gets the index of the positive node variable.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ComplexVoltageExport.NegNode">
            <summary>
            Gets the identifier of the negative node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ComplexVoltageExport.NegIndex">
            <summary>
            Gets the index of the negative node variable.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ComplexVoltageExport.Decibels">
            <summary>
            Gets the amplitude in decibels (dB).
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.ComplexVoltageExport.Phase">
            <summary>
            Gets the phase in radians.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.ComplexVoltageExport.IsValidSimulation(SpiceSharp.Simulations.Simulation)">
            <summary>
            Check if the simulation is a <see cref="T:SpiceSharp.Simulations.FrequencySimulation" />.
            </summary>
            <param name="simulation">The simulation.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Simulations.ComplexVoltageExport.#ctor(SpiceSharp.Simulations.FrequencySimulation,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.ComplexVoltageExport"/> class.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="posNode">The node identifier.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.ComplexVoltageExport.#ctor(SpiceSharp.Simulations.FrequencySimulation,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.ComplexVoltageExport"/> class.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="posNode">The positive node identifier.</param>
            <param name="negNode">The negative node identifier.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.ComplexVoltageExport.Initialize(System.Object,System.EventArgs)">
            <summary>
            Initializes the export.
            </summary>
            <param name="sender">The object (simulation) sending the event.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.ComplexVoltageExport.Finalize(System.Object,System.EventArgs)">
            <summary>
            Finalizes the export.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:SpiceSharp.Simulations.Export`1">
            <summary>
            A template for exporting data for a simulation.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="P:SpiceSharp.Simulations.Export`1.IsValid">
            <summary>
            Returns true if the exporter is currently valid.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Export`1.Extractor">
            <summary>
            Gets or sets the extractor function.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Export`1.Simulation">
            <summary>
            Gets the simulation from which the data needs to be extracted.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.Export`1.IsValidSimulation(SpiceSharp.Simulations.Simulation)">
            <summary>
            Checks whether or not the simulation is a valid one
            </summary>
            <param name="simulation">The simulation.</param>
            <returns></returns>
        </member>
        <member name="P:SpiceSharp.Simulations.Export`1.Value">
            <summary>
            Gets the current value from the simulation.
            </summary>
            <remarks>
            This property will return a default if there is nothing to extract.
            </remarks>
        </member>
        <member name="M:SpiceSharp.Simulations.Export`1.#ctor(SpiceSharp.Simulations.Simulation)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Export`1"/> class.
            </summary>
            <param name="simulation">The simulation.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Export`1.Destroy">
            <summary>
            Destroys the export.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.Export`1.LazyLoad">
            <summary>
            Load the export extractor if the simulation has already started.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.Export`1.Initialize(System.Object,System.EventArgs)">
            <summary>
            Initializes the export.
            </summary>
            <param name="sender">The object (simulation) sending the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Export`1.Finalize(System.Object,System.EventArgs)">
            <summary>
            Finalizes the export.
            </summary>
            <param name="sender">The object (simulation) sending the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.GenericExport`1">
            <summary>
            This class allows any function to be specified.
            </summary>
            <typeparam name="T">The base type.</typeparam>
            <seealso cref="T:SpiceSharp.Simulations.Export`1" />
        </member>
        <member name="F:SpiceSharp.Simulations.GenericExport`1._myExtractor">
            <summary>
            Private extractor
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.GenericExport`1.#ctor(SpiceSharp.Simulations.Simulation,System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.GenericExport`1"/> class.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="extractor">The function for extracting information.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.GenericExport`1.Initialize(System.Object,System.EventArgs)">
            <summary>
            Initializes the export.
            </summary>
            <param name="sender">The object (simulation) sending the event.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.InputNoiseDensityExport">
            <summary>
            This class can export the input-referred noise density.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.Export`1" />
        </member>
        <member name="M:SpiceSharp.Simulations.InputNoiseDensityExport.IsValidSimulation(SpiceSharp.Simulations.Simulation)">
            <summary>
            Check if the simulation is a <see cref="T:SpiceSharp.Simulations.Noise"/> simulation.
            </summary>
            <param name="simulation"></param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Simulations.InputNoiseDensityExport.#ctor(SpiceSharp.Simulations.Noise)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.InputNoiseDensityExport"/> class.
            </summary>
            <param name="noise">The noise analysis.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.InputNoiseDensityExport.Initialize(System.Object,System.EventArgs)">
            <summary>
            Initializes the export.
            </summary>
            <param name="sender">The object (simulation) sending the event.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.OutputNoiseDensityExport">
            <summary>
            This class can export the output noise density.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.Export`1" />
        </member>
        <member name="M:SpiceSharp.Simulations.OutputNoiseDensityExport.IsValidSimulation(SpiceSharp.Simulations.Simulation)">
            <summary>
            Check if the simulation is a <see cref="T:SpiceSharp.Simulations.Noise"/> simulation.
            </summary>
            <param name="simulation">The simulation.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Simulations.OutputNoiseDensityExport.#ctor(SpiceSharp.Simulations.Noise)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.OutputNoiseDensityExport"/> class.
            </summary>
            <param name="noise">The noise analysis.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.OutputNoiseDensityExport.Initialize(System.Object,System.EventArgs)">
            <summary>
            Initializes the export.
            </summary>
            <param name="sender">The object (simulation) sending the event.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.RealCurrentExport">
            <summary>
            This class can export real currents.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.Export`1" />
        </member>
        <member name="P:SpiceSharp.Simulations.RealCurrentExport.Source">
            <summary>
            Gets the identifier of the voltage source.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.RealCurrentExport.Index">
            <summary>
            Gets the index of the variable in the solver.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.RealCurrentExport.IsValidSimulation(SpiceSharp.Simulations.Simulation)">
            <summary>
            Check if the simulation is a base simulation.
            </summary>
            <param name="simulation"></param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Simulations.RealCurrentExport.#ctor(SpiceSharp.Simulations.BaseSimulation,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.RealCurrentExport"/> class.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="source">The source identifier.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.RealCurrentExport.Initialize(System.Object,System.EventArgs)">
            <summary>
            Initializes the export.
            </summary>
            <param name="sender">The object (simulation) sending the event.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.RealCurrentExport.Finalize(System.Object,System.EventArgs)">
            <summary>
            Finalizes the export.
            </summary>
            <param name="sender">The object (simulation) sending the event.</param>
            <param name="e">the <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.RealPropertyExport">
            <summary>
            This class can export real properties.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.Export`1" />
        </member>
        <member name="P:SpiceSharp.Simulations.RealPropertyExport.EntityName">
            <summary>
            Gets the identifier of the entity.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.RealPropertyExport.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.RealPropertyExport.Comparer">
            <summary>
            Gets the comparer for finding the parameter.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.RealPropertyExport.#ctor(SpiceSharp.Simulations.Simulation,System.String,System.String,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.RealPropertyExport"/> class.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="entityName">The identifier of the entity.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing parameter names, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.RealPropertyExport.Initialize(System.Object,System.EventArgs)">
            <summary>
            Initializes the export.
            </summary>
            <param name="sender">The object (simulation) sending the event.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.RealVoltageExport">
            <summary>
            This class can export real voltages.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.Export`1" />
        </member>
        <member name="P:SpiceSharp.Simulations.RealVoltageExport.PosNode">
            <summary>
            Gets the identifier of the positive node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.RealVoltageExport.PosIndex">
            <summary>
            Gets the index of the positive node variable.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.RealVoltageExport.NegNode">
            <summary>
            Gets the identifier of the negative node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.RealVoltageExport.NegIndex">
            <summary>
            gets the index of the negative node variable.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.RealVoltageExport.IsValidSimulation(SpiceSharp.Simulations.Simulation)">
            <summary>
            Check if the simulation is a <see cref="T:SpiceSharp.Simulations.BaseSimulation"/>.
            </summary>
            <param name="simulation"></param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.Simulations.RealVoltageExport.#ctor(SpiceSharp.Simulations.BaseSimulation,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.RealVoltageExport"/> class.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="posNode">The node identifier.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.RealVoltageExport.#ctor(SpiceSharp.Simulations.BaseSimulation,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.RealVoltageExport"/> class.
            </summary>
            <param name="simulation">The simulation.</param>
            <param name="posNode">The positive node identifier.</param>
            <param name="negNode">The negative node identifier.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.RealVoltageExport.Initialize(System.Object,System.EventArgs)">
            <summary>
            Initializes the export.
            </summary>
            <param name="sender">The object (simulation) sending the event.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.RealVoltageExport.Finalize(System.Object,System.EventArgs)">
            <summary>
            Finalizes the export.
            </summary>
            <param name="sender">The object (simulation) sending the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.AC">
            <summary>
            Class that implements a frequency-domain analysis (AC analysis).
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.FrequencySimulation" />
        </member>
        <member name="M:SpiceSharp.Simulations.AC.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.AC"/> class.
            </summary>
            <param name="name">The identifier of the simulation.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.AC.#ctor(System.String,SpiceSharp.Simulations.Sweep{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.AC"/> class.
            </summary>
            <param name="name">The identifier of the simulation.</param>
            <param name="frequencySweep">The frequency sweep.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.AC.Setup(SpiceSharp.Circuits.EntityCollection)">
            <summary>
            Set up the simulation.
            </summary>
            <param name="entities">The circuit that will be used.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.AC.Execute">
            <summary>
            Executes the simulation.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.DC">
            <summary>
            Class that implements a DC sweep analysis.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.BaseSimulation" />
        </member>
        <member name="P:SpiceSharp.Simulations.DC.Sweeps">
            <summary>
            Gets the currently active sweeps.
            </summary>
        </member>
        <member name="E:SpiceSharp.Simulations.DC.IterationFailed">
            <summary>
            Occurs when iterating to a solution has failed.
            </summary>
        </member>
        <member name="E:SpiceSharp.Simulations.DC.OnParameterSearch">
            <summary>
            Occurs when a parameter for sweeping is searched.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.DC.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.DC"/> class.
            </summary>
            <param name="name">The identifier of the simulation.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.DC.#ctor(System.String,System.String,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.DC"/> class.
            </summary>
            <param name="name">The identifier of the simulation.</param>
            <param name="source">The source identifier.</param>
            <param name="start">The starting value.</param>
            <param name="stop">The stop value.</param>
            <param name="step">The step value.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.DC.#ctor(System.String,System.Collections.Generic.IEnumerable{SpiceSharp.Simulations.SweepConfiguration})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.DC"/> class.
            </summary>
            <param name="name">The identifier of the simulation.</param>
            <param name="sweeps">The sweeps.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.DC.Setup(SpiceSharp.Circuits.EntityCollection)">
            <summary>
            Set up the simulation.
            </summary>
            <param name="entities">The circuit that will be used.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.DC.Execute">
            <summary>
            Executes the simulation.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.DC.Unsetup">
            <summary>
            Destroys the simulation.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.DCConfiguration">
            <summary>
            A configuration for a <see cref="T:SpiceSharp.Simulations.DC" /> simulation.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSet" />
        </member>
        <member name="P:SpiceSharp.Simulations.DCConfiguration.Sweeps">
            <summary>
            Gets the list of sweeps that need to be executed.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.DCConfiguration.SweepMaxIterations">
            <summary>
            Gets the maximum number of iterations allowed for DC sweeps.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.DCParameterSearchEventArgs">
            <summary>
            Event arguments for searching a parameter used as a sweep in DC analysis.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:SpiceSharp.Simulations.DCParameterSearchEventArgs.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.DCParameterSearchEventArgs.Level">
            <summary>
            Gets the level of the sweep.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.DCParameterSearchEventArgs.Result">
            <summary>
            Gets or sets the found parameter.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.DCParameterSearchEventArgs.TemperatureNeeded">
            <summary>
            Gets or sets whether or not Temperature behaviors need to be run for every sweep point
            of the analysis
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.DCParameterSearchEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.DCParameterSearchEventArgs"/> class.
            </summary>
            <param name="name">The identifier of the parameter.</param>
            <param name="level">The sweep level.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.NestedSweeps">
            <summary>
            A class describing sweeps that can be nested
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.NestedSweeps.Item(System.Int32)">
            <summary>
            Gets a sweep instance.
            </summary>
            <param name="index">Index</param>
            <returns>The sweep index.</returns>
        </member>
        <member name="P:SpiceSharp.Simulations.NestedSweeps.Count">
            <summary>
            Gets the sweep count.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.NestedSweeps.Top">
            <summary>
            Gets the top-most sweep.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.NestedSweeps._instances">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.NestedSweeps.#ctor(System.Collections.Generic.IEnumerable{SpiceSharp.Simulations.SweepConfiguration})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.NestedSweeps"/> class.
            </summary>
            <param name="sweeps">The sweeps.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.NestedSweeps.Add(SpiceSharp.Simulations.SweepConfiguration)">
            <summary>
            Adds the specified sweep.
            </summary>
            <param name="sweep">The sweep.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.NestedSweeps.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.SweepConfiguration">
            <summary>
            A class that describes a sweep.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.SweepConfiguration.Start">
            <summary>
            Gets or sets the starting value.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.SweepConfiguration.Stop">
            <summary>
            Gets or sets the final value.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.SweepConfiguration.Step">
            <summary>
            Gets or sets the stepping value.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.SweepConfiguration.ComponentName">
            <summary>
            The name of the source being varied.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.SweepConfiguration.#ctor(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.SweepConfiguration"/> class.
            </summary>
            <param name="name">The name of the source to sweep.</param>
            <param name="start">The starting value.</param>
            <param name="stop">The stopping value.</param>
            <param name="step">The step value.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.SweepInstance">
            <summary>
            Class that implements a sweep.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.SweepInstance.CurrentValue">
            <summary>
            Gets the current value.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.SweepInstance.CurrentStep">
            <summary>
            Gets the current step index.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.SweepInstance.Limit">
            <summary>
            Gets the maximum number of steps.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.SweepInstance.Initial">
            <summary>
            Gets the initial value.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.SweepInstance.Final">
            <summary>
            Gets the final value.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.SweepInstance.Parameter">
            <summary>
            Gets the parameter identifier that is swept.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.SweepInstance.#ctor(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.SweepInstance"/> class.
            </summary>
            <param name="parameter">The parameter identifier.</param>
            <param name="start">The initial value.</param>
            <param name="stop">The final value.</param>
            <param name="step">The step value.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.SweepInstance.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.SweepInstance.Increment">
            <summary>
            Go to the next step in the sweep.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.Noise">
            <summary>
            A class that implements a noise analysis.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.FrequencySimulation" />
        </member>
        <member name="P:SpiceSharp.Simulations.Noise.NoiseConfiguration">
            <summary>
            Gets the currently active noise configuration.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Noise.NoiseState">
            <summary>
            Gets the noise state.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Noise._noiseBehaviors">
            <summary>
            Noise behaviors
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.Noise.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Noise"/> class.
            </summary>
            <param name="name">The identifier of the simulation.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Noise.#ctor(System.String,System.String,System.String,SpiceSharp.Simulations.Sweep{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Noise"/> class.
            </summary>
            <param name="name">The identifier of the simulation.</param>
            <param name="output">The output node identifier.</param>
            <param name="input">The input source identifier.</param>
            <param name="frequencySweep">The frequency sweep.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Noise.#ctor(System.String,System.String,System.String,System.String,SpiceSharp.Simulations.Sweep{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Noise"/> class.
            </summary>
            <param name="name">The identifier of the simulation.</param>
            <param name="output">The output node identifier.</param>
            <param name="reference">The reference output node identifier.</param>
            <param name="input">The input source identifier.</param>
            <param name="frequencySweep">The frequency sweep.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Noise.Setup(SpiceSharp.Circuits.EntityCollection)">
            <summary>
            Set up the simulation.
            </summary>
            <param name="entities">The circuit that will be used.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Noise.Unsetup">
            <summary>
            Destroys the simulation.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.Noise.Execute">
            <summary>
            Executes the simulation.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.Noise.NzIterate(System.Int32,System.Int32)">
            <summary>
            Calculate the solution for <see cref="T:SpiceSharp.Simulations.Noise" /> analysis
            </summary>
            <param name="posDrive">The positive driving node index.</param>
            <param name="negDrive">The negative driving node index.</param>
            <remarks>
            This routine solves the adjoint system. It assumes that the matrix has
            already been loaded by a call to AcIterate, so it only alters the right
            hand side vector. The unit-valued current excitation is applied between
            nodes posDrive and negDrive.
            </remarks>
        </member>
        <member name="T:SpiceSharp.Simulations.NoiseConfiguration">
            <summary>
            A configuration for a <see cref="T:SpiceSharp.Simulations.Noise"/> analysis.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.NoiseConfiguration.Output">
            <summary>
            Gets or sets the noise output node identifier.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.NoiseConfiguration.OutputRef">
            <summary>
            Gets or sets the noise output reference node identifier.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.NoiseConfiguration.Input">
            <summary>
            Gets or sets the identifier of the AC source used as input reference.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.NoiseConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.NoiseConfiguration"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.NoiseConfiguration.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.NoiseConfiguration"/> class.
            </summary>
            <param name="output">The output node identifier.</param>
            <param name="reference">The reference node identifier.</param>
            <param name="input">The input source identifier.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.NoiseState">
            <summary>
            A class that represents the state of a <see cref="T:SpiceSharp.Simulations.Noise" /> analysis.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.SimulationState" />
        </member>
        <member name="F:SpiceSharp.Simulations.NoiseState._gainSquareInverted">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.NoiseState._currentFrequency">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.NoiseState._lastFrequency">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.NoiseState._logLastFrequency">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.NoiseState._deltaFrequency">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.NoiseState._deltaLogFrequency">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.NoiseState._logFrequency">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.NoiseState.Frequency">
            <summary>
            Gets or sets the current frequency.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.NoiseState.DeltaFrequency">
            <summary>
            Gets or sets the frequency step.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.NoiseState.OutputNoise">
            <summary>
            Output referred noise
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.NoiseState.InputNoise">
            <summary>
            Gets or sets the total input-referred noise.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.NoiseState.OutputNoiseDensity">
            <summary>
            Gets or sets the total output noise density.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.NoiseState.GainInverseSquared">
            <summary>
            Gets or sets the inverse squared gain.
            </summary>
            <remarks>
            This value is used to compute the input noise density from the output noise density.
            </remarks>
        </member>
        <member name="P:SpiceSharp.Simulations.NoiseState.LogInverseGain">
            <summary>
            Gets the logarithm of the gain squared.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.NoiseState.Reset(System.Double)">
            <summary>
            Reset the frequency.
            </summary>
            <param name="frequency">The new frequency point.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.NoiseState.Integrate(System.Double,System.Double,System.Double)">
            <summary>
            This subroutine evaluate the integration of the function
            NOISE = a * (FREQUENCY) ^ (EXPONENT)
            given two points from the curve. If EXPONENT is relatively close to 0, the noise is simply multiplied
            by the change in frequency.
            If it isn't, a more complicated expression must be used.
            Note that EXPONENT = -1 gives a different equation than EXPONENT != -1.
            </summary>
            <param name="noiseDensity">The noise density.</param>
            <param name="logNoiseDensity">The previous noise density</param>
            <param name="lastLogNoiseDensity">The previous log noise density</param>
            <returns>
            The integrated noise.
            </returns>
        </member>
        <member name="T:SpiceSharp.Simulations.OP">
            <summary>
            Class that implements the operating point analysis.
            </summary>
            <seealso cref="T:SpiceSharp.Simulations.BaseSimulation" />
        </member>
        <member name="M:SpiceSharp.Simulations.OP.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.OP"/> class.
            </summary>
            <param name="name">The identifier of the simulation.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.OP.Execute">
            <summary>
            Executes the simulation.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.IntegrationMethods.Spice.SpiceConfiguration">
            <summary>
            A configuration for Spice-based integration methods.
            </summary>
            <seealso cref="T:SpiceSharp.ParameterSet" />
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.Spice.SpiceConfiguration.TrTol">
            <summary>
            Gets or sets the truncation tolerance correction factor.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.Spice.SpiceConfiguration.LteRelTol">
            <summary>
            Gets or sets the local truncation error relative tolerance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.Spice.SpiceConfiguration.LteAbsTol">
            <summary>
            Gets or sets the local truncation truncation error absolute tolerance.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.Spice.SpiceConfiguration.ChgTol">
            <summary>
            Gets or sets the absolute tolerance for charges.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.IntegrationMethods.Spice.SpiceConfiguration.Expansion">
            <summary>
            Gets or sets the maximum timestep expansion factor.
            </summary>
            <remarks>
            This is the maximum factor a timestep can be made from one point to the next. For example,
            if the previous delta was 1us, the next delta is maximum Expansion * 1us.
            </remarks>
        </member>
        <member name="T:SpiceSharp.Simulations.Transient">
            <summary>
            This class implements the transient analysis.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.Transient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Transient"/> class.
            </summary>
            <param name="name">The identifier of the simulation.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Transient.#ctor(System.String,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Transient"/> class.
            </summary>
            <param name="name">The identifier of the simulation.</param>
            <param name="step">The step size.</param>
            <param name="final">The final time.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Transient.#ctor(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Transient"/> class.
            </summary>
            <param name="name">The identifier of the simulation.</param>
            <param name="step">The step size.</param>
            <param name="final">The final time.</param>
            <param name="maxStep">The maximum step.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Transient.Execute">
            <summary>
            Executes the simulation.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.Simulation">
            <summary>
            A template for any simulation.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.Simulation.Statuses">
            <summary>
            Possible statuses for a simulation.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Simulation.Statuses.None">
            <summary>
            Indicates that the simulation has not started.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Simulation.Statuses.Setup">
            <summary>
            Indicates that the simulation is now in its setup phase.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Simulation.Statuses.Running">
            <summary>
            Indicates that the simulation is running.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.Simulation.Statuses.Unsetup">
            <summary>
            Indicates that the simulation is cleaning up all its resources.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Simulation.Status">
            <summary>
            Gets the current status of the simulation.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Simulation.Configurations">
            <summary>
            Gets a set of <see cref="T:SpiceSharp.ParameterSet" /> that hold the configurations for the simulation.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Simulation.Statistics">
            <summary>
            Gets a set of <see cref="T:SpiceSharp.ParameterSet" /> that holds the statistics for the simulation.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Simulation.Variables">
            <summary>
            Gets the set of variables (unknowns).
            </summary>
        </member>
        <member name="E:SpiceSharp.Simulations.Simulation.ExportSimulationData">
            <summary>
            Occurs when simulation data can be exported.
            </summary>
        </member>
        <member name="E:SpiceSharp.Simulations.Simulation.BeforeSetup">
            <summary>
            Occurs before the simulation is set up.
            </summary>
        </member>
        <member name="E:SpiceSharp.Simulations.Simulation.AfterSetup">
            <summary>
            Occurs after the simulation is set up.
            </summary>
        </member>
        <member name="E:SpiceSharp.Simulations.Simulation.BeforeExecute">
            <summary>
            Occurs before the simulation starts its execution.
            </summary>
        </member>
        <member name="E:SpiceSharp.Simulations.Simulation.AfterExecute">
            <summary>
            Occurs after the simulation has executed.
            </summary>
        </member>
        <member name="E:SpiceSharp.Simulations.Simulation.BeforeUnsetup">
            <summary>
            Occurs before the simulation is destroyed.
            </summary>
        </member>
        <member name="E:SpiceSharp.Simulations.Simulation.AfterUnsetup">
            <summary>
            Occurs after the simulation is destroyed.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Simulation.Name">
            <summary>
            Gets the identifier of the simulation.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Simulation.EntityBehaviors">
            <summary>
            Gets a pool of all entity behaviors active in the simulation.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Simulation.EntityParameters">
            <summary>
            Gets a pool of all entity parameter sets active in the simulation.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Simulation.SimulationStatistics">
            <summary>
            A reference to the regular simulation statistics (cached)
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Simulation.BehaviorTypes">
            <summary>
            Gets the behavior types in the order that they are called.
            </summary>
            <remarks>
            The order is important for establishing dependencies. A behavior that is called first should
            not depend on any other behaviors!
            </remarks>
        </member>
        <member name="M:SpiceSharp.Simulations.Simulation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Simulation"/> class.
            </summary>
            <param name="name">The identifier of the simulation.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Simulation.Run(SpiceSharp.Circuits.EntityCollection)">
            <summary>
            Runs the simulation on the specified circuit.
            </summary>
            <param name="entities">The entities to simulate.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Simulation.Setup(SpiceSharp.Circuits.EntityCollection)">
            <summary>
            Set up the simulation.
            </summary>
            <param name="entities">The entities that are included in the simulation.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Simulation.Unsetup">
            <summary>
            Destroys the simulation.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.Simulation.Execute">
            <summary>
            Executes the simulation.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.Simulation.OnExport(SpiceSharp.Simulations.ExportDataEventArgs)">
            <summary>
            Raises the <see cref="E:ExportSimulationData" /> event.
            </summary>
            <param name="args">The <see cref="T:SpiceSharp.Simulations.ExportDataEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Simulation.OnBeforeSetup(System.EventArgs)">
            <summary>
            Raises the <see cref="E:BeforeSetup" /> event.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Simulation.OnBeforeExecute(SpiceSharp.Simulations.BeforeExecuteEventArgs)">
            <summary>
            Raises the <see cref="E:BeforeExecute" /> event.
            </summary>
            <param name="args">The <see cref="T:SpiceSharp.Simulations.BeforeExecuteEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Simulation.OnAfterSetup(System.EventArgs)">
            <summary>
            Raises the <see cref="E:AfterSetup" /> event.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Simulation.OnAfterExecute(SpiceSharp.Simulations.AfterExecuteEventArgs)">
            <summary>
            Raises the <see cref="E:AfterSetup" /> event.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Simulation.OnBeforeUnsetup(System.EventArgs)">
            <summary>
            Raises the <see cref="E:BeforeUnsetup" /> event.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Simulation.OnAfterUnsetup(System.EventArgs)">
            <summary>
            Raises the <see cref="E:AfterUnsetup" /> event.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Simulation.SetupBehaviors(SpiceSharp.Circuits.EntityCollection)">
            <summary>
            Set up all behaviors previously created.
            </summary>
            <param name="entities">The circuit entities.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Simulation.SetupParameters(System.Collections.Generic.IEnumerable{SpiceSharp.Circuits.Entity})">
            <summary>
            Collect and set up the parameter sets of all circuit entities.
            </summary>
            <remarks>
            The parameter sets are cloned during set up to avoid issues when running multiple
            simulations in parallel.
            </remarks>
            <param name="entities">The entities for which parameter sets need to be collected.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.SimulationState">
            <summary>
            This class represents a simulation state.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.SimulationState.IsSetup">
            <summary>
            Gets a value indicating whether this state is set up.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.SimulationState.Setup(SpiceSharp.Simulations.VariableSet)">
            <summary>
            Sets up the simulation state.
            </summary>
            <param name="nodes">The unknown variables for which the state is used.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.SimulationState.Unsetup">
            <summary>
            Destroys the state.
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.SimulationStatistics">
            <summary>
            Statistics for a <see cref="T:SpiceSharp.Simulations.Simulation" />.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.SimulationStatistics.SetupTime">
            <summary>
            Gets the time spent during setup.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.SimulationStatistics.ExecutionTime">
            <summary>
            Gets the time spent during execution.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.SimulationStatistics.UnsetupTime">
            <summary>
            Gets the time spent during unsetup.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.SimulationStatistics.BehaviorCreationTime">
            <summary>
            Gets the time spent creating behaviors.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.SimulationStatistics.Reset">
            <summary>
            Clear all statistics
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.Statistics">
            <summary>
            A class that can store statistics about anything.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.Statistics.Reset">
            <summary>
            Reset all statistics
            </summary>
        </member>
        <member name="T:SpiceSharp.Simulations.Variable">
            <summary>
            A class that describes an unknown variable in a system of equations.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Variable.Name">
            <summary>
            Gets the identifier of the variable.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.Variable.Index">
            <summary>
            Gets the index of the node.
            </summary>
            <remarks>
            This index is typically used as the row index for the KCL law of this node voltage.
            </remarks>
        </member>
        <member name="P:SpiceSharp.Simulations.Variable.Diagonal">
            <summary>
            Gets or sets the diagonal matrix element associated with the node.
            </summary>
            <remarks>
            This variable is used by simulations to aid convergence in specific situations.
            </remarks>
        </member>
        <member name="P:SpiceSharp.Simulations.Variable.UnknownType">
            <summary>
            Gets the node type.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.Variable.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Variable"/> class.
            </summary>
            <param name="name">The identifier of the variable.</param>
            <param name="index">The index of the unknown variable.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Variable.#ctor(System.String,SpiceSharp.Simulations.VariableType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.Variable"/> class.
            </summary>
            <param name="name">The identifier of the variable.</param>
            <param name="type">The type of variable.</param>
            <param name="index">The index of the unknown variable.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.Variable.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.Variable.Clone">
            <summary>
            Clones this variable.
            </summary>
            <returns>A clone of this variable.</returns>
        </member>
        <member name="T:SpiceSharp.Simulations.VariableEventArgs">
            <summary>
            Arguments for events that pass a <see cref="P:SpiceSharp.Simulations.VariableEventArgs.Variable"/>.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.VariableEventArgs.Variable">
            <summary>
            Gets the variable.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableEventArgs.#ctor(SpiceSharp.Simulations.Variable)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.VariableEventArgs"/> class.
            </summary>
            <param name="variable">The variable.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.VariableSet">
            <summary>
            Contains and manages circuit nodes.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.VariableSet._unknowns">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="E:SpiceSharp.Simulations.VariableSet.VariableAdded">
            <summary>
            Event that is called when a variable is added to the set.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.VariableSet.Ground">
            <summary>
            Gets the ground node.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.VariableSet.Comparer">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that is used to determine equality of keys.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.VariableSet.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:SpiceSharp.Simulations.Variable"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The variable at the specified index.</returns>
        </member>
        <member name="P:SpiceSharp.Simulations.VariableSet.Count">
            <summary>
            Gets the number of variables.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.VariableSet.Keys">
            <summary>
            Enumerate all variable names in the set.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.VariableSet.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.Generic.ICollection`1"/> is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.VariableSet.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="P:SpiceSharp.Simulations.VariableSet.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.VariableSet"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableSet.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.Simulations.VariableSet"/> class.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing variable/node names, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableSet.MapNode(System.String,SpiceSharp.Simulations.VariableType)">
            <summary>
            This method maps a variable in the circuit. If a variable with the same identifier already exists, then that variable is returned.
            </summary>
            <remarks>
            If the variable already exists, the variable type is ignored.
            </remarks>
            <param name="id">The identifier of the variable.</param>
            <param name="type">The type of the variable.</param>
            <returns>A new variable with the specified identifier and type, or a previously mapped variable if it already existed.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableSet.MapNode(System.String)">
            <summary>
            This method maps a variable in the circuit. If a variable with the same identifier already exists, then that variable is returned.
            </summary>
            <param name="id">The identifier of the variable.</param>
            <returns>A new variable with the specified identifier and type, or a previously mapped variable if it already existed.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableSet.AliasNode(System.String,System.String)">
            <summary>
            Make an alias for a variable identifier.
            </summary>
            <remarks>
            This basically gives two names to the same variable. This can be used for example to make multiple identifiers
            point to the ground node.
            </remarks>
            <param name="original">The original identifier.</param>
            <param name="alias">The alias for the identifier.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableSet.Create(System.String,SpiceSharp.Simulations.VariableType)">
            <summary>
            Create a new variable.
            </summary>
            <remarks>
            Variables created using this method cannot be found back using the method <see cref="M:SpiceSharp.Simulations.VariableSet.MapNode(System.String,SpiceSharp.Simulations.VariableType)"/>.
            </remarks>
            <param name="id">The identifier of the new variable.</param>
            <param name="type">The type of the variable.</param>
            <returns>A new variable.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableSet.Create(System.String)">
            <summary>
            Create a new variable.
            </summary>
            <remarks>
            Variables created using this method cannot be found back using the method <see cref="M:SpiceSharp.Simulations.VariableSet.MapNode(System.String,SpiceSharp.Simulations.VariableType)"/>.
            </remarks>
            <param name="id">The identifier of the new variable.</param>
            <returns>A new variable.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableSet.ContainsNode(System.String)">
            <summary>
            Determines whether the set contains a mapped variable by a specified identifier.
            </summary>
            <param name="id">The identifier.</param>
            <returns>
              <c>true</c> if the specified set contains the variable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableSet.Contains(System.String)">
            <summary>
            Determines whether the set contains any variable by a specified identifier.
            </summary>
            <param name="id">The identifier.</param>
            <returns>
              <c>true</c> if the set contains the variable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableSet.TryGetNode(System.String,SpiceSharp.Simulations.Variable@)">
            <summary>
            Tries to get a variable.
            </summary>
            <param name="id">The identifier.</param>
            <param name="node">The found variable.</param>
            <returns>
              <c>true</c> if the variable was found; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableSet.GetNode(System.String)">
            <summary>
            Gets a mapped variable. If the node voltage does not exist, an exception will be thrown.
            </summary>
            <param name="id">The identifier.</param>
            <returns>
            The node with the specified identifier.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableSet.GetVariable(System.String)">
            <summary>
            Gets a variable.
            </summary>
            <param name="id">string</param>
            <returns>Return the variable with the specified identifier, or <c>null</c> if it doesn't exist.</returns>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableSet.GetVariables">
            <summary>
            Enumerates all variables.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableSet.Lock">
            <summary>
            Avoids any further additions of variables.
            </summary>
            <remarks>
            It is not possible to dynamically add and remove nodes while performing some operations (like most simulations).
            </remarks>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableSet.Clear">
            <summary>
            Clear all variables.
            </summary>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableSet.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableSet.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copy the elements to an array.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The starting index.</param>
        </member>
        <member name="M:SpiceSharp.Simulations.VariableSet.OnVariableAdded(SpiceSharp.Simulations.VariableEventArgs)">
            <summary>
            Method that calls the <see cref="E:SpiceSharp.Simulations.VariableSet.VariableAdded"/> event.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="T:SpiceSharp.Simulations.VariableType">
            <summary>
            Enumeration of variable types.
            </summary>
            <remarks>
            Variables are the unknowns in the set of equations that need to be solved simultaneously.
            </remarks>
        </member>
        <member name="F:SpiceSharp.Simulations.VariableType.None">
            <summary>
            The unknown associated with this node does not fall into a category.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.VariableType.Voltage">
            <summary>
            The unknown associated with this node is a voltage.
            </summary>
        </member>
        <member name="F:SpiceSharp.Simulations.VariableType.Current">
            <summary>
            The unknown associated with this node is a current.
            </summary>
        </member>
        <member name="T:SpiceSharp.IntegrationMethods.ArrayHistory`1">
            <summary>
            A class that implements a history with an array.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <seealso cref="T:SpiceSharp.IntegrationMethods.History`1" />
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.ArrayHistory`1.Current">
            <summary>
            Gets or sets the current value.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.ArrayHistory`1.Item(System.Int32)">
            <summary>
            Gets the value at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>
            The value at the specified index.
            </returns>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.ArrayHistory`1.Points">
            <summary>
            Gets all points in the history.
            </summary>
        </member>
        <member name="F:SpiceSharp.IntegrationMethods.ArrayHistory`1._history">
            <summary>
            Timesteps in history
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.ArrayHistory`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.IntegrationMethods.ArrayHistory`1"/> class.
            </summary>
            <param name="length">The number of points to store.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.ArrayHistory`1.#ctor(System.Int32,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.IntegrationMethods.ArrayHistory`1"/> class.
            </summary>
            <param name="length">The number of points to store.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.ArrayHistory`1.#ctor(System.Int32,System.Func{System.Int32,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.IntegrationMethods.ArrayHistory`1"/> class.
            </summary>
            <param name="length">The number of points to store.</param>
            <param name="generator">The function that generates the initial values.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.ArrayHistory`1.Cycle">
            <summary>
            Cycles through history.
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.ArrayHistory`1.Store(`0)">
            <summary>
            Store a new value in the history.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.ArrayHistory`1.Expand(System.Int32)">
            <summary>
            Expands the specified new size.
            </summary>
            <param name="newSize">The new size.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.ArrayHistory`1.Clear(`0)">
            <summary>
            Clear the whole history with the same value.
            </summary>
            <param name="value">The value to be cleared with.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.ArrayHistory`1.Clear(System.Func{System.Int32,`0})">
            <summary>
            Clear the history using a function by index.
            </summary>
            <param name="generator">The function generating the values.</param>
        </member>
        <member name="T:SpiceSharp.IntegrationMethods.History`1">
            <summary>
            A template for tracking a history of objects.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.History`1.Current">
            <summary>
            Gets or sets the current value.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.History`1.Item(System.Int32)">
            <summary>
            Gets a value in history.
            </summary>
            <param name="index">The number of points to go back. 0 means the current point.</param>
            <returns>
            The object in history.
            </returns>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.History`1.Length">
            <summary>
            Gets the number of timesteps stored.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.History`1.Points">
            <summary>
            Gets all points in the history.
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.History`1.Cycle">
            <summary>
            Cycles through history.
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.History`1.Store(`0)">
            <summary>
            Store a new value in the history.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.History`1.Expand(System.Int32)">
            <summary>
            Expand the history length.
            </summary>
            <param name="newLength">The new number of points in history to track.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.History`1.Clear(`0)">
            <summary>
            Clear the whole history with the same value.
            </summary>
            <param name="value">The value to be cleared with.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.History`1.Clear(System.Func{System.Int32,`0})">
            <summary>
            Clear the history using a function by index.
            </summary>
            <param name="generator">The function generating the values.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.History`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.History`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:SpiceSharp.IntegrationMethods.NodeHistory`1">
            <summary>
            A class that implements a history using a linked list.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
            <seealso cref="T:SpiceSharp.IntegrationMethods.History`1" />
        </member>
        <member name="T:SpiceSharp.IntegrationMethods.NodeHistory`1.Node">
            <summary>
            A class that represents a node in the history.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.NodeHistory`1.Node.Value">
            <summary>
            Gets or sets the node value.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.NodeHistory`1.Node.Previous">
            <summary>
            Gets or sets the previous node.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.NodeHistory`1.Node.Next">
            <summary>
            Gets or sets the next node.
            </summary>
        </member>
        <member name="F:SpiceSharp.IntegrationMethods.NodeHistory`1._currentPoint">
            <summary>
            The current point
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.NodeHistory`1.Current">
            <summary>
            Gets or sets the current value.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.NodeHistory`1.Item(System.Int32)">
            <summary>
            Gets the value at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>
            The value at the specified index.
            </returns>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.NodeHistory`1.Points">
            <summary>
            Gets all points in the history.
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.NodeHistory`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.IntegrationMethods.NodeHistory`1"/> class.
            </summary>
            <param name="length">The number of points to store.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.NodeHistory`1.#ctor(System.Int32,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.IntegrationMethods.NodeHistory`1"/> class.
            </summary>
            <param name="length">The number of points to store.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.NodeHistory`1.#ctor(System.Int32,System.Func{System.Int32,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.IntegrationMethods.NodeHistory`1"/> class.
            </summary>
            <param name="length">The number of points to store.</param>
            <param name="generator">The function that generates the initial values.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.NodeHistory`1.Cycle">
            <summary>
            Cycles through history.
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.NodeHistory`1.Store(`0)">
            <summary>
            Store a new value in the history.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.NodeHistory`1.Expand(System.Int32)">
            <summary>
            Expand the history length.
            </summary>
            <param name="newLength">The new number of points in history to track.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.NodeHistory`1.Clear(`0)">
            <summary>
            Clear the whole history with the same value.
            </summary>
            <param name="value">The value to be cleared with.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.NodeHistory`1.Clear(System.Func{System.Int32,`0})">
            <summary>
            Clear the history using a function by index.
            </summary>
            <param name="generator">The function generating the values.</param>
        </member>
        <member name="T:SpiceSharp.IntegrationMethods.ReadOnlyHistory`1">
            <summary>
            A wrapper class to make a history read-only.
            </summary>
            <typeparam name="T">The base value type.</typeparam>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.ReadOnlyHistory`1.History">
            <summary>
            Gets the base history object.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.ReadOnlyHistory`1.Current">
            <summary>
            Gets the current value.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.ReadOnlyHistory`1.Item(System.Int32)">
            <summary>
            Gets a value in history.
            </summary>
            <param name="index">The number of points to go back in time. 0 means the current point.</param>
            <returns>
            The value at the specified timepoint.
            </returns>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.ReadOnlyHistory`1.#ctor(SpiceSharp.IntegrationMethods.History{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.IntegrationMethods.ReadOnlyHistory`1"/> class.
            </summary>
            <param name="history">The base history.</param>
        </member>
        <member name="T:SpiceSharp.IntegrationMethods.IntegrationMethod">
            <summary>
            A template for integration methods.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.IntegrationMethod.MaxOrder">
            <summary>
            Gets the maximum integration order for the integration method.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.IntegrationMethod.Order">
            <summary>
            Gets the current integration order.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.IntegrationMethod.IntegrationStates">
            <summary>
            Gets the previously accepted integration states.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.IntegrationMethod.StateManager">
            <summary>
            Class for managing integration states.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.IntegrationMethod.BaseTime">
            <summary>
            Gets the time of the last accepted timepoint.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.IntegrationMethod.Time">
            <summary>
            Gets the time of the currently probed timepoint.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.IntegrationMethod.Slope">
            <summary>
            The first order derivative of any variable that is
            dependent on the timestep.
            </summary>
        </member>
        <member name="E:SpiceSharp.IntegrationMethods.IntegrationMethod.TruncateProbe">
            <summary>
            Occurs when truncating the probed timestep.
            </summary>
        </member>
        <member name="E:SpiceSharp.IntegrationMethods.IntegrationMethod.TruncateEvaluate">
            <summary>
            Occurs when evaluating the current timestep after solving.
            </summary>
        </member>
        <member name="E:SpiceSharp.IntegrationMethods.IntegrationMethod.TruncateNonConvergence">
            <summary>
            Occurs when the solution could not converge for the probed timepoint.
            </summary>
        </member>
        <member name="E:SpiceSharp.IntegrationMethods.IntegrationMethod.AcceptSolution">
            <summary>
            Occurs when a timepoint is accepted.
            </summary>
        </member>
        <member name="E:SpiceSharp.IntegrationMethods.IntegrationMethod.ContinueTimestep">
            <summary>
            Occurs when the simulation decides on the next timestep to be probed.
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.IntegrationMethod.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.IntegrationMethods.IntegrationMethod"/> class.
            </summary>
            <param name="maxOrder">The maximum integration order.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.IntegrationMethod.Setup(SpiceSharp.Simulations.TimeSimulation)">
            <summary>
            Sets up for the specified simulation.
            </summary>
            <param name="simulation">The simulation.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.IntegrationMethod.CreateHistory">
            <summary>
            Creates a state that keeps a history of values.
            </summary>
            <returns>
            A <see cref="T:SpiceSharp.IntegrationMethods.StateHistory"/> object that is compatible with this integration method.
            </returns>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.IntegrationMethod.CreateDerivative(System.Boolean)">
            <summary>
            Creates a state for which a derivative with respect to time can be determined.
            </summary>
            <param name="track">if set to <c>false</c>, the state is considered purely informative.</param>
            <returns>
            A <see cref="T:SpiceSharp.IntegrationMethods.StateDerivative" /> object that is compatible with this integration method.
            </returns>
            <remarks>
            Tracked derivatives are used in more advanced features implemented by the integration method.
            For example, derived states can be used for finding a good time step by approximating the 
            local truncation error (ie. the error made by taking discrete time steps). If you do not 
            want the derivative to participate in these features, set <paramref name="track" /> to false.
            </remarks>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.IntegrationMethod.CreateDerivative">
            <summary>
            Creates a state that can be derived and is tracked by the integration method.
            </summary>
            <returns>
            A <see cref="T:SpiceSharp.IntegrationMethods.StateDerivative" /> object that is compatible with this integration method.
            </returns>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.IntegrationMethod.Initialize(SpiceSharp.Simulations.TimeSimulation)">
            <summary>
            Initializes the integration method.
            </summary>
            <param name="simulation">The time-based simulation.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.IntegrationMethod.Probe(SpiceSharp.Simulations.TimeSimulation,System.Double)">
            <summary>
            Starts probing a new timepoint.
            </summary>
            <param name="simulation">The time-based simulation.</param>
            <param name="delta">The timestep to be probed.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.IntegrationMethod.NonConvergence(SpiceSharp.Simulations.TimeSimulation,System.Double@)">
            <summary>
            Updates the integration method in case the solution did not converge.
            </summary>
            <param name="simulation">The time-based simulation.</param>
            <param name="newDelta">The next timestep to be probed.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.IntegrationMethod.Evaluate(SpiceSharp.Simulations.TimeSimulation,System.Double@)">
            <summary>
            Evaluates whether or not the current solution can be accepted.
            </summary>
            <param name="simulation">The time-based simulation.</param>
            <param name="newDelta">The next requested timestep in case the solution is not accepted.</param>
            <returns>
              <c>true</c> if the time point is accepted; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.IntegrationMethod.Accept(SpiceSharp.Simulations.TimeSimulation)">
            <summary>
            Accepts the last evaluated time point.
            </summary>
            <param name="simulation">The time-based simulation.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.IntegrationMethod.Continue(SpiceSharp.Simulations.TimeSimulation,System.Double@)">
            <summary>
            Continues the simulation.
            </summary>
            <param name="simulation">The time-based simulation</param>
            <param name="delta">The initial probing timestep.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.IntegrationMethod.Unsetup(SpiceSharp.Simulations.TimeSimulation)">
            <summary>
            Destroys the integration method.
            </summary>
            <param name="simulation">The simulation.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.IntegrationMethod.GetTimestep(System.Int32)">
            <summary>
            Gets a timestep in history. The index 0 is the current timestep.
            </summary>
            <param name="index">Points to go back in time.</param>
            <returns>
            The timestep.
            </returns>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.IntegrationMethod.GetSolution(System.Int32)">
            <summary>
            Gets a solution in history. The index 0 is the last accepted solution.
            </summary>
            <param name="index">Points to go back in time.</param>
            <returns>The solution vector.</returns>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.IntegrationMethod.OnTruncateNonConvergence(SpiceSharp.IntegrationMethods.TruncateEvaluateEventArgs)">
            <summary>
            Raises the <see cref="E:TruncateNonConvergence" /> event.
            </summary>
            <param name="args">The <see cref="T:SpiceSharp.IntegrationMethods.TruncateEvaluateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.IntegrationMethod.OnTruncateEvaluate(SpiceSharp.IntegrationMethods.TruncateEvaluateEventArgs)">
            <summary>
            Raises the <see cref="E:TruncateEvaluate" /> event.
            </summary>
            <param name="args">The <see cref="T:SpiceSharp.IntegrationMethods.TruncateEvaluateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.IntegrationMethod.OnAcceptSolution(System.EventArgs)">
            <summary>
            Raises the <see cref="E:AcceptSolution" /> event.
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.IntegrationMethod.OnTruncateProbe(SpiceSharp.IntegrationMethods.TruncateTimestepEventArgs)">
            <summary>
            Raises the <see cref="E:TruncateProbe" /> event.
            </summary>
            <param name="args">The <see cref="T:SpiceSharp.IntegrationMethods.TruncateTimestepEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.IntegrationMethod.OnContinue(SpiceSharp.IntegrationMethods.ModifyTimestepEventArgs)">
            <summary>
            Raises the <see cref="E:Continue" /> event.
            </summary>
            <param name="args">The <see cref="T:SpiceSharp.IntegrationMethods.ModifyTimestepEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:SpiceSharp.IntegrationMethods.ModifyTimestepEventArgs">
            <summary>
            Event arguments for probing a new time point.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.ModifyTimestepEventArgs.Simulation">
            <summary>
            Gets the time simulation.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.ModifyTimestepEventArgs.Delta">
            <summary>
            Gets or sets the timestep to be probed.
            </summary>
            <remarks>
            Be careful when increasing the timestep, as it could cause truncation errors!
            </remarks>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.ModifyTimestepEventArgs.#ctor(SpiceSharp.Simulations.TimeSimulation,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.IntegrationMethods.ModifyTimestepEventArgs"/> class.
            </summary>
            <param name="simulation">The time-based simulation.</param>
            <param name="delta">The timestep.</param>
        </member>
        <member name="T:SpiceSharp.IntegrationMethods.IntegrationState">
            <summary>
            Represents the state of an integration method at a certain time point.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.IntegrationState.Delta">
            <summary>
            Gets or sets the timestep.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.IntegrationState.Solution">
            <summary>
            Gets the associated solution with the timepoint.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.IntegrationState.State">
            <summary>
            Gets the states allocated by entities at this timepoint.
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.IntegrationState.#ctor(System.Double,SpiceSharp.Algebra.Vector{System.Double},SpiceSharp.Algebra.Vector{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.IntegrationMethods.IntegrationState"/> class.
            </summary>
            <param name="delta">The timestep.</param>
            <param name="solution">The solution.</param>
            <param name="state">The state.</param>
        </member>
        <member name="T:SpiceSharp.IntegrationMethods.StateDerivative">
            <summary>
            A template a <see cref="T:SpiceSharp.IntegrationMethods.StateHistory" /> that also can be derived.
            </summary>
            <seealso cref="T:SpiceSharp.IntegrationMethods.StateHistory" />
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.StateDerivative.Derivative">
            <summary>
            Gets the current derivative.
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.StateDerivative.Jacobian(System.Double)">
            <summary>
            Calculate contribution to the jacobian matrix (or Y-matrix). 
            </summary>
            <param name="derivative">Derivative of the state variable with respect to the unknown variable.</param>
            <returns>
            A value that can be added to the element in the Y-matrix.
            </returns>
            <remarks>
            The value returned by this method means that the state variable depends on the derivative of an unknown variable (eg.
            the voltage across a capacitor). <paramref name="derivative"/> is the derivative of the state variable w.r.t. the 
            unknown variable.
            </remarks>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.StateDerivative.RhsCurrent(System.Double,System.Double)">
            <summary>
            Calculate contribution to the rhs vector (right-hand side vector).
            </summary>
            <param name="jacobianValue">The Jacobian matrix contribution.</param>
            <param name="currentValue">The current value of the unknown variable.</param>
            <returns>
            A value that can be added to the element in the right-hand side vector.
            </returns>
            <remarks>
            The state variable can be nonlinearly dependent of the unknown variables
            it is derived of.
            </remarks>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.StateDerivative.RhsCurrent">
            <summary>
            Calculate contribution to the rhs vector (right-hand side vector).
            </summary>
            <returns>
            A value that can be added to the element in the right-hand side vector.
            </returns>
            <remarks>
            The state variable is assumed to be linearly dependent of the unknown variables
            it is derived of. Ie. Q = dqdv * v (v is the unknown).
            </remarks>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.StateDerivative.Integrate">
            <summary>
            Calculates the derivative.
            </summary>
        </member>
        <member name="T:SpiceSharp.IntegrationMethods.StateHistory">
            <summary>
            A template for a state that needs some kind of history.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.StateHistory.Current">
            <summary>
            Gets or sets the value of the state at the current timepoint.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.StateHistory.Item(System.Int32)">
            <summary>
            Gets a point in history.
            </summary>
            <param name="index">Steps to go back in history. 0 means the current value.</param>
            <returns>
            The value at the specified timepoint.
            </returns>
        </member>
        <member name="T:SpiceSharp.IntegrationMethods.StateManager">
            <summary>
            This class is responsible for managing states.
            </summary>
            <seealso cref="T:SpiceSharp.IntegrationMethods.StateHistory"/>
            <seealso cref="T:SpiceSharp.IntegrationMethods.StateDerivative"/>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.StateManager.States">
            <summary>
            Gets the number of states in the pool.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.StateManager.Size">
            <summary>
            Gets the number of different values in the pool.
            </summary>
            <remarks>
            A state that also calculates a derivative, will need one more memory for
            storing that derivative. This property will return the total size needed
            to store all such values.
            </remarks>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.StateManager.AllocateState(System.Int32)">
            <summary>
            Allocates a state.
            </summary>
            <param name="order">The order of the state.</param>
            <returns>
            The index of the newly allocated state.
            </returns>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.StateManager.Build">
            <summary>
            Build a vector that can represent all requested states.
            </summary>
            <returns>
            A vector that can hold all the state values.
            </returns>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.StateManager.Unsetup">
            <summary>
            Destroys the state manager.
            </summary>
        </member>
        <member name="T:SpiceSharp.IntegrationMethods.TruncateEvaluateEventArgs">
            <summary>
            Event arguments for evaluating a solution by an integration method.
            </summary>
            <seealso cref="T:SpiceSharp.IntegrationMethods.TruncateTimestepEventArgs" />
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.TruncateEvaluateEventArgs.Order">
            <summary>
            Gets or sets the order to continue integration. The order is capped between 1 and the maximum integration order.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.TruncateEvaluateEventArgs.Accepted">
            <summary>
            Gets or sets whether or not the solution should be accepted. If flagged false, other events cannot reset this value.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.TruncateEvaluateEventArgs.MaxOrder">
            <summary>
            Gets the maximum integration order.
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.TruncateEvaluateEventArgs.#ctor(SpiceSharp.Simulations.TimeSimulation,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.IntegrationMethods.TruncateEvaluateEventArgs"/> class.
            </summary>
            <param name="simulation">The time-based simulation.</param>
            <param name="maxOrder">The maximum integration order.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.TruncateEvaluateEventArgs.#ctor(SpiceSharp.Simulations.TimeSimulation,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.IntegrationMethods.TruncateEvaluateEventArgs"/> class.
            </summary>
            <param name="simulation">The time-based simulation.</param>
            <param name="maxOrder">The maximum integration order.</param>
            <param name="delta">The initial timestep.</param>
        </member>
        <member name="T:SpiceSharp.IntegrationMethods.TruncateTimestepEventArgs">
            <summary>
            Event arguments for probing a new time point.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.TruncateTimestepEventArgs.Simulation">
            <summary>
            Gets the time-based simulation.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.TruncateTimestepEventArgs.Delta">
            <summary>
            Gets or sets the timestep to be probed.
            </summary>
            <remarks>
            Be careful when increasing the timestep, as it could cause truncation errors!
            </remarks>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.TruncateTimestepEventArgs.#ctor(SpiceSharp.Simulations.TimeSimulation)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.IntegrationMethods.TruncateTimestepEventArgs"/> class.
            </summary>
            <param name="simulation">The time-based simulation.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.TruncateTimestepEventArgs.#ctor(SpiceSharp.Simulations.TimeSimulation,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.IntegrationMethods.TruncateTimestepEventArgs"/> class.
            </summary>
            <param name="simulation">The time-based simulation.</param>
            <param name="delta">The maximum timestep.</param>
        </member>
        <member name="T:SpiceSharp.IntegrationMethods.Breakpoints">
            <summary>
            A collection of breakpoints used for time-domain analysis.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.Breakpoints.MinBreak">
            <summary>
            Gets the minimum space between two breakpoints.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.Breakpoints.First">
            <summary>
            Gets the first breakpoint.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.Breakpoints.Delta">
            <summary>
            Gets the timestep set by the first two breakpoints.
            </summary>
        </member>
        <member name="F:SpiceSharp.IntegrationMethods.Breakpoints._bps">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.Breakpoints.SetBreakpoint(System.Double)">
            <summary>
            Adds a breakpoint to the list.
            </summary>
            <param name="timePoint">The time point.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.Breakpoints.ClearBreakpoint">
            <summary>
            Clears a breakpoint.
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.Breakpoints.Clear">
            <summary>
            Clears all breakpoints.
            </summary>
        </member>
        <member name="T:SpiceSharp.IntegrationMethods.IBreakpoints">
            <summary>
            Interface that integration methods can implement to indicate they support breakpoints
            </summary>
            <remarks>
            An integration method that implements this interface is responsible for hitting the
            breakpoints and clearing them when they have been hit.
            </remarks>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.IBreakpoints.Time">
            <summary>
            Gets the current time point.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.IBreakpoints.Breakpoints">
            <summary>
            Gets the breakpoint system.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.IBreakpoints.Break">
            <summary>
            Gets a value indicating whether this point is the first after a breakpoint.
            </summary>
        </member>
        <member name="T:SpiceSharp.IntegrationMethods.FixedEuler">
            <summary>
            Implements backward Euler integration with a fixed timesep. This is the
            fastest way, but also the least accurate. Any changes to the timestep are
            ignored.
            </summary>
            <seealso cref="T:SpiceSharp.IntegrationMethods.IntegrationMethod" />
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.FixedEuler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.IntegrationMethods.FixedEuler"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.FixedEuler.Initialize(SpiceSharp.Simulations.TimeSimulation)">
            <summary>
            Initializes the integration method.
            </summary>
            <param name="simulation">The time-based simulation.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.FixedEuler.Probe(SpiceSharp.Simulations.TimeSimulation,System.Double)">
            <summary>
            Starts probing a new timepoint.
            </summary>
            <param name="simulation">The time-based simulation.</param>
            <param name="delta">The timestep to be probed.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.FixedEuler.Continue(SpiceSharp.Simulations.TimeSimulation,System.Double@)">
            <summary>
            Continues the simulation.
            </summary>
            <param name="simulation">The time-based simulation</param>
            <param name="delta">The initial probing timestep.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.FixedEuler.Evaluate(SpiceSharp.Simulations.TimeSimulation,System.Double@)">
            <summary>
            Evaluates whether or not the current solution can be accepted.
            </summary>
            <param name="simulation">The time-based simulation.</param>
            <param name="newDelta">The next requested timestep in case the solution is not accepted.</param>
            <returns>
            <c>true</c> if the time point is accepted; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.FixedEuler.CreateDerivative(System.Boolean)">
            <summary>
            Creates a state for which a derivative with respect to time can be determined.
            </summary>
            <param name="track">if set to <c>false</c>, the state is considered purely informative.</param>
            <returns>
            A <see cref="T:SpiceSharp.IntegrationMethods.StateDerivative" /> object that is compatible with this integration method.
            </returns>
            <remarks>
            Tracked derivatives are used in more advanced features implemented by the integration method.
            For example, derived states can be used for finding a good time step by approximating the
            local truncation error (ie. the error made by taking discrete time steps). If you do not
            want the derivative to participate in these features, set <paramref name="track" /> to false.
            </remarks>
        </member>
        <member name="T:SpiceSharp.IntegrationMethods.FixedEuler.FixedEulerStateDerivative">
            <summary>
            A state that can be derived by the integration method
            </summary>
            <seealso cref="T:SpiceSharp.IntegrationMethods.StateDerivative" />
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.FixedEuler.FixedEulerStateDerivative.Current">
            <summary>
            Gets or sets the value of the state at the current timepoint.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.FixedEuler.FixedEulerStateDerivative.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Double"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.FixedEuler.FixedEulerStateDerivative.Derivative">
            <summary>
            Gets the current derivative.
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.FixedEuler.FixedEulerStateDerivative.Jacobian(System.Double)">
            <summary>
            Calculate contribution to the jacobian matrix (or Y-matrix).
            </summary>
            <param name="derivative">Derivative of the state variable with respect to the unknown variable.</param>
            <returns>
            A value that can be added to the element in the Y-matrix.
            </returns>
            <remarks>
            The value returned by this method means that the state variable depends on the derivative of an unknown variable (eg.
            the voltage across a capacitor). <paramref name="derivative" /> is the derivative of the state variable w.r.t. the
            unknown variable.
            </remarks>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.FixedEuler.FixedEulerStateDerivative.#ctor(SpiceSharp.IntegrationMethods.FixedEuler)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.IntegrationMethods.FixedEuler.FixedEulerStateDerivative"/> class.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.FixedEuler.FixedEulerStateDerivative.RhsCurrent">
            <summary>
            Calculate contribution to the rhs vector (right-hand side vector).
            </summary>
            <returns>
            A value that can be added to the element in the right-hand side vector.
            </returns>
            <remarks>
            The state variable is assumed to be linearly dependent of the unknown variables
            it is derived of. Ie. Q = dqdv * v (v is the unknown).
            </remarks>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.FixedEuler.FixedEulerStateDerivative.Integrate">
            <summary>
            Calculates the derivative.
            </summary>
        </member>
        <member name="T:SpiceSharp.IntegrationMethods.Gear">
            <summary>
            A class that implements the Gear integration method.
            </summary>
            <seealso cref="T:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod" />
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.Gear.Coefficients">
            <summary>
            Gets the integration coefficients.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.Gear.PredictionCoefficients">
            <summary>
            Gets the prediction coefficients.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.Gear.Matrix">
            <summary>
            Matrix used to solve the integration coefficients.
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.Gear.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.IntegrationMethods.Gear"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.Gear.Initialize(SpiceSharp.Simulations.TimeSimulation)">
            <summary>
            Initializes the integration method.
            </summary>
            <param name="simulation">The time-based simulation.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.Gear.Unsetup(SpiceSharp.Simulations.TimeSimulation)">
            <summary>
            Destroys the integration method.
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.Gear.Predict(SpiceSharp.Simulations.TimeSimulation)">
            <summary>
            Predicts a solution
            </summary>
            <param name="simulation">The time-based simulation.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.Gear.TruncateNodes(System.Object,SpiceSharp.IntegrationMethods.TruncateEvaluateEventArgs)">
            <summary>
            Truncates the timestep using nodes.
            </summary>
            <param name="sender">The sender (integration method).</param>
            <param name="args">The <see cref="T:SpiceSharp.IntegrationMethods.TruncateEvaluateEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.Gear.ComputeCoefficients">
            <summary>
            Computes the integration coefficients.
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.Gear.ProduceDerivative">
            <summary>
            Produces a derivative.
            </summary>
            <returns>
            A <see cref="T:SpiceSharp.IntegrationMethods.StateDerivative" /> that can be used with this integration method.
            </returns>
        </member>
        <member name="T:SpiceSharp.IntegrationMethods.Gear.GearStateDerivative">
            <summary>
            A state that can be derived by the Gear integration method.
            </summary>
            <seealso cref="T:SpiceSharp.IntegrationMethods.StateDerivative" />
            <seealso cref="T:SpiceSharp.IntegrationMethods.ITruncatable" />
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.Gear.GearStateDerivative.Current">
            <summary>
            Gets or sets the value of the state at the current timepoint.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.Gear.GearStateDerivative.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Double"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.Gear.GearStateDerivative.Derivative">
            <summary>
            Gets the current derivative.
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.Gear.GearStateDerivative.#ctor(SpiceSharp.IntegrationMethods.Gear)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.IntegrationMethods.Gear.GearStateDerivative"/> class.
            </summary>
            <param name="method">The Gear integration method.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.Gear.GearStateDerivative.Jacobian(System.Double)">
            <summary>
            Calculate contribution to the jacobian matrix (or Y-matrix).
            </summary>
            <param name="derivative">Derivative of the state variable with respect to the unknown variable.</param>
            <returns>
            A value that can be added to the element in the Y-matrix.
            </returns>
            <remarks>
            The value returned by this method means that the state variable depends on the derivative of an unknown variable (eg.
            the voltage across a capacitor). <paramref name="derivative" /> is the derivative of the state variable w.r.t. the
            unknown variable.
            </remarks>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.Gear.GearStateDerivative.RhsCurrent">
            <summary>
            Calculate contribution to the rhs vector (right-hand side vector).
            </summary>
            <returns>
            A value that can be added to the element in the right-hand side vector.
            </returns>
            <remarks>
            The state variable is assumed to be linearly dependent of the unknown variables
            it is derived of. Ie. Q = dqdv * v (v is the unknown).
            </remarks>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.Gear.GearStateDerivative.Integrate">
            <summary>
            Calculates the derivative.
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.Gear.GearStateDerivative.Truncate">
            <summary>
            Truncates the current timestep.
            </summary>
            <returns>
            The maximum timestep allowed by this state.
            </returns>
        </member>
        <member name="T:SpiceSharp.IntegrationMethods.ITruncatable">
            <summary>
            This interface indicates that a <see cref="T:SpiceSharp.IntegrationMethods.StateDerivative"/> is capable of truncating the timestep.
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.ITruncatable.Truncate">
            <summary>
            Truncates the current timestep.
            </summary>
            <returns>
            The maximum timestep allowed by this state.
            </returns>
        </member>
        <member name="T:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod">
            <summary>
            The default integration method as implemented by Spice 3f5
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod.Breakpoints">
            <summary>
            Gets the breakpoint system.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod.Break">
            <summary>
            Gets a value indicating whether this point is the first after a breakpoint.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod.TrTol">
            <summary>
            Gets the transient tolerance correction factor.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod.LteRelTol">
            <summary>
            Gets or sets the local truncation error relative tolerance.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod.LteAbsTol">
            <summary>
            Gets or sets the local truncation truncation error absolute tolerance.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod.ChgTol">
            <summary>
            Gets or sets the absolute tolerance for charges.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod.AbsTol">
            <summary>
            Gets the allowed absolute tolerance.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod.RelTol">
            <summary>
            Gets the allowed relative tolerance.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod.MaxStep">
            <summary>
            Gets the maximum timestep.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod.Expansion">
            <summary>
            Gets the timestep expansion factor.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod.MinStep">
            <summary>
            Gets the minimum timestep.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod.Prediction">
            <summary>
            Gets the prediction vector.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod.TruncatableStates">
            <summary>
            Gets a list with all truncatable states.
            </summary>
        </member>
        <member name="F:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod._saveDelta">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod"/> class.
            </summary>
            <param name="maxOrder">The maximum integration order.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod.Setup(SpiceSharp.Simulations.TimeSimulation)">
            <summary>
            Sets up for the specified simulation.
            </summary>
            <param name="simulation">The time-based simulation.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod.Initialize(SpiceSharp.Simulations.TimeSimulation)">
            <summary>
            Initializes the integration method.
            </summary>
            <param name="simulation">The time-based simulation.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod.Accept(SpiceSharp.Simulations.TimeSimulation)">
            <summary>
            Accepts the last evaluated time point.
            </summary>
            <param name="simulation">The time-based simulation.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod.Continue(SpiceSharp.Simulations.TimeSimulation,System.Double@)">
            <summary>
            Continues the simulation.
            </summary>
            <param name="simulation">The time-based simulation</param>
            <param name="delta">The initial probing timestep.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod.Probe(SpiceSharp.Simulations.TimeSimulation,System.Double)">
            <summary>
            Starts probing a new timepoint.
            </summary>
            <param name="simulation">The time-based simulation.</param>
            <param name="delta">The timestep to be probed.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod.NonConvergence(SpiceSharp.Simulations.TimeSimulation,System.Double@)">
            <summary>
            Updates the integration method in case the solution did not converge.
            </summary>
            <param name="simulation">The time-based simulation.</param>
            <param name="newDelta">The next timestep to be probed.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod.Evaluate(SpiceSharp.Simulations.TimeSimulation,System.Double@)">
            <summary>
            Evaluates whether or not the current solution can be accepted.
            </summary>
            <param name="simulation">The time-based simulation.</param>
            <param name="newDelta">The next requested timestep in case the solution is not accepted.</param>
            <returns>
            <c>true</c> if the time point is accepted; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod.Unsetup(SpiceSharp.Simulations.TimeSimulation)">
            <summary>
            Destroys the integration method.
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod.CreateDerivative(System.Boolean)">
            <summary>
            Creates a state for which a derivative with respect to time can be determined.
            </summary>
            <param name="track">if set to <c>false</c>, the state is considered purely informative.</param>
            <returns>
            A <see cref="T:SpiceSharp.IntegrationMethods.StateDerivative" /> object that is compatible with this integration method.
            </returns>
            <remarks>
            Tracked derivatives are used in more advanced features implemented by the integration method.
            For example, derived states can be used for finding a good time step by approximating the
            local truncation error (ie. the error made by taking discrete time steps). If you do not
            want the derivative to participate in these features, set <paramref name="track" /> to false.
            </remarks>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod.ComputeCoefficients">
            <summary>
            Computes the integration coefficients.
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod.Predict(SpiceSharp.Simulations.TimeSimulation)">
            <summary>
            Predicts a solution
            </summary>
            <param name="simulation">The time-based simulation.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod.ProduceDerivative">
            <summary>
            Produces a derivative.
            </summary>
            <returns>
            A <see cref="T:SpiceSharp.IntegrationMethods.StateDerivative" /> that can be used with this integration method.
            </returns>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod.TruncateStates(System.Object,SpiceSharp.IntegrationMethods.TruncateEvaluateEventArgs)">
            <summary>
            Truncates the timestep based on the states.
            </summary>
            <param name="sender">The sender (integration method).</param>
            <param name="args">The <see cref="T:SpiceSharp.IntegrationMethods.TruncateEvaluateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod.TruncateNodes(System.Object,SpiceSharp.IntegrationMethods.TruncateEvaluateEventArgs)">
            <summary>
            Truncates the timestep using nodes.
            </summary>
            <param name="sender">The sender (integration method).</param>
            <param name="args">The <see cref="T:SpiceSharp.IntegrationMethods.TruncateEvaluateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:SpiceSharp.IntegrationMethods.StateHistoryDefault">
            <summary>
            A class that implements a simple default history for states.
            </summary>
            <seealso cref="T:SpiceSharp.IntegrationMethods.StateHistory" />
            <remarks>
            This class is usually the default as states with just a history aren't specific to the integration method.
            </remarks>
        </member>
        <member name="F:SpiceSharp.IntegrationMethods.StateHistoryDefault._index">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.StateHistoryDefault.Current">
            <summary>
            Gets or sets the value of the state at the current timepoint.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.StateHistoryDefault.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Double"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.StateHistoryDefault.#ctor(SpiceSharp.IntegrationMethods.History{SpiceSharp.IntegrationMethods.IntegrationState},SpiceSharp.IntegrationMethods.StateManager)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.IntegrationMethods.StateHistoryDefault"/> class.
            </summary>
            <param name="source">The source history.</param>
            <param name="manager">The state manager.</param>
        </member>
        <member name="T:SpiceSharp.IntegrationMethods.Trapezoidal">
            <summary>
            A class that implements the trapezoidal integration method as implemented by Spice.
            </summary>
            <seealso cref="T:SpiceSharp.IntegrationMethods.SpiceIntegrationMethod" />
            <summary>
            Part of the trapezoidal integration method
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.Trapezoidal.Xmu">
            <summary>
            Gets the xmu.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.Trapezoidal.Coefficients">
            <summary>
            Integration coefficients
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.Trapezoidal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.IntegrationMethods.Trapezoidal"/> class.
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.Trapezoidal.Initialize(SpiceSharp.Simulations.TimeSimulation)">
            <summary>
            Initializes the integration method.
            </summary>
            <param name="simulation">The time-based simulation.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.Trapezoidal.Unsetup(SpiceSharp.Simulations.TimeSimulation)">
            <summary>
            Destroys the integration method.
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.Trapezoidal.Predict(SpiceSharp.Simulations.TimeSimulation)">
            <summary>
            Predicts a solution
            </summary>
            <param name="simulation">The time-based simulation.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.Trapezoidal.TruncateNodes(System.Object,SpiceSharp.IntegrationMethods.TruncateEvaluateEventArgs)">
            <summary>
            Truncates the timestep using nodes.
            </summary>
            <param name="sender">The sender (integration method).</param>
            <param name="args">The <see cref="T:SpiceSharp.IntegrationMethods.TruncateEvaluateEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.Trapezoidal.ComputeCoefficients">
            <summary>
            Computes the integration coefficients.
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.Trapezoidal.ProduceDerivative">
            <summary>
            Produces a derivative.
            </summary>
            <returns>
            A <see cref="T:SpiceSharp.IntegrationMethods.StateDerivative" /> that can be used with this integration method.
            </returns>
        </member>
        <member name="T:SpiceSharp.IntegrationMethods.Trapezoidal.TrapezoidalStateDerivative">
            <summary>
            A state that can be derived by the trapezoidal integration method.
            </summary>
            <seealso cref="T:SpiceSharp.IntegrationMethods.StateDerivative" />
            <seealso cref="T:SpiceSharp.IntegrationMethods.ITruncatable" />
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.Trapezoidal.TrapezoidalStateDerivative.Current">
            <summary>
            Gets or sets the value of the state at the current timepoint.
            </summary>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.Trapezoidal.TrapezoidalStateDerivative.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Double"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:SpiceSharp.IntegrationMethods.Trapezoidal.TrapezoidalStateDerivative.Derivative">
            <summary>
            Gets the current derivative.
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.Trapezoidal.TrapezoidalStateDerivative.#ctor(SpiceSharp.IntegrationMethods.Trapezoidal)">
            <summary>
            Initializes a new instance of the <see cref="T:SpiceSharp.IntegrationMethods.Trapezoidal.TrapezoidalStateDerivative"/> class.
            </summary>
            <param name="method">The trapezoidal method.</param>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.Trapezoidal.TrapezoidalStateDerivative.Jacobian(System.Double)">
            <summary>
            Calculate contribution to the jacobian matrix (or Y-matrix).
            </summary>
            <param name="derivative">Derivative of the state variable with respect to the unknown variable.</param>
            <returns>
            A value that can be added to the element in the Y-matrix.
            </returns>
            <remarks>
            The value returned by this method means that the state variable depends on the derivative of an unknown variable (eg.
            the voltage across a capacitor). <paramref name="derivative" /> is the derivative of the state variable w.r.t. the
            unknown variable.
            </remarks>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.Trapezoidal.TrapezoidalStateDerivative.RhsCurrent">
            <summary>
            Calculate contribution to the rhs vector (right-hand side vector).
            </summary>
            <returns>
            A value that can be added to the element in the right-hand side vector.
            </returns>
            <remarks>
            The state variable is assumed to be linearly dependent of the unknown variables
            it is derived of. Ie. Q = dqdv * v (v is the unknown).
            </remarks>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.Trapezoidal.TrapezoidalStateDerivative.Integrate">
            <summary>
            Calculates the derivative.
            </summary>
        </member>
        <member name="M:SpiceSharp.IntegrationMethods.Trapezoidal.TrapezoidalStateDerivative.Truncate">
            <summary>
            Truncates the current timestep.
            </summary>
            <returns>
            The maximum timestep allowed by this state.
            </returns>
        </member>
    </members>
</doc>
